{
    "astropy__astropy-12907": {
        "astropy/modeling/separable.py": [
            "separability_matrix",
            "_separable",
            "_cstack",
            "_cdot"
        ],
        "astropy/modeling/core.py": [
            "CompoundModel",
            "Model"
        ],
        "astropy/modeling/models.py": []
    },
    "astropy__astropy-13033": {
        "astropy/timeseries/core.py": [
            "BaseTimeSeries",
            "BaseTimeSeries._check_required_columns",
            "autocheck_required_columns"
        ],
        "astropy/timeseries/sampled.py": [
            "TimeSeries"
        ],
        "astropy/timeseries/binned.py": []
    },
    "astropy__astropy-13236": {
        "astropy/table/table.py": [
            "Table._convert_data_to_col",
            "TableColumns"
        ],
        "astropy/table/ndarray_mixin.py": [
            "NdarrayMixin",
            "NdarrayMixinInfo"
        ],
        "astropy/table/column.py": [
            "Column",
            "MaskedColumn",
            "ColumnInfo"
        ]
    },
    "astropy__astropy-13398": {
        "astropy/coordinates/builtin_frames/icrs_observed_transforms.py": [
            "icrs_to_observed",
            "observed_to_icrs"
        ],
        "astropy/coordinates/builtin_frames/itrs.py": [
            "ITRS"
        ],
        "astropy/coordinates/builtin_frames/altaz.py": [
            "AltAz",
            "itrs_to_observed_mat",
            "itrs_to_observed",
            "observed_to_itrs"
        ]
    },
    "astropy__astropy-13453": {
        "astropy/io/ascii/html.py": [
            "HTMLOutputter",
            "HTML"
        ],
        "astropy/io/ascii/core.py": [
            "BaseData",
            "BaseOutputter"
        ],
        "astropy/io/ascii/basic.py": []
    },
    "astropy__astropy-13579": {
        "astropy/wcs/wcsapi/sliced_low_level_wcs.py": [
            "SlicedLowLevelWCS"
        ],
        "astropy/wcs/wcsapi/high_level_wcs_wrapper.py": [
            "HighLevelWCSWrapper"
        ],
        "astropy/wcs/wcsapi/low_level_api.py": [
            "BaseLowLevelWCS.world_to_pixel_values",
            "BaseLowLevelWCS.pixel_to_world_values"
        ]
    },
    "astropy__astropy-13977": {
        "astropy/units/quantity.py": [
            "Quantity"
        ],
        "astropy/units/core.py": [
            "_condition_arg"
        ],
        "astropy/units/quantity_helper/function_helpers.py": []
    },
    "astropy__astropy-14096": {
        "astropy/coordinates/sky_coordinate.py": [
            "SkyCoord.__getattr__",
            "SkyCoord.__dir__"
        ],
        "astropy/coordinates/baseframe.py": [
            "BaseCoordinateFrame.__getattr__",
            "BaseCoordinateFrame.__dir__"
        ],
        "astropy/coordinates/attributes.py": []
    },
    "astropy__astropy-14182": {
        "astropy/io/ascii/rst.py": [
            "RST",
            "SimpleRSTHeader",
            "SimpleRSTData"
        ],
        "astropy/io/ascii/core.py": [
            "BaseHeader",
            "_get_writer"
        ],
        "astropy/io/ascii/ui.py": [
            "get_writer",
            "write"
        ]
    },
    "astropy__astropy-14309": {
        "astropy/io/fits/connect.py": [
            "is_fits"
        ],
        "astropy/io/registry/base.py": [
            "_UnifiedIORegistryBase.identify_format",
            "_UnifiedIORegistryBase._get_valid_format",
            "_UnifiedIORegistryBase._is_best_match"
        ],
        "astropy/io/registry/compat.py": [
            "_make_io_func",
            "identify_format"
        ]
    },
    "astropy__astropy-14365": {
        "astropy/io/ascii/qdp.py": [
            "_line_type",
            "_get_type_from_list_of_lines",
            "_interpret_err_lines",
            "_get_tables_from_qdp_file",
            "_understand_err_col",
            "_read_table_qdp",
            "QDP"
        ],
        "astropy/io/ascii/core.py": [],
        "astropy/io/ascii/ui.py": []
    },
    "astropy__astropy-14369": {
        "astropy/units/format/cds.py": [
            "CDS",
            "CDS._parse_unit",
            "CDS.parse",
            "CDS.to_string"
        ],
        "astropy/units/format/cds_parsetab.py": [],
        "astropy/io/ascii/cds.py": [
            "CdsHeader",
            "CdsData"
        ]
    },
    "astropy__astropy-14508": {
        "astropy/io/fits/card.py": [
            "_format_float",
            "Card",
            "Card._format_value"
        ],
        "astropy/io/fits/header.py": [
            "Header"
        ],
        "astropy/io/fits/column.py": []
    },
    "astropy__astropy-14539": {
        "astropy/io/fits/diff.py": [
            "TableDataDiff"
        ],
        "astropy/io/fits/fitsrec.py": [
            "FITS_rec",
            "FITS_record"
        ],
        "astropy/io/fits/column.py": [
            "_FormatP",
            "_FormatQ",
            "_VLF",
            "_makep"
        ]
    },
    "astropy__astropy-14598": {
        "astropy/io/fits/card.py": [
            "Card",
            "Card._format_value",
            "Card._parse_value",
            "Card.fromstring",
            "_format_value"
        ],
        "astropy/io/fits/header.py": [
            "Header.fromstring"
        ],
        "astropy/io/fits/util.py": []
    },
    "astropy__astropy-14995": {
        "astropy/nddata/mixins/ndarithmetic.py": [
            "NDArithmeticMixin",
            "NDArithmeticMixin._arithmetic_mask",
            "NDArithmeticMixin._arithmetic",
            "NDArithmeticMixin.multiply"
        ],
        "astropy/nddata/nddata.py": [
            "NDData"
        ],
        "astropy/nddata/nddata_base.py": [
            "NDDataBase"
        ]
    },
    "astropy__astropy-7166": {
        "astropy/utils/misc.py": [
            "InheritDocstrings"
        ],
        "astropy/utils/introspection.py": [
            "isinstancemethod",
            "_isinstancemethod"
        ],
        "astropy/utils/decorators.py": []
    },
    "astropy__astropy-7336": {
        "astropy/units/decorators.py": [
            "QuantityInput",
            "quantity_input"
        ],
        "astropy/units/quantity.py": [
            "Quantity"
        ],
        "astropy/utils/decorators.py": []
    },
    "astropy__astropy-7606": {
        "astropy/units/core.py": [
            "UnrecognizedUnit",
            "Unit.__call__",
            "UnrecognizedUnit.__eq__"
        ],
        "astropy/units/quantity.py": [],
        "astropy/units/__init__.py": []
    },
    "astropy__astropy-7671": {
        "astropy/utils/introspection.py": [
            "minversion"
        ],
        "astropy/utils/compat/numpycompat.py": [],
        "astropy/utils/__init__.py": []
    },
    "astropy__astropy-8707": {
        "astropy/io/fits/header.py": [
            "Header.fromstring",
            "_DelayedHeader"
        ],
        "astropy/io/fits/card.py": [
            "Card.fromstring"
        ],
        "astropy/io/fits/hdu/base.py": [
            "_BaseHDU.fromstring"
        ]
    },
    "astropy__astropy-8872": {
        "astropy/units/quantity.py": [
            "Quantity"
        ],
        "astropy/units/quantity_helper/helpers.py": [
            "helper_invariant",
            "helper_multiplication",
            "helper_division",
            "helper_power",
            "helper_twoarg_invariant"
        ],
        "astropy/units/core.py": []
    },
    "django__django-10097": {
        "django/core/validators.py": [
            "URLValidator",
            "_lazy_re_compile"
        ],
        "django/utils/http.py": [
            "urlquote",
            "urlunquote",
            "_urlparse",
            "_urlsplit"
        ],
        "django/utils/encoding.py": []
    },
    "django__django-10554": {
        "django/db/models/query.py": [
            "QuerySet",
            "QuerySet.union",
            "QuerySet.order_by",
            "QuerySet._clone",
            "QuerySet._fetch_all"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLCompiler",
            "SQLCompiler.get_order_by",
            "SQLCompiler.as_sql",
            "SQLCompiler.execute_sql"
        ],
        "django/db/models/sql/query.py": [
            "Query",
            "Query.add_ordering",
            "Query.clear_ordering"
        ]
    },
    "django__django-10880": {
        "django/db/models/sql/compiler.py": [
            "SQLCompiler"
        ],
        "django/db/models/aggregates.py": [
            "Aggregate",
            "Count"
        ],
        "django/db/backends/base/operations.py": [
            "BaseDatabaseOperations"
        ]
    },
    "django__django-10914": {
        "django/conf/global_settings.py": [],
        "django/core/files/storage.py": [
            "FileSystemStorage"
        ],
        "django/core/files/uploadedfile.py": [
            "TemporaryUploadedFile",
            "InMemoryUploadedFile"
        ]
    },
    "django__django-10973": {
        "django/db/backends/postgresql/client.py": [
            "_escape_pgpass",
            "DatabaseClient"
        ],
        "django/db/backends/base/client.py": [
            "BaseDatabaseClient"
        ],
        "django/db/backends/postgresql/base.py": [
            "DatabaseWrapper"
        ]
    },
    "django__django-10999": {
        "django/utils/dateparse.py": [
            "parse_duration"
        ],
        "django/utils/duration.py": [],
        "django/utils/http.py": []
    },
    "django__django-11066": {
        "django/contrib/contenttypes/management/__init__.py": [
            "RenameContentType",
            "RenameContentType._rename"
        ],
        "django/contrib/contenttypes/models.py": [
            "ContentType",
            "ContentTypeManager"
        ],
        "django/db/migrations/operations/models.py": [
            "RenameModel"
        ]
    },
    "django__django-11087": {
        "django/db/models/deletion.py": [
            "Collector",
            "CASCADE",
            "collect"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLCompiler",
            "execute_sql",
            "get_default_columns",
            "SQLDeleteCompiler"
        ],
        "django/db/models/query.py": [
            "QuerySet",
            "delete",
            "_raw_delete"
        ]
    },
    "django__django-11095": {
        "django/contrib/admin/options.py": [
            "ModelAdmin",
            "ModelAdmin.get_inline_instances",
            "ModelAdmin.get_inlines",
            "ModelAdmin.get_formsets_with_inlines",
            "ModelAdmin._create_formsets"
        ],
        "django/contrib/admin/checks.py": [
            "ModelAdminChecks",
            "ModelAdminChecks._check_inlines",
            "ModelAdminChecks._check_inlines_item"
        ],
        "django/contrib/admin/helpers.py": []
    },
    "django__django-11099": {
        "django/contrib/auth/validators.py": [
            "ASCIIUsernameValidator",
            "UnicodeUsernameValidator"
        ],
        "django/core/validators.py": [],
        "django/contrib/auth/migrations/0008_alter_user_username_max_length.py": []
    },
    "django__django-11119": {
        "django/template/engine.py": [
            "Engine.render_to_string",
            "Engine"
        ],
        "django/template/context.py": [
            "Context"
        ],
        "django/template/base.py": []
    },
    "django__django-11133": {
        "django/http/response.py": [
            "HttpResponse",
            "HttpResponse.content",
            "HttpResponse.content.setter",
            "HttpResponse.make_bytes",
            "HttpResponse.serialize"
        ],
        "django/http/__init__.py": [],
        "django/core/handlers/wsgi.py": []
    },
    "django__django-11138": {
        "django/db/backends/mysql/operations.py": [
            "DatabaseOperations._convert_field_to_tz",
            "DatabaseOperations.datetime_cast_date_sql",
            "DatabaseOperations.datetime_cast_time_sql",
            "DatabaseOperations.datetime_extract_sql",
            "DatabaseOperations.datetime_trunc_sql",
            "DatabaseOperations.convert_datetimefield_value"
        ],
        "django/db/models/sql/query.py": [
            "Query"
        ],
        "django/db/models/lookups.py": [
            "Transform",
            "BuiltinLookup"
        ]
    },
    "django__django-11141": {
        "django/core/management/commands/migrate.py": [
            "Command"
        ],
        "django/db/migrations/loader.py": [
            "MigrationLoader",
            "MigrationLoader.migrations_module",
            "MigrationLoader.load_disk"
        ],
        "django/db/migrations/migration.py": [
            "Migration"
        ]
    },
    "django__django-11149": {
        "django/contrib/admin/options.py": [
            "InlineModelAdmin",
            "TabularInline",
            "InlineModelAdmin.has_view_permission",
            "InlineModelAdmin.has_change_permission",
            "InlineModelAdmin.get_formset",
            "ModelAdmin.get_inline_formsets",
            "ModelAdmin._create_formsets"
        ],
        "django/contrib/admin/checks.py": [
            "InlineModelAdminChecks"
        ],
        "django/contrib/admin/forms.py": []
    },
    "django__django-11163": {
        "django/forms/models.py": [
            "model_to_dict"
        ],
        "django/core/serializers/python.py": [],
        "django/core/serializers/base.py": []
    },
    "django__django-11179": {
        "django/db/models/deletion.py": [
            "Collector",
            "Collector.delete"
        ],
        "django/db/backends/base/schema.py": [
            "BaseDatabaseSchemaEditor"
        ],
        "django/db/backends/mysql/schema.py": [
            "DatabaseSchemaEditor"
        ]
    },
    "django__django-11206": {
        "django/utils/numberformat.py": [
            "format"
        ],
        "django/utils/formats.py": [
            "number_format"
        ],
        "django/template/defaultfilters.py": []
    },
    "django__django-11211": {
        "django/contrib/contenttypes/fields.py": [
            "GenericForeignKey",
            "GenericForeignKey.get_prefetch_queryset",
            "GenericForeignKey.__get__"
        ],
        "django/db/models/query.py": [
            "QuerySet.prefetch_related",
            "prefetch_related_objects",
            "prefetch_one_level",
            "get_prefetcher"
        ],
        "django/db/models/fields/related.py": [
            "RelatedField",
            "ForeignObject"
        ]
    },
    "django__django-11239": {
        "django/core/management/commands/dbshell.py": [
            "Command"
        ],
        "django/db/backends/postgresql/client.py": [
            "DatabaseClient"
        ],
        "django/db/backends/base/client.py": [
            "BaseDatabaseClient"
        ]
    },
    "django__django-11265": {
        "django/db/models/sql/query.py": [
            "Query.split_exclude",
            "Query.build_filter",
            "Query._add_q",
            "Query.add_q",
            "Query.add_filter"
        ],
        "django/db/models/query.py": [
            "QuerySet.exclude",
            "QuerySet._filter_or_exclude"
        ],
        "django/db/models/query_utils.py": [
            "FilteredRelation"
        ]
    },
    "django__django-11276": {
        "django/utils/html.py": [
            "escape",
            "conditional_escape"
        ],
        "django/utils/safestring.py": [
            "SafeString"
        ],
        "django/template/defaultfilters.py": [
            "escape_filter",
            "force_escape"
        ]
    },
    "django__django-11292": {
        "django/core/management/base.py": [
            "DjangoHelpFormatter",
            "BaseCommand",
            "CommandParser"
        ],
        "django/core/management/__init__.py": [
            "call_command",
            "ManagementUtility"
        ],
        "django/core/management/commands/check.py": [
            "Command"
        ]
    },
    "django__django-11299": {
        "django/db/models/constraints.py": [
            "CheckConstraint",
            "CheckConstraint._get_check_sql"
        ],
        "django/db/backends/sqlite3/schema.py": [
            "DatabaseSchemaEditor.add_constraint",
            "DatabaseSchemaEditor._remake_table"
        ],
        "django/db/backends/oracle/schema.py": [
            "DatabaseSchemaEditor.add_constraint"
        ]
    },
    "django__django-11333": {
        "django/urls/resolvers.py": [
            "get_resolver",
            "URLResolver"
        ],
        "django/urls/base.py": [
            "get_urlconf",
            "set_urlconf"
        ],
        "django/core/handlers/base.py": [
            "BaseHandler.get_response"
        ]
    },
    "django__django-11400": {
        "django/contrib/admin/filters.py": [
            "RelatedFieldListFilter",
            "RelatedOnlyFieldListFilter",
            "RelatedFieldListFilter.field_choices",
            "RelatedOnlyFieldListFilter.field_choices"
        ],
        "django/contrib/admin/options.py": [
            "ModelAdmin",
            "ModelAdmin.get_ordering"
        ],
        "django/db/models/options.py": [
            "Options"
        ]
    },
    "django__django-11433": {
        "django/forms/models.py": [
            "BaseModelForm",
            "BaseModelForm._post_clean",
            "BaseModelForm.save",
            "construct_instance"
        ],
        "django/forms/forms.py": [
            "BaseForm",
            "BaseForm._post_clean",
            "BaseForm.full_clean",
            "BaseForm._clean_fields"
        ],
        "django/db/models/base.py": [
            "Model",
            "Model.__init__",
            "Model.save"
        ]
    },
    "django__django-11451": {
        "django/contrib/auth/backends.py": [
            "ModelBackend.authenticate",
            "BaseBackend",
            "RemoteUserBackend",
            "AllowAllUsersModelBackend",
            "AllowAllUsersRemoteUserBackend"
        ],
        "django/contrib/auth/__init__.py": [
            "authenticate",
            "_clean_credentials"
        ],
        "django/contrib/auth/middleware.py": []
    },
    "django__django-11477": {
        "django/urls/base.py": [
            "translate_url"
        ],
        "django/urls/resolvers.py": [
            "URLPattern",
            "URLResolver",
            "RegexPattern",
            "RoutePattern"
        ],
        "django/urls/utils.py": []
    },
    "django__django-11490": {
        "django/db/models/sql/compiler.py": [
            "SQLCompiler"
        ],
        "django/db/models/query.py": [
            "QuerySet.values",
            "QuerySet.values_list",
            "QuerySet.union",
            "QuerySet._combinator_query"
        ],
        "django/db/models/sql/query.py": [
            "Query"
        ]
    },
    "django__django-11532": {
        "django/core/mail/message.py": [
            "EmailMessage",
            "forbid_multi_line_headers",
            "sanitize_address"
        ],
        "django/core/mail/utils.py": [
            "CachedDnsName"
        ],
        "django/core/mail/backends/smtp.py": []
    },
    "django__django-11551": {
        "django/contrib/admin/checks.py": [
            "ModelAdminChecks",
            "ModelAdminChecks._check_list_display_item"
        ],
        "django/contrib/admin/options.py": [
            "ModelAdmin"
        ],
        "django/contrib/admin/utils.py": [
            "lookup_field",
            "_get_non_gfk_field"
        ]
    },
    "django__django-11555": {
        "django/db/models/sql/compiler.py": [
            "SQLCompiler.get_order_by",
            "SQLCompiler.find_ordering_name"
        ],
        "django/db/models/options.py": [
            "Options"
        ],
        "django/db/models/query.py": [
            "QuerySet.order_by"
        ]
    },
    "django__django-11603": {
        "django/db/models/aggregates.py": [
            "Aggregate",
            "Avg",
            "Sum"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLAggregateCompiler"
        ],
        "django/db/models/sql/query.py": []
    },
    "django__django-11728": {
        "django/urls/resolvers.py": [
            "RegexPattern",
            "RoutePattern",
            "URLPattern",
            "URLResolver",
            "_route_to_regex"
        ],
        "django/urls/base.py": [
            "resolve",
            "reverse"
        ],
        "django/urls/utils.py": []
    },
    "django__django-11734": {
        "django/db/models/query.py": [
            "QuerySet.exclude",
            "QuerySet._filter_or_exclude",
            "QuerySet.filter"
        ],
        "django/db/models/sql/query.py": [
            "Query.build_filter",
            "Query.add_filter",
            "Query.add_q",
            "Query._add_q",
            "Query.split_exclude",
            "Query.build_where"
        ],
        "django/db/models/sql/where.py": [
            "WhereNode",
            "SubqueryConstraint"
        ]
    },
    "django__django-11740": {
        "django/db/migrations/autodetector.py": [
            "MigrationAutodetector",
            "MigrationAutodetector._detect_changes",
            "MigrationAutodetector.generate_altered_fields",
            "MigrationAutodetector._get_dependencies_for_foreign_key"
        ],
        "django/db/migrations/operations/fields.py": [
            "AlterField",
            "AlterField.state_forwards",
            "AlterField.database_forwards"
        ],
        "django/db/models/fields/related.py": [
            "ForeignKey",
            "ForeignKey.__init__",
            "ForeignKey.deconstruct"
        ]
    },
    "django__django-11749": {
        "django/core/management/__init__.py": [
            "call_command"
        ],
        "django/core/management/base.py": [
            "CommandParser",
            "BaseCommand"
        ],
        "django/core/management/commands/shell.py": []
    },
    "django__django-11790": {
        "django/contrib/auth/forms.py": [
            "UsernameField",
            "AuthenticationForm"
        ],
        "django/forms/fields.py": [
            "CharField"
        ],
        "django/forms/widgets.py": [
            "Widget",
            "TextInput"
        ]
    },
    "django__django-11815": {
        "django/db/migrations/writer.py": [
            "MigrationWriter"
        ],
        "django/db/models/enums.py": [
            "Choices",
            "TextChoices"
        ],
        "django/db/models/fields/__init__.py": [
            "CharField"
        ]
    },
    "django__django-11820": {
        "django/db/models/fields/related.py": [
            "RelatedField",
            "ForeignObject",
            "ForeignKey",
            "OneToOneField",
            "ManyToManyField"
        ],
        "django/db/models/options.py": [
            "Options"
        ],
        "django/core/checks/model_checks.py": [
            "check_all_models",
            "check_lazy_references"
        ]
    },
    "django__django-11848": {
        "django/utils/http.py": [
            "parse_http_date"
        ],
        "django/utils/datetime_safe.py": [],
        "django/utils/dates.py": []
    },
    "django__django-11880": {
        "django/forms/fields.py": [
            "Field.__deepcopy__",
            "ChoiceField.__deepcopy__",
            "MultiValueField.__deepcopy__",
            "ModelChoiceField.__deepcopy__"
        ],
        "django/forms/forms.py": [],
        "django/forms/models.py": []
    },
    "django__django-11885": {
        "django/db/models/deletion.py": [
            "Collector",
            "Collector.can_fast_delete",
            "Collector.delete",
            "Collector.collect",
            "CASCADE"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLDeleteCompiler",
            "SQLDeleteCompiler.as_sql"
        ],
        "django/db/models/sql/query.py": [
            "Query"
        ]
    },
    "django__django-11951": {
        "django/db/models/query.py": [
            "QuerySet.bulk_create",
            "QuerySet.bulk_update",
            "QuerySet._batched_insert"
        ],
        "django/db/models/query_utils.py": [],
        "django/db/models/base.py": []
    },
    "django__django-11964": {
        "django/db/models/fields/__init__.py": [
            "CharField",
            "CharField.to_python",
            "CharField.get_prep_value"
        ],
        "django/db/models/enums.py": [
            "TextChoices",
            "IntegerChoices",
            "Choices",
            "ChoicesMeta"
        ],
        "django/db/models/base.py": [
            "Model",
            "Model.__str__"
        ]
    },
    "django__django-11999": {
        "django/db/models/base.py": [
            "Model._get_FIELD_display"
        ],
        "django/db/models/fields/__init__.py": [
            "Field"
        ],
        "django/db/models/options.py": []
    },
    "django__django-12039": {
        "django/db/backends/ddl_references.py": [
            "IndexColumns"
        ],
        "django/db/backends/base/schema.py": [
            "BaseDatabaseSchemaEditor._index_columns"
        ],
        "django/db/models/indexes.py": []
    },
    "django__django-12050": {
        "django/db/models/lookups.py": [
            "FieldGetDbPrepValueIterableMixin",
            "In",
            "Range"
        ],
        "django/db/models/query.py": [
            "QuerySet"
        ],
        "django/db/models/fields/__init__.py": [
            "Field"
        ]
    },
    "django__django-12125": {
        "django/db/migrations/serializer.py": [
            "DeconstructableSerializer"
        ],
        "django/db/migrations/writer.py": [
            "MigrationWriter"
        ],
        "django/db/migrations/autodetector.py": []
    },
    "django__django-12143": {
        "django/contrib/admin/options.py": [
            "ModelAdmin._get_edited_object_pks",
            "ModelAdmin._get_list_editable_queryset",
            "ModelAdmin.get_inline_formsets",
            "ModelAdmin._create_formsets"
        ],
        "django/utils/regex_helper.py": [
            "_lazy_re_compile"
        ],
        "django/contrib/admin/forms.py": []
    },
    "django__django-12155": {
        "django/contrib/admindocs/utils.py": [
            "trim_docstring",
            "parse_docstring",
            "parse_rst"
        ],
        "django/contrib/admindocs/views.py": [],
        "django/contrib/admindocs/__init__.py": []
    },
    "django__django-12193": {
        "django/forms/widgets.py": [
            "CheckboxInput",
            "Widget",
            "SplitArrayField"
        ],
        "django/forms/fields.py": [
            "BooleanField"
        ],
        "django/forms/forms.py": []
    },
    "django__django-12209": {
        "django/db/models/base.py": [
            "Model",
            "Model.save_base",
            "Model._save_table",
            "Model._do_insert"
        ],
        "django/db/models/fields/__init__.py": [
            "Field",
            "Field.get_pk_value_on_save",
            "UUIDField"
        ],
        "django/db/backends/base/operations.py": [
            "BaseDatabaseOperations.validate_autopk_value"
        ]
    },
    "django__django-12262": {
        "django/template/library.py": [
            "Library",
            "parse_bits",
            "TagHelperNode",
            "SimpleNode",
            "InclusionNode"
        ],
        "django/template/base.py": [
            "token_kwargs"
        ],
        "django/templatetags/__init__.py": []
    },
    "django__django-12273": {
        "django/db/models/base.py": [
            "Model",
            "Model._get_pk_val",
            "Model._set_pk_val",
            "Model.save",
            "Model.save_base",
            "Model._save_parents",
            "Model._save_table",
            "Model._do_update",
            "Model._do_insert"
        ],
        "django/db/models/fields/__init__.py": [
            "Field",
            "AutoField",
            "AutoFieldMixin",
            "AutoFieldMeta"
        ],
        "django/db/models/options.py": [
            "Options",
            "Options.setup_pk"
        ]
    },
    "django__django-12276": {
        "django/forms/widgets.py": [
            "FileInput",
            "ClearableFileInput",
            "ClearableFileInput.use_required_attribute",
            "FileInput.use_required_attribute"
        ],
        "django/forms/fields.py": [],
        "django/forms/forms.py": []
    },
    "django__django-12304": {
        "django/db/models/enums.py": [
            "ChoicesMeta",
            "Choices",
            "IntegerChoices",
            "TextChoices"
        ],
        "django/template/base.py": [
            "Variable.resolve",
            "render_value_in_context"
        ],
        "django/template/defaultfilters.py": []
    },
    "django__django-12308": {
        "django/contrib/admin/utils.py": [
            "display_for_field",
            "display_for_value"
        ],
        "django/db/models/fields/json.py": [
            "JSONField"
        ],
        "django/contrib/admin/options.py": [
            "BaseModelAdmin"
        ]
    },
    "django__django-12325": {
        "django/db/models/fields/related.py": [
            "OneToOneField",
            "ForeignObject"
        ],
        "django/db/models/base.py": [
            "ModelBase",
            "Model._save_parents"
        ],
        "django/db/models/options.py": [
            "Options",
            "Options.setup_pk",
            "Options._populate_directed_relation_graph"
        ]
    },
    "django__django-12406": {
        "django/forms/models.py": [
            "ModelChoiceField",
            "ModelForm",
            "fields_for_model"
        ],
        "django/forms/widgets.py": [
            "RadioSelect",
            "ChoiceWidget"
        ],
        "django/forms/fields.py": []
    },
    "django__django-12419": {
        "django/conf/global_settings.py": [],
        "django/core/checks/security/base.py": [
            "check_referrer_policy"
        ],
        "django/middleware/security.py": [
            "SecurityMiddleware"
        ]
    },
    "django__django-12663": {
        "django/db/models/sql/query.py": [
            "Query.build_lookup",
            "Query.build_filter",
            "Query._add_q"
        ],
        "django/db/models/fields/__init__.py": [
            "Field.get_prep_value",
            "IntegerField.get_prep_value"
        ],
        "django/db/models/lookups.py": [
            "Lookup",
            "FieldGetDbPrepValueMixin"
        ]
    },
    "django__django-12708": {
        "django/db/backends/base/schema.py": [
            "BaseDatabaseSchemaEditor",
            "BaseDatabaseSchemaEditor._delete_composed_index",
            "BaseDatabaseSchemaEditor._constraint_names",
            "BaseDatabaseSchemaEditor.alter_index_together",
            "BaseDatabaseSchemaEditor.alter_unique_together"
        ],
        "django/db/migrations/operations/models.py": [
            "AlterIndexTogether",
            "AlterUniqueTogether",
            "AlterTogetherOptionOperation"
        ],
        "django/db/models/options.py": [
            "normalize_together"
        ]
    },
    "django__django-12713": {
        "django/contrib/admin/options.py": [
            "BaseModelAdmin.formfield_for_manytomany",
            "BaseModelAdmin.formfield_for_dbfield"
        ],
        "django/forms/models.py": [
            "fields_for_model",
            "ModelMultipleChoiceField"
        ],
        "django/contrib/admin/widgets.py": [
            "FilteredSelectMultiple",
            "ManyToManyRawIdWidget"
        ]
    },
    "django__django-12741": {
        "django/db/backends/base/operations.py": [
            "BaseDatabaseOperations.execute_sql_flush",
            "BaseDatabaseOperations.sql_flush"
        ],
        "django/db/backends/oracle/operations.py": [
            "DatabaseOperations.sql_flush"
        ],
        "django/db/backends/mysql/operations.py": [
            "DatabaseOperations.sql_flush"
        ]
    },
    "django__django-12754": {
        "django/db/migrations/autodetector.py": [
            "MigrationAutodetector",
            "MigrationAutodetector._detect_changes",
            "MigrationAutodetector.generate_created_models",
            "MigrationAutodetector.generate_removed_fields",
            "MigrationAutodetector._sort_migrations",
            "MigrationAutodetector.arrange_for_graph"
        ],
        "django/db/migrations/operations/fields.py": [
            "RemoveField",
            "AddField"
        ],
        "django/db/migrations/operations/models.py": [
            "CreateModel"
        ]
    },
    "django__django-12774": {
        "django/db/models/query.py": [
            "QuerySet.in_bulk"
        ],
        "django/db/models/constraints.py": [
            "UniqueConstraint"
        ],
        "django/db/models/base.py": [
            "Model._get_unique_checks"
        ]
    },
    "django__django-12858": {
        "django/core/checks/model_checks.py": [
            "check_all_models"
        ],
        "django/db/models/options.py": [
            "Options"
        ],
        "django/db/models/lookups.py": [
            "Lookup",
            "Transform",
            "IsNull"
        ]
    },
    "django__django-12965": {
        "django/db/models/query.py": [
            "QuerySet.delete",
            "QuerySet._raw_delete"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLDeleteCompiler"
        ],
        "django/db/models/deletion.py": []
    },
    "django__django-13012": {
        "django/db/models/expressions.py": [
            "ExpressionWrapper",
            "Value",
            "Value.get_group_by_cols"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLCompiler.get_group_by",
            "SQLCompiler.collapse_group_by"
        ],
        "django/db/models/sql/query.py": [
            "Query.set_group_by"
        ]
    },
    "django__django-13023": {
        "django/db/models/fields/__init__.py": [
            "DecimalField"
        ],
        "django/forms/fields.py": [
            "DecimalField"
        ],
        "django/core/validators.py": [
            "DecimalValidator"
        ]
    },
    "django__django-13028": {
        "django/db/models/sql/query.py": [
            "Query.check_filterable",
            "Query.build_filter",
            "Query._add_q"
        ],
        "django/db/models/query.py": [
            "QuerySet._filter_or_exclude",
            "QuerySet.filter"
        ],
        "django/db/models/lookups.py": [
            "Lookup"
        ]
    },
    "django__django-13033": {
        "django/db/models/query.py": [
            "QuerySet",
            "QuerySet.order_by"
        ],
        "django/db/models/sql/query.py": [
            "Query",
            "Query.add_ordering",
            "Query.build_filter",
            "Query.setup_joins",
            "get_order_dir"
        ],
        "django/db/models/lookups.py": [
            "Lookup"
        ]
    },
    "django__django-13089": {
        "django/core/cache/backends/db.py": [
            "DatabaseCache._cull",
            "DatabaseCache._base_set",
            "DatabaseCache.set"
        ],
        "django/middleware/cache.py": [
            "UpdateCacheMiddleware.process_response"
        ],
        "django/core/cache/backends/base.py": []
    },
    "django__django-13109": {
        "django/db/models/fields/related.py": [
            "ForeignKey.validate"
        ],
        "django/forms/models.py": [
            "ModelChoiceField"
        ],
        "django/db/models/base.py": []
    },
    "django__django-13112": {
        "django/db/migrations/loader.py": [
            "MigrationLoader",
            "migrations_module",
            "load_disk"
        ],
        "django/core/management/commands/makemigrations.py": [
            "handle",
            "write_migration_files"
        ],
        "django/db/migrations/migration.py": [
            "Migration",
            "swappable_dependency"
        ]
    },
    "django__django-13121": {
        "django/db/backends/sqlite3/operations.py": [
            "DatabaseOperations.convert_durationfield_value",
            "DatabaseOperations.format_for_duration_arithmetic",
            "DatabaseOperations.combine_duration_expression"
        ],
        "django/db/backends/mysql/operations.py": [
            "DatabaseOperations.convert_durationfield_value",
            "DatabaseOperations.format_for_duration_arithmetic",
            "DatabaseOperations.combine_duration_expression"
        ],
        "django/db/backends/base/operations.py": [
            "BaseDatabaseOperations.convert_durationfield_value",
            "BaseDatabaseOperations.format_for_duration_arithmetic",
            "BaseDatabaseOperations.combine_duration_expression"
        ]
    },
    "django__django-13128": {
        "django/db/models/expressions.py": [
            "TemporalSubtraction",
            "CombinedExpression",
            "DurationExpression",
            "F",
            "Value"
        ],
        "django/db/models/fields/__init__.py": [
            "DateTimeField",
            "DurationField"
        ],
        "django/db/models/functions/datetime.py": []
    },
    "django__django-13158": {
        "django/db/models/query.py": [
            "QuerySet",
            "QuerySet.none",
            "QuerySet.union",
            "QuerySet._chain",
            "QuerySet._clone"
        ],
        "django/forms/models.py": [
            "ModelMultipleChoiceField",
            "ModelMultipleChoiceField.clean",
            "ModelMultipleChoiceField._check_values"
        ],
        "django/db/models/sql/query.py": []
    },
    "django__django-13195": {
        "django/http/response.py": [
            "HttpResponseBase.delete_cookie",
            "HttpResponseBase.set_cookie"
        ],
        "django/contrib/messages/storage/cookie.py": [
            "CookieStorage"
        ],
        "django/http/cookie.py": []
    },
    "django__django-13212": {
        "django/core/validators.py": [
            "RegexValidator",
            "URLValidator",
            "EmailValidator",
            "BaseValidator",
            "MaxValueValidator",
            "MinValueValidator",
            "MinLengthValidator",
            "MaxLengthValidator",
            "DecimalValidator",
            "FileExtensionValidator",
            "ProhibitNullCharactersValidator"
        ],
        "django/core/exceptions.py": [
            "ValidationError"
        ],
        "django/forms/fields.py": [
            "Field"
        ]
    },
    "django__django-13279": {
        "django/contrib/sessions/backends/base.py": [
            "SessionBase",
            "SessionBase.encode",
            "SessionBase.decode",
            "SessionBase._legacy_decode"
        ],
        "django/contrib/sessions/serializers.py": [
            "PickleSerializer"
        ],
        "django/contrib/sessions/middleware.py": [
            "SessionMiddleware"
        ]
    },
    "django__django-13297": {
        "django/views/generic/base.py": [
            "ContextMixin",
            "TemplateView"
        ],
        "django/urls/resolvers.py": [
            "ResolverMatch",
            "get_resolver",
            "URLResolver"
        ],
        "django/core/handlers/base.py": [
            "BaseHandler"
        ]
    },
    "django__django-13315": {
        "django/db/models/fields/related.py": [
            "ForeignKey",
            "ForeignKey.formfield"
        ],
        "django/forms/models.py": [
            "ModelChoiceField",
            "ModelChoiceField.get_limit_choices_to",
            "ModelChoiceField._get_choices",
            "apply_limit_choices_to_to_formfield"
        ],
        "django/forms/fields.py": []
    },
    "django__django-13343": {
        "django/db/models/fields/files.py": [
            "FileField",
            "FileField.deconstruct"
        ],
        "django/db/migrations/serializer.py": [
            "DeconstructableSerializer",
            "ModelFieldSerializer"
        ],
        "django/utils/deconstruct.py": [
            "deconstructible"
        ]
    },
    "django__django-13344": {
        "django/core/handlers/asgi.py": [
            "ASGIHandler",
            "ASGIHandler.send_response",
            "ASGIHandler.__call__"
        ],
        "django/core/handlers/base.py": [
            "BaseHandler",
            "BaseHandler._get_response_async",
            "BaseHandler.get_response_async"
        ],
        "django/middleware/common.py": [
            "CommonMiddleware",
            "BrokenLinkEmailsMiddleware"
        ]
    },
    "django__django-13346": {
        "django/db/models/fields/json.py": [
            "KeyTransform",
            "KeyTransformExact",
            "KeyTransformFactory",
            "JSONField"
        ],
        "django/db/backends/mysql/operations.py": [
            "DatabaseOperations.lookup_cast"
        ],
        "django/db/backends/oracle/operations.py": [
            "DatabaseOperations.lookup_cast"
        ]
    },
    "django__django-13363": {
        "django/db/models/functions/datetime.py": [
            "TimezoneMixin",
            "TruncBase",
            "TruncDate",
            "TruncTime"
        ],
        "django/db/models/functions/mixins.py": [],
        "django/db/models/functions/__init__.py": []
    },
    "django__django-13401": {
        "django/db/models/fields/__init__.py": [
            "Field",
            "Field.__eq__",
            "Field.__lt__",
            "Field.__hash__"
        ],
        "django/db/models/fields/related.py": [
            "RelatedField"
        ],
        "django/db/models/fields/mixins.py": []
    },
    "django__django-13406": {
        "django/db/models/query.py": [
            "QuerySet",
            "QuerySet.__getstate__",
            "QuerySet.__setstate__",
            "QuerySet.values",
            "QuerySet.values_list",
            "QuerySet._values",
            "ValuesIterable",
            "ValuesListIterable"
        ],
        "django/db/models/sql/query.py": [
            "Query",
            "Query.__deepcopy__",
            "Query.clone",
            "Query.set_values"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLCompiler",
            "SQLCompiler.results_iter",
            "SQLCompiler.execute_sql"
        ]
    },
    "django__django-13410": {
        "django/core/files/locks.py": [
            "_fd",
            "lock",
            "unlock"
        ],
        "django/core/checks/security/__init__.py": [],
        "django/core/checks/compatibility/__init__.py": []
    },
    "django__django-13417": {
        "django/db/models/query.py": [
            "QuerySet",
            "QuerySet.annotate",
            "QuerySet.ordered"
        ],
        "django/db/models/sql/query.py": [
            "Query",
            "Query.add_annotation",
            "Query.set_group_by"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLCompiler",
            "SQLCompiler.get_group_by",
            "SQLCompiler.get_order_by"
        ]
    },
    "django__django-13449": {
        "django/db/backends/sqlite3/base.py": [
            "DatabaseWrapper",
            "SQLiteCursorWrapper"
        ],
        "django/db/models/functions/window.py": [
            "LagLeadFunction",
            "Lag"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLCompiler"
        ]
    },
    "django__django-13512": {
        "django/db/models/fields/json.py": [
            "JSONField",
            "JSONField.formfield"
        ],
        "django/contrib/admin/widgets.py": [
            "AdminTextareaWidget"
        ],
        "django/forms/widgets.py": [
            "Textarea"
        ]
    },
    "django__django-13513": {
        "django/views/debug.py": [
            "ExceptionReporter",
            "ExceptionReporter.get_traceback_frames",
            "explicit_or_implicit_cause"
        ],
        "django/core/handlers/exception.py": [],
        "django/core/exceptions.py": []
    },
    "django__django-13516": {
        "django/core/management/base.py": [
            "OutputWrapper",
            "BaseCommand"
        ],
        "django/core/management/commands/migrate.py": [
            "Command.migration_progress_callback"
        ],
        "django/db/migrations/executor.py": [
            "MigrationExecutor"
        ]
    },
    "django__django-13551": {
        "django/contrib/auth/tokens.py": [
            "PasswordResetTokenGenerator"
        ],
        "django/contrib/auth/models.py": [
            "AbstractUser",
            "User"
        ],
        "django/contrib/auth/base_user.py": [
            "AbstractBaseUser"
        ]
    },
    "django__django-13568": {
        "django/contrib/auth/checks.py": [
            "check_user_model"
        ],
        "django/contrib/auth/base_user.py": [
            "AbstractBaseUser"
        ],
        "django/contrib/auth/models.py": [
            "AbstractUser",
            "User"
        ]
    },
    "django__django-13569": {
        "django/db/models/sql/compiler.py": [
            "SQLCompiler",
            "SQLCompiler.get_group_by"
        ],
        "django/db/models/query.py": [
            "QuerySet.order_by",
            "QuerySet.annotate"
        ],
        "django/db/models/aggregates.py": [
            "Count"
        ]
    },
    "django__django-13590": {
        "django/db/models/sql/query.py": [
            "Query.resolve_lookup_value"
        ],
        "django/db/models/lookups.py": [
            "Range"
        ],
        "django/db/models/query.py": []
    },
    "django__django-13658": {
        "django/core/management/__init__.py": [
            "ManagementUtility"
        ],
        "django/core/management/base.py": [
            "CommandParser"
        ],
        "django/core/management/commands/__init__.py": []
    },
    "django__django-13670": {
        "django/utils/dateformat.py": [
            "DateFormat",
            "DateFormat.y"
        ],
        "django/utils/datetime_safe.py": [
            "datetime",
            "strftime"
        ],
        "django/utils/dates.py": []
    },
    "django__django-13741": {
        "django/contrib/auth/forms.py": [
            "ReadOnlyPasswordHashField",
            "UserChangeForm"
        ],
        "django/forms/fields.py": [
            "Field"
        ],
        "django/contrib/auth/hashers.py": []
    },
    "django__django-13786": {
        "django/db/migrations/operations/models.py": [
            "CreateModel",
            "AlterModelOptions",
            "CreateModel.reduce",
            "CreateModel.state_forwards",
            "AlterModelOptions.state_forwards"
        ],
        "django/db/migrations/optimizer.py": [
            "MigrationOptimizer",
            "MigrationOptimizer.optimize",
            "MigrationOptimizer.optimize_inner"
        ],
        "django/core/management/commands/squashmigrations.py": []
    },
    "django__django-13794": {
        "django/template/defaultfilters.py": [
            "add"
        ],
        "django/utils/functional.py": [
            "LazyObject",
            "SimpleLazyObject",
            "lazy",
            "lazystr",
            "keep_lazy",
            "keep_lazy_text",
            "new_method_proxy"
        ],
        "django/template/base.py": [
            "FilterExpression",
            "Variable"
        ]
    },
    "django__django-13807": {
        "django/db/backends/sqlite3/base.py": [
            "DatabaseWrapper",
            "check_constraints"
        ],
        "django/db/backends/base/base.py": [
            "BaseDatabaseWrapper"
        ],
        "django/core/management/commands/loaddata.py": [
            "Command"
        ]
    },
    "django__django-13809": {
        "django/core/management/commands/runserver.py": [
            "Command"
        ],
        "django/core/management/base.py": [
            "BaseCommand",
            "DjangoHelpFormatter"
        ],
        "django/core/checks/registry.py": [
            "CheckRegistry",
            "run_checks"
        ]
    },
    "django__django-13810": {
        "django/core/handlers/base.py": [
            "BaseHandler",
            "BaseHandler.load_middleware",
            "BaseHandler.adapt_method_mode",
            "BaseHandler._get_response_async"
        ],
        "django/core/handlers/asgi.py": [
            "ASGIHandler",
            "ASGIHandler.__call__"
        ],
        "django/core/asgi.py": []
    },
    "django__django-13820": {
        "django/db/migrations/loader.py": [
            "MigrationLoader",
            "MigrationLoader.load_disk"
        ],
        "django/db/migrations/__init__.py": [],
        "django/db/migrations/exceptions.py": []
    },
    "django__django-13821": {
        "django/db/backends/sqlite3/base.py": [
            "check_sqlite_version",
            "DatabaseWrapper"
        ],
        "django/db/backends/sqlite3/features.py": [
            "DatabaseFeatures"
        ],
        "django/db/backends/sqlite3/operations.py": [
            "DatabaseOperations"
        ]
    },
    "django__django-13837": {
        "django/utils/autoreload.py": [
            "get_child_arguments",
            "run_with_reloader",
            "start_django",
            "BaseReloader"
        ],
        "django/core/management/commands/runserver.py": [
            "Command"
        ],
        "django/__main__.py": []
    },
    "django__django-13925": {
        "django/conf/global_settings.py": [],
        "django/db/models/base.py": [
            "Model",
            "ModelBase"
        ],
        "django/db/models/options.py": [
            "Options"
        ]
    },
    "django__django-13933": {
        "django/forms/models.py": [
            "ModelChoiceField",
            "ModelMultipleChoiceField"
        ],
        "django/forms/fields.py": [
            "ChoiceField"
        ],
        "django/forms/widgets.py": []
    },
    "django__django-13964": {
        "django/db/models/fields/related.py": [
            "ForeignKey",
            "ForeignObject",
            "RelatedField"
        ],
        "django/db/models/fields/__init__.py": [
            "Field",
            "CharField"
        ],
        "django/db/models/base.py": [
            "Model"
        ]
    },
    "django__django-14007": {
        "django/db/models/fields/__init__.py": [
            "Field",
            "AutoFieldMixin",
            "BigAutoField"
        ],
        "django/db/models/base.py": [
            "Model._do_insert"
        ],
        "django/db/models/query.py": [
            "QuerySet._insert",
            "QuerySet.bulk_create"
        ]
    },
    "django__django-14011": {
        "django/core/servers/basehttp.py": [
            "WSGIServer",
            "ThreadedWSGIServer",
            "WSGIRequestHandler"
        ],
        "django/db/backends/base/base.py": [
            "BaseDatabaseWrapper"
        ],
        "django/core/handlers/wsgi.py": [
            "WSGIHandler",
            "WSGIRequest"
        ]
    },
    "django__django-14017": {
        "django/db/models/query_utils.py": [
            "Q"
        ],
        "django/db/models/expressions.py": [
            "Exists"
        ],
        "django/db/models/sql/query.py": []
    },
    "django__django-14034": {
        "django/forms/fields.py": [
            "MultiValueField",
            "MultiValueField.validate",
            "MultiValueField.clean"
        ],
        "django/forms/forms.py": [
            "BaseForm.is_valid",
            "BaseForm._clean_fields",
            "BaseForm.full_clean"
        ],
        "django/forms/widgets.py": [
            "MultiWidget",
            "MultiWidget.value_from_datadict"
        ]
    },
    "django__django-14053": {
        "django/contrib/staticfiles/storage.py": [
            "HashedFilesMixin",
            "HashedFilesMixin.post_process",
            "HashedFilesMixin._post_process"
        ],
        "django/contrib/staticfiles/management/commands/collectstatic.py": [
            "Command.collect"
        ],
        "django/contrib/staticfiles/__init__.py": []
    },
    "django__django-14089": {
        "django/utils/datastructures.py": [
            "OrderedSet"
        ],
        "django/urls/base.py": [],
        "django/utils/topological_sort.py": []
    },
    "django__django-14122": {
        "django/db/models/sql/compiler.py": [
            "SQLCompiler",
            "SQLCompiler.get_group_by",
            "SQLCompiler.get_order_by"
        ],
        "django/db/models/sql/query.py": [
            "Query",
            "Query.add_ordering",
            "Query.clear_ordering",
            "Query.set_group_by"
        ],
        "django/db/models/query.py": [
            "QuerySet.order_by"
        ]
    },
    "django__django-14140": {
        "django/db/models/query_utils.py": [
            "Q"
        ],
        "django/db/models/sql/where.py": [
            "WhereNode"
        ],
        "django/db/models/query.py": []
    },
    "django__django-14155": {
        "django/urls/resolvers.py": [
            "ResolverMatch",
            "_path"
        ],
        "django/urls/conf.py": [
            "path",
            "re_path"
        ],
        "django/urls/base.py": []
    },
    "django__django-14170": {
        "django/db/models/lookups.py": [
            "YearLookup",
            "YearExact"
        ],
        "django/db/models/functions/datetime.py": [
            "ExtractIsoYear"
        ],
        "django/db/models/sql/query.py": [
            "Query.build_lookup",
            "Query.try_transform"
        ]
    },
    "django__django-14238": {
        "django/db/models/fields/__init__.py": [
            "AutoFieldMeta",
            "AutoField",
            "BigAutoField",
            "SmallAutoField"
        ],
        "django/db/models/options.py": [
            "Options._get_default_pk_class"
        ],
        "django/db/models/base.py": []
    },
    "django__django-14311": {
        "django/utils/autoreload.py": [
            "get_child_arguments",
            "run_with_reloader",
            "BaseReloader",
            "StatReloader",
            "WatchmanReloader"
        ],
        "django/core/management/commands/runserver.py": [
            "Command"
        ],
        "django/__main__.py": []
    },
    "django__django-14315": {
        "django/db/backends/postgresql/client.py": [
            "DatabaseClient.settings_to_cmd_args_env",
            "DatabaseClient.runshell"
        ],
        "django/db/backends/base/client.py": [
            "BaseDatabaseClient.settings_to_cmd_args_env",
            "BaseDatabaseClient.runshell"
        ],
        "django/db/backends/mysql/client.py": [
            "DatabaseClient.settings_to_cmd_args_env"
        ]
    },
    "django__django-14349": {
        "django/core/validators.py": [
            "URLValidator"
        ],
        "django/views/csrf.py": [
            "csrf_failure"
        ],
        "django/core/checks/urls.py": [
            "check_url_config",
            "check_resolver",
            "check_url_namespaces_unique",
            "_load_all_namespaces",
            "get_warning_for_invalid_pattern",
            "check_url_settings",
            "E006"
        ]
    },
    "django__django-14351": {
        "django/db/models/sql/query.py": [
            "Query",
            "get_default_columns",
            "_gen_cols",
            "_gen_col_aliases"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLCompiler",
            "get_select",
            "get_default_columns",
            "get_related_selections"
        ],
        "django/db/models/query.py": [
            "QuerySet",
            "filter",
            "_filter_or_exclude",
            "_filter_or_exclude_inplace"
        ]
    },
    "django__django-14373": {
        "django/utils/dateformat.py": [
            "DateFormat",
            "DateFormat.Y"
        ],
        "django/utils/datetime_safe.py": [
            "date",
            "datetime",
            "strftime"
        ],
        "django/utils/dates.py": []
    },
    "django__django-14376": {
        "django/db/backends/mysql/base.py": [
            "DatabaseWrapper",
            "DatabaseWrapper.get_connection_params",
            "DatabaseWrapper.get_new_connection"
        ],
        "django/db/backends/mysql/features.py": [],
        "django/db/backends/mysql/operations.py": []
    },
    "django__django-14404": {
        "django/views/static.py": [
            "serve",
            "directory_index"
        ],
        "django/conf/urls/static.py": [
            "static"
        ],
        "django/core/handlers/base.py": [
            "BaseHandler"
        ]
    },
    "django__django-14434": {
        "django/db/backends/base/schema.py": [
            "BaseDatabaseSchemaEditor._create_unique_sql",
            "BaseDatabaseSchemaEditor._unique_sql"
        ],
        "django/db/models/sql/query.py": [
            "Query"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLCompiler"
        ]
    },
    "django__django-14493": {
        "django/contrib/staticfiles/storage.py": [
            "HashedFilesMixin",
            "ManifestFilesMixin",
            "ManifestStaticFilesStorage",
            "HashedFilesMixin.post_process",
            "HashedFilesMixin._post_process"
        ],
        "django/contrib/staticfiles/management/commands/collectstatic.py": [
            "Command.collect",
            "Command.handle"
        ],
        "django/contrib/staticfiles/management/__init__.py": []
    },
    "django__django-14500": {
        "django/db/migrations/executor.py": [
            "MigrationExecutor",
            "MigrationExecutor.unapply_migration",
            "MigrationExecutor.check_replacements"
        ],
        "django/db/migrations/loader.py": [
            "MigrationLoader"
        ],
        "django/db/migrations/recorder.py": [
            "MigrationRecorder",
            "MigrationRecorder.record_unapplied"
        ]
    },
    "django__django-14534": {
        "django/forms/widgets.py": [
            "ChoiceWidget",
            "CheckboxSelectMultiple"
        ],
        "django/forms/boundfield.py": [
            "BoundField",
            "BoundWidget",
            "BoundWidget.id_for_label"
        ],
        "django/forms/forms.py": []
    },
    "django__django-14539": {
        "django/utils/html.py": [
            "urlize",
            "smart_urlquote"
        ],
        "django/template/defaultfilters.py": [
            "urlize",
            "urlizetrunc"
        ],
        "django/utils/text.py": [
            "smart_split"
        ]
    },
    "django__django-14559": {
        "django/db/models/query.py": [
            "QuerySet.bulk_update",
            "QuerySet.update"
        ],
        "django/db/models/base.py": [],
        "django/db/models/manager.py": []
    },
    "django__django-14580": {
        "django/db/migrations/writer.py": [
            "MigrationWriter"
        ],
        "django/db/migrations/autodetector.py": [
            "MigrationAutodetector"
        ],
        "django/db/migrations/state.py": [
            "ModelState",
            "ProjectState"
        ]
    },
    "django__django-14608": {
        "django/forms/formsets.py": [
            "BaseFormSet",
            "BaseFormSet.non_form_errors"
        ],
        "django/forms/utils.py": [
            "ErrorList"
        ],
        "django/forms/__init__.py": []
    },
    "django__django-14631": {
        "django/forms/forms.py": [
            "BaseForm._clean_fields",
            "BaseForm.changed_data",
            "BaseForm._bound_items"
        ],
        "django/forms/boundfield.py": [
            "BoundField"
        ],
        "django/forms/__init__.py": []
    },
    "django__django-14672": {
        "django/db/models/fields/reverse_related.py": [
            "ManyToManyRel",
            "ManyToManyRel.identity",
            "ManyToManyRel.__hash__"
        ],
        "django/utils/hashable.py": [
            "make_hashable"
        ],
        "django/db/models/fields/related.py": []
    },
    "django__django-14725": {
        "django/forms/models.py": [
            "BaseModelFormSet",
            "modelformset_factory",
            "BaseModelFormSet.save_new",
            "BaseModelFormSet.save_new_objects",
            "BaseModelFormSet._construct_form"
        ],
        "django/forms/formsets.py": [
            "BaseFormSet",
            "formset_factory"
        ],
        "django/forms/forms.py": []
    },
    "django__django-14752": {
        "django/contrib/admin/views/autocomplete.py": [
            "AutocompleteJsonView"
        ],
        "django/contrib/admin/options.py": [
            "ModelAdmin",
            "ModelAdmin.get_urls"
        ],
        "django/contrib/admin/widgets.py": [
            "AutocompleteMixin",
            "AutocompleteSelect",
            "AutocompleteSelectMultiple"
        ]
    },
    "django__django-14765": {
        "django/db/migrations/state.py": [
            "ProjectState",
            "StateApps"
        ],
        "django/db/migrations/executor.py": [
            "MigrationExecutor._create_project_state"
        ],
        "django/db/migrations/autodetector.py": []
    },
    "django__django-14771": {
        "django/utils/autoreload.py": [
            "get_child_arguments",
            "restart_with_reloader",
            "run_with_reloader",
            "BaseReloader"
        ],
        "django/core/management/commands/runserver.py": [
            "Command.execute",
            "Command.run",
            "Command.inner_run"
        ],
        "django/core/servers/basehttp.py": []
    },
    "django__django-14787": {
        "django/utils/decorators.py": [
            "_update_method_wrapper",
            "method_decorator"
        ],
        "django/views/decorators/__init__.py": [],
        "django/views/decorators/common.py": []
    },
    "django__django-14792": {
        "django/utils/timezone.py": [
            "_get_timezone_name"
        ],
        "django/db/backends/postgresql/operations.py": [
            "_prepare_tzname_delta",
            "date_trunc_sql",
            "datetime_trunc_sql"
        ],
        "django/db/backends/base/operations.py": []
    },
    "django__django-14855": {
        "django/contrib/admin/helpers.py": [
            "AdminReadonlyField"
        ],
        "django/contrib/admin/options.py": [
            "ModelAdmin"
        ],
        "django/contrib/admin/sites.py": [
            "AdminSite"
        ]
    },
    "django__django-14915": {
        "django/forms/models.py": [
            "ModelChoiceIteratorValue",
            "ModelChoiceIterator",
            "ModelChoiceField",
            "ModelMultipleChoiceField"
        ],
        "django/forms/fields.py": [
            "ChoiceField",
            "MultipleChoiceField"
        ],
        "django/forms/widgets.py": [
            "Select",
            "SelectMultiple",
            "ChoiceWidget"
        ]
    },
    "django__django-14999": {
        "django/db/migrations/operations/models.py": [
            "RenameModel",
            "AlterModelTable"
        ],
        "django/db/backends/sqlite3/schema.py": [
            "DatabaseSchemaEditor.alter_db_table"
        ],
        "django/db/backends/postgresql/schema.py": [
            "DatabaseSchemaEditor.alter_db_table"
        ]
    },
    "django__django-15022": {
        "django/contrib/admin/views/main.py": [
            "ChangeList",
            "ChangeList.get_search_results",
            "ChangeList.get_queryset"
        ],
        "django/contrib/admin/options.py": [
            "ModelAdmin",
            "ModelAdmin.get_search_results",
            "ModelAdmin.get_queryset"
        ],
        "django/contrib/admin/filters.py": [
            "FieldListFilter",
            "RelatedFieldListFilter"
        ]
    },
    "django__django-15037": {
        "django/core/management/commands/inspectdb.py": [
            "Command"
        ],
        "django/db/backends/base/introspection.py": [
            "BaseDatabaseIntrospection",
            "BaseDatabaseIntrospection.get_relations",
            "BaseDatabaseIntrospection.get_key_columns",
            "BaseDatabaseIntrospection.get_constraints"
        ],
        "django/db/backends/postgresql/introspection.py": [
            "DatabaseIntrospection",
            "DatabaseIntrospection.get_relations",
            "DatabaseIntrospection.get_key_columns",
            "DatabaseIntrospection.get_constraints"
        ]
    },
    "django__django-15098": {
        "django/utils/translation/trans_real.py": [
            "get_supported_language_variant",
            "get_language_from_path",
            "parse_accept_lang_header"
        ],
        "django/middleware/locale.py": [
            "LocaleMiddleware"
        ],
        "django/conf/urls/i18n.py": [
            "i18n_patterns"
        ]
    },
    "django__django-15103": {
        "django/utils/html.py": [
            "json_script"
        ],
        "django/template/defaultfilters.py": [
            "json_script"
        ],
        "django/utils/safestring.py": []
    },
    "django__django-15104": {
        "django/db/migrations/autodetector.py": [
            "MigrationAutodetector",
            "MigrationAutodetector.only_relation_agnostic_fields",
            "MigrationAutodetector.generate_renamed_models"
        ],
        "django/db/models/fields/related.py": [
            "ForeignKey",
            "ForeignKey.deconstruct"
        ],
        "django/db/migrations/state.py": [
            "ModelState",
            "ModelState.from_model"
        ]
    },
    "django__django-15127": {
        "django/contrib/messages/storage/base.py": [
            "Message",
            "BaseStorage"
        ],
        "django/contrib/messages/constants.py": [],
        "django/contrib/messages/api.py": [
            "add_message",
            "get_messages",
            "get_level",
            "set_level"
        ]
    },
    "django__django-15128": {
        "django/db/models/sql/query.py": [
            "Query.change_aliases",
            "Query.combine",
            "Query.table_alias",
            "Query.join"
        ],
        "django/db/models/query.py": [
            "QuerySet.__or__"
        ],
        "django/db/models/sql/compiler.py": []
    },
    "django__django-15161": {
        "django/db/models/expressions.py": [
            "F",
            "Value",
            "RawSQL",
            "Func",
            "ExpressionWrapper",
            "When",
            "Case",
            "Exists",
            "OrderBy",
            "Window",
            "WindowFrame",
            "RowRange",
            "ValueRange"
        ],
        "django/db/models/aggregates.py": [
            "Aggregate",
            "Avg",
            "Count",
            "Max",
            "Min",
            "StdDev",
            "Sum",
            "Variance"
        ],
        "django/db/models/__init__.py": []
    },
    "django__django-15252": {
        "django/db/migrations/recorder.py": [
            "MigrationRecorder"
        ],
        "django/db/migrations/executor.py": [
            "MigrationExecutor.apply_migration",
            "MigrationExecutor.record_migration"
        ],
        "django/db/backends/base/schema.py": [
            "BaseDatabaseSchemaEditor"
        ]
    },
    "django__django-15268": {
        "django/db/migrations/optimizer.py": [
            "MigrationOptimizer"
        ],
        "django/db/migrations/operations/models.py": [
            "AlterTogetherOptionOperation",
            "AlterUniqueTogether",
            "AlterIndexTogether"
        ],
        "django/db/migrations/operations/base.py": [
            "Operation"
        ]
    },
    "django__django-15277": {
        "django/db/models/fields/__init__.py": [
            "CharField"
        ],
        "django/db/models/expressions.py": [
            "Value",
            "Value._resolve_output_field"
        ],
        "django/core/validators.py": [
            "MaxLengthValidator"
        ]
    },
    "django__django-15278": {
        "django/db/backends/sqlite3/schema.py": [
            "DatabaseSchemaEditor"
        ],
        "django/db/backends/sqlite3/base.py": [
            "DatabaseWrapper",
            "SQLiteCursorWrapper"
        ],
        "django/db/backends/sqlite3/operations.py": [
            "DatabaseOperations"
        ]
    },
    "django__django-15280": {
        "django/db/models/query.py": [
            "Prefetch",
            "prefetch_related_objects",
            "prefetch_one_level",
            "QuerySet.prefetch_related",
            "QuerySet.only"
        ],
        "django/db/models/fields/related_descriptors.py": [
            "ForwardManyToOneDescriptor",
            "ForwardOneToOneDescriptor",
            "ReverseOneToOneDescriptor"
        ],
        "django/db/models/fields/related.py": [
            "ForeignKey",
            "OneToOneField"
        ]
    },
    "django__django-15315": {
        "django/db/models/fields/__init__.py": [
            "Field",
            "Field.__hash__",
            "Field.__eq__",
            "Field.contribute_to_class"
        ],
        "django/db/models/fields/related.py": [],
        "django/db/models/fields/proxy.py": []
    },
    "django__django-15368": {
        "django/db/models/query.py": [
            "QuerySet.bulk_update"
        ],
        "django/db/models/expressions.py": [
            "F"
        ],
        "django/db/models/sql/compiler.py": []
    },
    "django__django-15375": {
        "django/db/models/aggregates.py": [
            "Aggregate",
            "Sum"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLAggregateCompiler"
        ],
        "django/db/models/sql/query.py": [
            "Query.get_aggregation",
            "Query.add_annotation"
        ]
    },
    "django__django-15380": {
        "django/db/migrations/autodetector.py": [
            "MigrationAutodetector",
            "MigrationAutodetector.generate_renamed_fields",
            "MigrationAutodetector.generate_renamed_models",
            "MigrationAutodetector._detect_changes"
        ],
        "django/db/migrations/questioner.py": [
            "MigrationQuestioner",
            "InteractiveMigrationQuestioner",
            "NonInteractiveMigrationQuestioner"
        ],
        "django/core/management/commands/makemigrations.py": [
            "Command"
        ]
    },
    "django__django-15382": {
        "django/db/models/sql/where.py": [
            "WhereNode",
            "NothingNode",
            "ExtraWhere",
            "SubqueryConstraint"
        ],
        "django/db/models/query.py": [
            "QuerySet",
            "QuerySet.filter",
            "QuerySet._filter_or_exclude",
            "QuerySet._filter_or_exclude_inplace",
            "QuerySet.exists",
            "EmptyQuerySet"
        ],
        "django/db/models/sql/subqueries.py": [
            "AggregateQuery"
        ]
    },
    "django__django-15467": {
        "django/contrib/admin/options.py": [
            "BaseModelAdmin",
            "BaseModelAdmin.formfield_for_foreignkey"
        ],
        "django/contrib/admin/helpers.py": [],
        "django/contrib/admin/utils.py": []
    },
    "django__django-15499": {
        "django/db/migrations/operations/models.py": [
            "CreateModel",
            "AlterModelManagers",
            "ModelOperation.reduce"
        ],
        "django/db/migrations/optimizer.py": [
            "MigrationOptimizer"
        ],
        "django/db/migrations/autodetector.py": [
            "MigrationAutodetector.generate_altered_managers"
        ]
    },
    "django__django-15503": {
        "django/db/models/fields/json.py": [
            "HasKeyLookup",
            "HasKey",
            "HasKeys",
            "HasAnyKeys"
        ],
        "django/db/backends/sqlite3/operations.py": [
            "DatabaseOperations"
        ],
        "django/db/backends/mysql/operations.py": [
            "DatabaseOperations"
        ]
    },
    "django__django-15525": {
        "django/core/serializers/python.py": [
            "Deserializer"
        ],
        "django/core/serializers/base.py": [
            "build_instance",
            "deserialize_fk_value"
        ],
        "django/db/models/fields/related_descriptors.py": [
            "ForwardManyToOneDescriptor"
        ]
    },
    "django__django-15554": {
        "django/db/models/query.py": [
            "QuerySet.alias",
            "QuerySet._annotate"
        ],
        "django/db/models/sql/query.py": [
            "Query.add_filtered_relation",
            "Query.build_filtered_relation_q",
            "Query.table_alias"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLCompiler.get_from_clause",
            "SQLCompiler.pre_sql_setup"
        ]
    },
    "django__django-15561": {
        "django/db/backends/sqlite3/schema.py": [
            "DatabaseSchemaEditor",
            "DatabaseSchemaEditor.alter_field",
            "DatabaseSchemaEditor._alter_field",
            "DatabaseSchemaEditor._remake_table"
        ],
        "django/db/backends/base/schema.py": [
            "BaseDatabaseSchemaEditor",
            "BaseDatabaseSchemaEditor._field_should_be_altered"
        ],
        "django/db/backends/sqlite3/operations.py": []
    },
    "django__django-15563": {
        "django/db/models/query.py": [
            "QuerySet.update",
            "QuerySet._update"
        ],
        "django/db/models/base.py": [
            "Model",
            "ModelBase"
        ],
        "django/db/models/sql/query.py": [
            "Query"
        ]
    },
    "django__django-15569": {
        "django/db/models/query_utils.py": [
            "RegisterLookupMixin"
        ],
        "django/db/models/lookups.py": [
            "Transform"
        ],
        "django/db/models/base.py": []
    },
    "django__django-15572": {
        "django/template/autoreload.py": [
            "template_changed",
            "get_template_directories",
            "watch_for_template_changes"
        ],
        "django/template/engine.py": [
            "Engine"
        ],
        "django/conf/global_settings.py": []
    },
    "django__django-15629": {
        "django/db/backends/mysql/schema.py": [
            "DatabaseSchemaEditor"
        ],
        "django/db/migrations/operations/fields.py": [
            "AlterField"
        ],
        "django/db/backends/mysql/base.py": []
    },
    "django__django-15695": {
        "django/db/migrations/operations/models.py": [
            "RenameIndex"
        ],
        "django/db/backends/base/schema.py": [
            "BaseDatabaseSchemaEditor.rename_index",
            "BaseDatabaseSchemaEditor._rename_index_sql"
        ],
        "django/db/backends/postgresql/schema.py": [
            "DatabaseSchemaEditor"
        ]
    },
    "django__django-15731": {
        "django/db/models/manager.py": [
            "BaseManager",
            "BaseManager._get_queryset_methods",
            "BaseManager.from_queryset"
        ],
        "django/db/models/query.py": [
            "QuerySet",
            "QuerySet.bulk_create"
        ],
        "django/db/models/base.py": []
    },
    "django__django-15732": {
        "django/db/migrations/operations/models.py": [
            "AlterUniqueTogether",
            "AlterTogetherOptionOperation"
        ],
        "django/db/models/options.py": [
            "normalize_together",
            "Options"
        ],
        "django/db/backends/postgresql/schema.py": [
            "DatabaseSchemaEditor"
        ]
    },
    "django__django-15741": {
        "django/utils/formats.py": [
            "get_format",
            "get_format_lazy"
        ],
        "django/template/defaultfilters.py": [
            "date",
            "time"
        ],
        "django/utils/translation/trans_real.py": [
            "DjangoTranslation"
        ]
    },
    "django__django-15814": {
        "django/db/models/sql/query.py": [
            "Query",
            "setup_joins",
            "names_to_path"
        ],
        "django/db/models/query.py": [
            "QuerySet",
            "select_related",
            "only",
            "RelatedPopulator",
            "get_related_populators"
        ],
        "django/db/models/fields/proxy.py": []
    },
    "django__django-15851": {
        "django/core/management/commands/dbshell.py": [
            "Command"
        ],
        "django/db/backends/postgresql/client.py": [
            "DatabaseClient"
        ],
        "django/db/backends/base/client.py": [
            "BaseDatabaseClient"
        ]
    },
    "django__django-15863": {
        "django/template/defaultfilters.py": [
            "floatformat"
        ],
        "django/template/base.py": [
            "FilterExpression",
            "Variable"
        ],
        "django/template/library.py": []
    },
    "django__django-15916": {
        "django/forms/models.py": [
            "modelform_factory",
            "ModelFormOptions",
            "ModelFormMetaclass",
            "BaseModelForm"
        ],
        "django/forms/forms.py": [
            "DeclarativeFieldsMetaclass",
            "BaseForm"
        ],
        "django/db/models/base.py": []
    },
    "django__django-15930": {
        "django/db/models/expressions.py": [
            "When",
            "Case",
            "Case.as_sql"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLCompiler",
            "SQLCompiler.compile"
        ],
        "django/db/models/sql/query.py": []
    },
    "django__django-15957": {
        "django/db/models/query.py": [
            "Prefetch",
            "QuerySet",
            "QuerySet.prefetch_related",
            "prefetch_related_objects",
            "prefetch_one_level"
        ],
        "django/db/models/fields/related_descriptors.py": [
            "ForwardManyToOneDescriptor.get_prefetch_queryset",
            "ReverseOneToOneDescriptor.get_prefetch_queryset",
            "ReverseManyToOneDescriptor.get_prefetch_queryset"
        ],
        "django/db/models/fields/related.py": [
            "RelatedField",
            "ForeignObject",
            "ForeignKey",
            "OneToOneField",
            "ManyToManyField"
        ]
    },
    "django__django-15973": {
        "django/db/models/fields/related.py": [
            "ManyToManyField",
            "create_many_to_many_intermediary_model"
        ],
        "django/db/migrations/operations/models.py": [
            "CreateModel",
            "database_forwards"
        ],
        "django/db/backends/base/schema.py": [
            "BaseDatabaseSchemaEditor",
            "create_model"
        ]
    },
    "django__django-15987": {
        "django/core/management/commands/loaddata.py": [
            "Command.loaddata",
            "Command.fixture_dirs",
            "Command.find_fixtures",
            "Command.get_fixture_name_and_dirs"
        ],
        "django/core/serializers/__init__.py": [],
        "django/core/serializers/base.py": []
    },
    "django__django-16032": {
        "django/db/models/query.py": [
            "QuerySet",
            "QuerySet.annotate",
            "QuerySet.alias",
            "QuerySet._annotate",
            "QuerySet.filter",
            "QuerySet._filter_or_exclude",
            "QuerySet._filter_or_exclude_inplace"
        ],
        "django/db/models/sql/query.py": [
            "Query",
            "Query.add_annotation",
            "Query.build_filter",
            "Query.add_filter"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLCompiler",
            "SQLCompiler.get_select",
            "SQLCompiler.as_sql"
        ]
    },
    "django__django-16082": {
        "django/db/models/functions/math.py": [
            "Mod"
        ],
        "django/db/models/expressions.py": [
            "_resolve_combined_type",
            "CombinedExpression"
        ],
        "django/db/models/query_utils.py": []
    },
    "django__django-16100": {
        "django/contrib/admin/options.py": [
            "ModelAdmin.changelist_view",
            "ModelAdmin._get_edited_object_pks",
            "ModelAdmin._get_list_editable_queryset"
        ],
        "django/db/transaction.py": [
            "atomic",
            "Atomic"
        ],
        "django/contrib/admin/views/main.py": []
    },
    "django__django-16116": {
        "django/core/management/commands/makemigrations.py": [
            "Command"
        ],
        "django/core/management/commands/migrate.py": [
            "Command"
        ],
        "django/core/management/commands/optimizemigration.py": [
            "Command"
        ]
    },
    "django__django-16136": {
        "django/views/generic/base.py": [
            "View.dispatch",
            "View.http_method_not_allowed"
        ],
        "django/core/handlers/base.py": [
            "BaseHandler._get_response_async",
            "BaseHandler.get_response_async"
        ],
        "django/core/handlers/exception.py": []
    },
    "django__django-16139": {
        "django/contrib/auth/forms.py": [
            "UserChangeForm"
        ],
        "django/contrib/auth/admin.py": [
            "UserAdmin"
        ],
        "django/contrib/admin/options.py": []
    },
    "django__django-16145": {
        "django/core/management/commands/runserver.py": [
            "Command"
        ],
        "django/core/servers/basehttp.py": [
            "WSGIServer",
            "run"
        ],
        "django/core/handlers/wsgi.py": [
            "WSGIHandler"
        ]
    },
    "django__django-16255": {
        "django/contrib/sitemaps/__init__.py": [
            "Sitemap",
            "Sitemap.get_latest_lastmod"
        ],
        "django/contrib/sitemaps/views.py": [
            "index",
            "_get_latest_lastmod"
        ],
        "django/contrib/sitemaps/management/__init__.py": []
    },
    "django__django-16256": {
        "django/db/models/fields/related_descriptors.py": [
            "create_reverse_many_to_one_manager",
            "create_forward_many_to_many_manager",
            "ReverseManyToOneDescriptor",
            "ManyToManyDescriptor"
        ],
        "django/db/models/query.py": [
            "QuerySet.acreate",
            "QuerySet.aget_or_create",
            "QuerySet.aupdate_or_create"
        ],
        "django/db/models/manager.py": []
    },
    "django__django-16263": {
        "django/db/models/query.py": [
            "QuerySet.count",
            "QuerySet.annotate",
            "QuerySet._annotate"
        ],
        "django/db/models/sql/query.py": [
            "Query.get_count",
            "Query.add_annotation",
            "Query"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLCompiler"
        ]
    },
    "django__django-16315": {
        "django/db/models/query.py": [
            "QuerySet.bulk_create",
            "QuerySet._insert",
            "QuerySet._batched_insert"
        ],
        "django/db/backends/postgresql/operations.py": [
            "DatabaseOperations.on_conflict_suffix_sql"
        ],
        "django/db/models/sql/compiler.py": []
    },
    "django__django-16333": {
        "django/contrib/auth/forms.py": [
            "UserCreationForm",
            "UserCreationForm.save"
        ],
        "django/forms/models.py": [
            "BaseModelForm",
            "BaseModelForm.save",
            "BaseModelForm._save_m2m"
        ],
        "django/contrib/auth/admin.py": []
    },
    "django__django-16429": {
        "django/utils/timesince.py": [
            "timesince"
        ],
        "django/utils/timezone.py": [
            "is_aware",
            "is_naive",
            "make_aware",
            "make_naive",
            "now"
        ],
        "django/conf/__init__.py": [
            "Settings",
            "LazySettings"
        ]
    },
    "django__django-16454": {
        "django/core/management/base.py": [
            "CommandParser",
            "BaseCommand"
        ],
        "django/core/management/__init__.py": [],
        "django/core/management/commands/__init__.py": []
    },
    "django__django-16485": {
        "django/template/defaultfilters.py": [
            "floatformat"
        ],
        "django/utils/numberformat.py": [
            "format"
        ],
        "django/template/library.py": []
    },
    "django__django-16493": {
        "django/db/models/fields/files.py": [
            "FileField",
            "FileField.deconstruct"
        ],
        "django/core/files/storage/base.py": [
            "Storage"
        ],
        "django/db/models/fields/__init__.py": [
            "Field"
        ]
    },
    "django__django-16502": {
        "django/core/servers/basehttp.py": [
            "ServerHandler",
            "WSGIRequestHandler"
        ],
        "django/core/handlers/wsgi.py": [
            "WSGIHandler"
        ],
        "django/core/handlers/base.py": [
            "BaseHandler"
        ]
    },
    "django__django-16527": {
        "django/contrib/admin/templatetags/admin_modify.py": [
            "submit_row"
        ],
        "django/contrib/admin/options.py": [
            "ModelAdmin",
            "has_add_permission"
        ],
        "django/contrib/admin/checks.py": []
    },
    "django__django-16560": {
        "django/db/models/constraints.py": [
            "BaseConstraint",
            "CheckConstraint",
            "UniqueConstraint"
        ],
        "django/core/exceptions.py": [
            "ValidationError"
        ],
        "django/db/models/base.py": []
    },
    "django__django-16569": {
        "django/forms/formsets.py": [
            "BaseFormSet",
            "BaseFormSet.add_fields",
            "BaseFormSet.empty_form",
            "formset_factory"
        ],
        "django/forms/models.py": [
            "BaseModelFormSet",
            "BaseModelFormSet.add_fields",
            "modelformset_factory"
        ],
        "django/forms/forms.py": [
            "BaseForm"
        ]
    },
    "django__django-16595": {
        "django/db/migrations/optimizer.py": [
            "MigrationOptimizer"
        ],
        "django/db/migrations/operations/fields.py": [
            "AlterField",
            "FieldOperation"
        ],
        "django/db/migrations/operations/base.py": [
            "Operation"
        ]
    },
    "django__django-16612": {
        "django/contrib/admin/sites.py": [
            "AdminSite.catch_all_view"
        ],
        "django/http/response.py": [
            "HttpResponsePermanentRedirect",
            "HttpResponseRedirectBase"
        ],
        "django/middleware/common.py": [
            "CommonMiddleware"
        ]
    },
    "django__django-16631": {
        "django/contrib/sessions/backends/base.py": [
            "SessionBase"
        ],
        "django/contrib/auth/base_user.py": [
            "AbstractBaseUser.get_session_auth_hash"
        ],
        "django/core/signing.py": [
            "base64_hmac",
            "salted_hmac",
            "Signer",
            "TimestampSigner"
        ]
    },
    "django__django-16642": {
        "django/http/response.py": [
            "FileResponse",
            "FileResponse.set_headers"
        ],
        "django/core/files/base.py": [
            "File"
        ],
        "django/core/files/utils.py": []
    },
    "django__django-16661": {
        "django/contrib/admin/options.py": [
            "BaseModelAdmin",
            "BaseModelAdmin.lookup_allowed",
            "ModelAdmin"
        ],
        "django/contrib/admin/utils.py": [
            "lookup_spawns_duplicates",
            "get_fields_from_path",
            "reverse_field_path",
            "get_model_from_relation"
        ],
        "django/contrib/admin/exceptions.py": [
            "DisallowedModelAdminLookup"
        ]
    },
    "django__django-16662": {
        "django/db/migrations/writer.py": [
            "MigrationWriter"
        ],
        "django/core/management/commands/makemigrations.py": [
            "Command.write_migration_files"
        ],
        "django/db/migrations/autodetector.py": []
    },
    "django__django-16667": {
        "django/forms/widgets.py": [
            "SelectDateWidget",
            "SelectDateWidget.value_from_datadict"
        ],
        "django/forms/fields.py": [
            "DateField",
            "DateField.to_python",
            "DateField.strptime"
        ],
        "django/forms/forms.py": [
            "BaseForm._clean_fields"
        ]
    },
    "django__django-16801": {
        "django/db/models/fields/files.py": [
            "ImageField",
            "ImageField.contribute_to_class",
            "ImageField.update_dimension_fields"
        ],
        "django/db/models/signals.py": [],
        "django/core/files/images.py": []
    },
    "django__django-16819": {
        "django/db/migrations/optimizer.py": [
            "MigrationOptimizer"
        ],
        "django/db/migrations/operations/models.py": [
            "AddIndex",
            "RemoveIndex",
            "RenameIndex"
        ],
        "django/db/migrations/autodetector.py": [
            "MigrationAutodetector.create_altered_indexes",
            "MigrationAutodetector.generate_added_indexes",
            "MigrationAutodetector.generate_removed_indexes",
            "MigrationAutodetector.generate_renamed_indexes"
        ]
    },
    "django__django-16877": {
        "django/template/defaultfilters.py": [
            "safeseq",
            "escape_filter",
            "force_escape"
        ],
        "django/template/base.py": [
            "FilterExpression",
            "Variable"
        ],
        "django/utils/safestring.py": [
            "SafeData",
            "SafeString",
            "mark_safe"
        ]
    },
    "django__django-16899": {
        "django/contrib/admin/checks.py": [
            "BaseModelAdminChecks",
            "BaseModelAdminChecks._check_readonly_fields",
            "BaseModelAdminChecks._check_readonly_fields_item"
        ],
        "django/contrib/admin/options.py": [
            "BaseModelAdmin"
        ],
        "django/contrib/admin/helpers.py": []
    },
    "django__django-16901": {
        "django/db/models/query.py": [
            "QuerySet.__xor__",
            "QuerySet._combinator_query"
        ],
        "django/db/backends/postgresql/operations.py": [
            "DatabaseOperations"
        ],
        "django/db/backends/base/operations.py": [
            "BaseDatabaseOperations.combine_expression"
        ]
    },
    "django__django-16938": {
        "django/core/serializers/python.py": [
            "Serializer",
            "handle_m2m_field"
        ],
        "django/db/models/query_utils.py": [
            "select_related_descend"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLCompiler",
            "get_related_selections"
        ]
    },
    "django__django-16950": {
        "django/contrib/admin/options.py": [
            "InlineModelAdmin",
            "BaseModelAdmin",
            "ModelAdmin"
        ],
        "django/forms/models.py": [
            "BaseInlineFormSet",
            "BaseModelFormSet",
            "construct_instance",
            "model_to_dict",
            "BaseModelForm"
        ],
        "django/contrib/admin/models.py": []
    },
    "django__django-17029": {
        "django/apps/registry.py": [
            "Apps.clear_cache",
            "Apps.get_swappable_settings_name"
        ],
        "django/apps/config.py": [],
        "django/apps/__init__.py": []
    },
    "django__django-17084": {
        "django/db/models/aggregates.py": [
            "Aggregate",
            "Sum"
        ],
        "django/db/models/functions/window.py": [
            "Window"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLCompiler",
            "SQLAggregateCompiler"
        ]
    },
    "django__django-17087": {
        "django/db/migrations/writer.py": [
            "MigrationWriter",
            "MigrationWriter.serialize"
        ],
        "django/db/migrations/serializer.py": [
            "DeconstructableSerializer",
            "DeconstructableSerializer._serialize_path"
        ],
        "django/db/models/fields/__init__.py": [
            "Field",
            "Field.deconstruct"
        ]
    },
    "django__django-7530": {
        "django/core/management/commands/makemigrations.py": [
            "Command"
        ],
        "django/db/migrations/autodetector.py": [
            "MigrationAutodetector",
            "MigrationAutodetector._detect_changes",
            "MigrationAutodetector.changes"
        ],
        "django/db/migrations/questioner.py": [
            "MigrationQuestioner"
        ]
    },
    "django__django-9296": {
        "django/core/paginator.py": [
            "Paginator"
        ],
        "django/shortcuts.py": [],
        "django/core/handlers/__init__.py": []
    },
    "matplotlib__matplotlib-13989": {
        "lib/matplotlib/axes/_axes.py": [
            "Axes.hist"
        ],
        "lib/matplotlib/pyplot.py": [
            "hist"
        ],
        "lib/matplotlib/_cm_listed.py": []
    },
    "matplotlib__matplotlib-14623": {
        "lib/matplotlib/scale.py": [
            "LogScale",
            "LogTransform",
            "InvertedLogTransform"
        ],
        "lib/matplotlib/axis.py": [
            "Axis",
            "Axis.set_view_interval",
            "Axis.get_view_interval",
            "Axis.get_inverted",
            "Axis.set_inverted"
        ],
        "lib/matplotlib/transforms.py": [
            "nonsingular"
        ]
    },
    "matplotlib__matplotlib-20488": {
        "lib/matplotlib/colors.py": [
            "LogNorm",
            "LogNorm.__call__",
            "LogNorm.autoscale",
            "LogNorm.autoscale_None"
        ],
        "lib/matplotlib/image.py": [
            "_ImageBase",
            "_ImageBase._make_image",
            "_ImageBase.make_image",
            "_ImageBase.draw"
        ],
        "lib/matplotlib/ticker.py": [
            "LogLocator",
            "LogLocator.tick_values",
            "LogLocator.nonsingular"
        ]
    },
    "matplotlib__matplotlib-20676": {
        "lib/matplotlib/widgets.py": [
            "SpanSelector",
            "_SelectorWidget"
        ],
        "lib/matplotlib/axes/_base.py": [
            "_AxesBase"
        ]
    },
    "matplotlib__matplotlib-20826": {
        "lib/matplotlib/axes/_base.py": [
            "_AxesBase",
            "_AxesBase.clear",
            "_AxesBase.cla"
        ]
    },
    "matplotlib__matplotlib-20859": {
        "lib/matplotlib/legend.py": [
            "Legend"
        ],
        "lib/matplotlib/figure.py": [
            "FigureBase",
            "SubFigure"
        ],
        "lib/matplotlib/axes/_base.py": [
            "_AxesBase"
        ]
    },
    "matplotlib__matplotlib-21568": {
        "lib/matplotlib/dates.py": [
            "DateFormatter",
            "ConciseDateFormatter",
            "AutoDateFormatter"
        ],
        "lib/matplotlib/texmanager.py": [
            "TexManager"
        ],
        "lib/matplotlib/axis.py": [
            "Axis"
        ]
    },
    "matplotlib__matplotlib-22719": {
        "lib/matplotlib/axis.py": [
            "Axis.convert_units",
            "Axis.update_units"
        ],
        "lib/matplotlib/category.py": [
            "StrCategoryConverter",
            "StrCategoryConverter.convert"
        ],
        "lib/matplotlib/units.py": [
            "ConversionInterface",
            "Registry"
        ]
    },
    "matplotlib__matplotlib-22865": {
        "lib/matplotlib/colorbar.py": [
            "Colorbar",
            "Colorbar._add_solids",
            "Colorbar._add_solids_patches",
            "Colorbar._do_extends"
        ],
        "lib/matplotlib/collections.py": [
            "Collection",
            "QuadMesh"
        ],
        "examples/color/colorbar_basics.py": []
    },
    "matplotlib__matplotlib-22871": {
        "lib/matplotlib/dates.py": [
            "ConciseDateFormatter",
            "ConciseDateFormatter.__init__",
            "ConciseDateFormatter.__call__",
            "ConciseDateFormatter.get_offset",
            "ConciseDateFormatter.format_ticks"
        ],
        "lib/matplotlib/ticker.py": [
            "Formatter",
            "Formatter.get_offset"
        ],
        "examples/ticks/date_concise_formatter.py": []
    },
    "matplotlib__matplotlib-23299": {
        "lib/matplotlib/_pylab_helpers.py": [
            "Gcf"
        ],
        "lib/matplotlib/pyplot.py": [
            "get_backend",
            "_get_backend_mod",
            "switch_backend",
            "figure",
            "rc_context"
        ],
        "lib/matplotlib/__init__.py": [
            "get_backend",
            "use",
            "rc_context"
        ]
    },
    "matplotlib__matplotlib-23314": {
        "lib/mpl_toolkits/mplot3d/axes3d.py": [
            "Axes3D"
        ],
        "lib/matplotlib/projections/__init__.py": [
            "ProjectionRegistry",
            "get_projection_class"
        ],
        "lib/matplotlib/axes/_base.py": [
            "_AxesBase"
        ]
    },
    "matplotlib__matplotlib-23412": {
        "lib/matplotlib/patches.py": [
            "Patch",
            "Rectangle",
            "PathPatch",
            "FancyBboxPatch"
        ],
        "lib/matplotlib/path.py": [
            "Path"
        ],
        "lib/matplotlib/backend_bases.py": [
            "RendererBase",
            "GraphicsContextBase"
        ]
    },
    "matplotlib__matplotlib-23476": {
        "lib/matplotlib/figure.py": [
            "Figure",
            "Figure.__setstate__",
            "Figure._get_dpi",
            "Figure._set_dpi"
        ],
        "lib/matplotlib/backend_bases.py": [
            "FigureCanvasBase",
            "FigureCanvasBase._set_device_pixel_ratio",
            "FigureCanvasBase.get_width_height"
        ],
        "lib/matplotlib/backends/backend_macosx.py": [
            "FigureCanvasMac",
            "FigureCanvasMac.__init__",
            "FigureCanvasMac.resize"
        ]
    },
    "matplotlib__matplotlib-24026": {
        "lib/matplotlib/stackplot.py": [
            "stackplot"
        ],
        "lib/matplotlib/rcsetup.py": [
            "validate_color_for_prop_cycle"
        ],
        "lib/matplotlib/axes/_base.py": [
            "_AxesBase"
        ]
    },
    "matplotlib__matplotlib-24149": {
        "lib/matplotlib/axes/_axes.py": [
            "Axes._convert_dx",
            "Axes.bar"
        ],
        "lib/matplotlib/cbook/__init__.py": [
            "_safe_first_finite",
            "sanitize_sequence"
        ],
        "lib/matplotlib/collections.py": [
            "Collection"
        ]
    },
    "matplotlib__matplotlib-24177": {
        "lib/matplotlib/axes/_axes.py": [
            "Axes.hist"
        ],
        "lib/matplotlib/pyplot.py": [
            "hist"
        ],
        "lib/matplotlib/axes/_base.py": []
    },
    "matplotlib__matplotlib-24570": {
        "lib/matplotlib/offsetbox.py": [
            "HPacker",
            "PackerBase",
            "DrawingArea",
            "TextArea",
            "AnchoredOffsetbox"
        ],
        "lib/matplotlib/figure.py": [
            "Figure",
            "SubFigure"
        ],
        "lib/matplotlib/_mathtext.py": [
            "Hlist",
            "List",
            "Box",
            "Node"
        ]
    },
    "matplotlib__matplotlib-24627": {
        "lib/matplotlib/artist.py": [
            "Artist"
        ],
        "lib/matplotlib/axes/_base.py": [
            "_AxesBase.cla",
            "_AxesBase.clear"
        ],
        "lib/matplotlib/figure.py": [
            "Figure.clf",
            "Figure.clear"
        ]
    },
    "matplotlib__matplotlib-24637": {
        "lib/matplotlib/offsetbox.py": [
            "AnnotationBbox",
            "OffsetImage"
        ],
        "lib/matplotlib/artist.py": [
            "Artist.get_gid",
            "Artist.set_gid",
            "Artist.draw"
        ],
        "lib/matplotlib/backends/backend_svg.py": [
            "RendererSVG",
            "XMLWriter.start"
        ]
    },
    "matplotlib__matplotlib-24870": {
        "lib/matplotlib/contour.py": [
            "ContourSet",
            "QuadContourSet"
        ],
        "lib/matplotlib/pyplot.py": [
            "contour",
            "contourf"
        ],
        "lib/matplotlib/axes/_axes.py": [
            "contour",
            "contourf"
        ]
    },
    "matplotlib__matplotlib-24970": {
        "lib/matplotlib/colors.py": [
            "ListedColormap",
            "Colormap",
            "Colormap.__call__",
            "_to_rgba_no_colorcycle",
            "to_rgba",
            "to_rgba_array"
        ],
        "lib/matplotlib/cm.py": [
            "_get_cmap",
            "ScalarMappable"
        ],
        "lib/matplotlib/_api/deprecation.py": []
    },
    "matplotlib__matplotlib-25122": {
        "lib/matplotlib/mlab.py": [
            "_spectral_helper"
        ],
        "lib/matplotlib/_cm.py": [],
        "lib/matplotlib/pylab.py": []
    },
    "matplotlib__matplotlib-25287": {
        "lib/matplotlib/axis.py": [
            "XAxis",
            "YAxis",
            "Axis._init",
            "Axis.get_offset_text"
        ],
        "lib/matplotlib/rcsetup.py": [
            "validate_color_or_inherit"
        ],
        "lib/matplotlib/axes/_base.py": []
    },
    "matplotlib__matplotlib-25311": {
        "lib/matplotlib/legend.py": [
            "DraggableLegend",
            "Legend"
        ],
        "lib/matplotlib/backends/backend_qt.py": [
            "FigureCanvasQT"
        ],
        "lib/matplotlib/backend_bases.py": [
            "FigureCanvasBase"
        ]
    },
    "matplotlib__matplotlib-25332": {
        "lib/matplotlib/figure.py": [
            "Figure.__getstate__",
            "Figure.__setstate__",
            "Figure.align_labels",
            "Figure.align_xlabels",
            "Figure.align_ylabels"
        ],
        "lib/matplotlib/text.py": [
            "Text.__getstate__",
            "_AnnotationBase",
            "Annotation"
        ],
        "lib/matplotlib/artist.py": [
            "Artist.__getstate__"
        ]
    },
    "matplotlib__matplotlib-25479": {
        "lib/matplotlib/cm.py": [
            "ColormapRegistry",
            "register_cmap",
            "_get_cmap",
            "get_cmap",
            "ScalarMappable"
        ],
        "lib/matplotlib/pyplot.py": [
            "set_cmap",
            "get_cmap",
            "imshow"
        ],
        "lib/matplotlib/image.py": [
            "_ImageBase",
            "AxesImage"
        ]
    },
    "matplotlib__matplotlib-25775": {
        "lib/matplotlib/text.py": [
            "Text",
            "Annotation"
        ],
        "lib/matplotlib/backend_bases.py": [
            "GraphicsContextBase",
            "RendererBase"
        ],
        "lib/matplotlib/artist.py": [
            "Artist"
        ]
    },
    "matplotlib__matplotlib-25960": {
        "lib/matplotlib/figure.py": [
            "Figure.subfigures",
            "SubFigure.__init__",
            "FigureBase.subfigures",
            "SubplotParams"
        ],
        "lib/matplotlib/_constrained_layout.py": [
            "do_constrained_layout",
            "make_layoutgrids",
            "make_layout_margins"
        ],
        "lib/matplotlib/_layoutgrid.py": [
            "LayoutGrid"
        ]
    },
    "matplotlib__matplotlib-26113": {
        "lib/matplotlib/axes/_axes.py": [
            "Axes.hexbin"
        ],
        "lib/matplotlib/collections.py": [
            "Collection"
        ],
        "galleries/examples/statistics/hexbin_demo.py": []
    },
    "matplotlib__matplotlib-26208": {
        "lib/matplotlib/axes/_base.py": [
            "_AxesBase",
            "_AxesBase.twinx",
            "_AxesBase.update_datalim"
        ]
    },
    "matplotlib__matplotlib-26291": {
        "lib/mpl_toolkits/axes_grid1/inset_locator.py": [
            "AnchoredLocatorBase",
            "inset_axes"
        ],
        "lib/matplotlib/offsetbox.py": [
            "OffsetBox",
            "AnchoredOffsetbox",
            "OffsetBox.get_window_extent"
        ],
        "lib/matplotlib/_tight_bbox.py": [
            "adjust_bbox"
        ]
    },
    "matplotlib__matplotlib-26342": {
        "lib/matplotlib/contour.py": [
            "ContourSet",
            "ContourSet.get_paths",
            "ContourSet.set_paths"
        ],
        "lib/matplotlib/collections.py": [
            "Collection",
            "Collection.get_paths",
            "Collection.set_paths"
        ],
        "lib/matplotlib/pyplot.py": []
    },
    "matplotlib__matplotlib-26466": {
        "lib/matplotlib/text.py": [
            "Annotation",
            "_AnnotationBase"
        ],
        "lib/matplotlib/axes/_axes.py": [
            "annotate"
        ],
        "lib/matplotlib/artist.py": []
    },
    "mwaskom__seaborn-3069": {
        "seaborn/_core/scales.py": [
            "Scale",
            "Nominal",
            "Ordinal",
            "Discrete",
            "ContinuousBase",
            "Continuous",
            "Temporal",
            "PseudoAxis"
        ],
        "seaborn/categorical.py": [
            "_CategoricalPlotterNew",
            "_CategoricalFacetPlotter",
            "_CategoricalPlotter",
            "_BoxPlotter",
            "_ViolinPlotter",
            "_CategoricalStatPlotter",
            "_BarPlotter",
            "_PointPlotter",
            "_CountPlotter",
            "_LVPlotter",
            "boxplot",
            "violinplot",
            "boxenplot",
            "stripplot",
            "swarmplot",
            "barplot",
            "pointplot",
            "countplot",
            "catplot",
            "Beeswarm"
        ],
        "seaborn/_core/plot.py": [
            "Plot",
            "Plotter"
        ]
    },
    "mwaskom__seaborn-3187": {
        "seaborn/_core/scales.py": [
            "Scale",
            "Continuous",
            "Continuous._get_formatter"
        ],
        "seaborn/_marks/dot.py": [
            "DotBase._legend_artist"
        ],
        "seaborn/objects.py": []
    },
    "pallets__flask-5014": {
        "src/flask/blueprints.py": [
            "Blueprint",
            "Blueprint.__init__"
        ],
        "src/flask/scaffold.py": [
            "Scaffold"
        ],
        "examples/tutorial/flaskr/__init__.py": []
    },
    "psf__requests-1142": {
        "requests/models.py": [
            "PreparedRequest",
            "PreparedRequest.prepare_body",
            "PreparedRequest.prepare_content_length"
        ],
        "requests/sessions.py": [
            "Session",
            "Session.request",
            "Session.get"
        ],
        "requests/api.py": [
            "request",
            "get"
        ]
    },
    "psf__requests-1724": {
        "requests/models.py": [
            "PreparedRequest"
        ],
        "requests/sessions.py": [
            "Session",
            "Session.request"
        ],
        "requests/adapters.py": [
            "HTTPAdapter",
            "HTTPAdapter.send"
        ]
    },
    "psf__requests-1766": {
        "requests/auth.py": [
            "HTTPDigestAuth",
            "HTTPDigestAuth.build_digest_header"
        ],
        "requests/utils.py": [
            "parse_dict_header",
            "unquote_header_value"
        ],
        "requests/models.py": []
    },
    "psf__requests-1921": {
        "requests/sessions.py": [
            "Session",
            "merge_setting"
        ],
        "requests/models.py": [
            "PreparedRequest"
        ],
        "requests/structures.py": [
            "CaseInsensitiveDict"
        ]
    },
    "psf__requests-2317": {
        "requests/sessions.py": [
            "Session.request",
            "Session.prepare_request"
        ],
        "requests/utils.py": [
            "to_native_string"
        ],
        "requests/compat.py": []
    },
    "psf__requests-2931": {
        "requests/models.py": [
            "PreparedRequest",
            "PreparedRequest.prepare_body"
        ],
        "requests/utils.py": [
            "to_native_string"
        ],
        "requests/api.py": [
            "put",
            "request"
        ]
    },
    "psf__requests-5414": {
        "requests/models.py": [
            "PreparedRequest._get_idna_encoded_host",
            "PreparedRequest.prepare_url"
        ],
        "requests/exceptions.py": [
            "InvalidURL"
        ],
        "requests/utils.py": []
    },
    "psf__requests-6028": {
        "requests/auth.py": [
            "HTTPProxyAuth"
        ],
        "requests/adapters.py": [
            "HTTPAdapter",
            "proxy_manager_for",
            "proxy_headers"
        ],
        "requests/sessions.py": [
            "Session",
            "rebuild_proxies",
            "merge_environment_settings"
        ]
    },
    "pydata__xarray-2905": {
        "xarray/core/variable.py": [
            "Variable.__setitem__",
            "as_compatible_data",
            "_maybe_wrap_data"
        ],
        "xarray/core/dataarray.py": [
            "DataArray.__setitem__"
        ],
        "xarray/core/indexing.py": [
            "ExplicitlyIndexedNDArrayMixin"
        ]
    },
    "pydata__xarray-3095": {
        "xarray/core/dataset.py": [
            "Dataset"
        ],
        "xarray/core/dataarray.py": [
            "DataArray"
        ],
        "xarray/core/variable.py": [
            "Variable",
            "IndexVariable"
        ]
    },
    "pydata__xarray-3151": {
        "xarray/core/combine.py": [
            "combine_by_coords",
            "_combine_nd",
            "_combine_1d",
            "_combine_all_along_first_dim",
            "_nested_combine"
        ],
        "xarray/core/merge.py": [
            "merge_coords",
            "merge_core",
            "merge_variables",
            "unique_variable"
        ],
        "xarray/core/coordinates.py": [
            "AbstractCoordinates",
            "DatasetCoordinates"
        ]
    },
    "pydata__xarray-3305": {
        "xarray/core/dataarray.py": [
            "DataArray.quantile",
            "DataArray._copy_attrs_from"
        ],
        "xarray/core/computation.py": [
            "apply_dataarray_vfunc",
            "apply_variable_ufunc",
            "apply_ufunc"
        ],
        "xarray/core/nanops.py": []
    },
    "pydata__xarray-3677": {
        "xarray/core/merge.py": [
            "coerce_pandas_values",
            "merge",
            "dataset_merge_method"
        ],
        "xarray/core/dataset.py": [
            "Dataset.merge"
        ],
        "xarray/core/dataarray.py": [
            "DataArray"
        ]
    },
    "pydata__xarray-3993": {
        "xarray/core/dataarray.py": [
            "DataArray.integrate"
        ],
        "xarray/core/dataset.py": [
            "Dataset.integrate"
        ],
        "xarray/core/computation.py": []
    },
    "pydata__xarray-4075": {
        "xarray/core/weighted.py": [
            "Weighted",
            "Weighted._sum_of_weights",
            "Weighted._weighted_mean"
        ],
        "xarray/core/computation.py": [
            "dot"
        ],
        "xarray/core/dataarray.py": [
            "DataArray"
        ]
    },
    "pydata__xarray-4094": {
        "xarray/core/dataset.py": [
            "Dataset.to_stacked_array",
            "Dataset.unstack"
        ],
        "xarray/core/dataarray.py": [
            "DataArray.to_unstacked_dataset",
            "DataArray.unstack"
        ],
        "xarray/core/merge.py": [
            "MergeError",
            "merge_core"
        ]
    },
    "pydata__xarray-4356": {
        "xarray/core/nanops.py": [
            "_maybe_null_out",
            "nansum"
        ],
        "xarray/core/dataarray.py": [
            "DataArray"
        ],
        "xarray/core/computation.py": []
    },
    "pydata__xarray-4629": {
        "xarray/core/merge.py": [
            "merge_attrs",
            "merge_core",
            "merge"
        ],
        "xarray/core/dataset.py": [
            "Dataset"
        ],
        "xarray/core/combine.py": []
    },
    "pydata__xarray-4687": {
        "xarray/core/computation.py": [
            "where",
            "apply_ufunc",
            "apply_dataarray_vfunc",
            "apply_variable_ufunc"
        ],
        "xarray/core/duck_array_ops.py": [
            "where",
            "where_method"
        ],
        "xarray/core/dataarray.py": [
            "DataArray"
        ]
    },
    "pydata__xarray-4695": {
        "xarray/core/dataarray.py": [
            "_LocIndexer",
            "DataArray",
            "remap_label_indexers"
        ],
        "xarray/core/indexing.py": [
            "convert_label_indexer",
            "get_dim_indexers",
            "remap_label_indexers"
        ],
        "xarray/core/coordinates.py": [
            "remap_label_indexers"
        ]
    },
    "pydata__xarray-4966": {
        "xarray/coding/variables.py": [
            "UnsignedIntegerCoder",
            "decode_cf_variable",
            "encode_cf_variable"
        ],
        "xarray/backends/pydap_.py": [
            "PydapArrayWrapper",
            "PydapDataStore",
            "PydapBackendEntrypoint"
        ],
        "xarray/conventions.py": [
            "decode_cf_variables",
            "cf_decoder",
            "cf_encoder"
        ]
    },
    "pydata__xarray-6461": {
        "xarray/core/computation.py": [
            "where"
        ],
        "xarray/core/duck_array_ops.py": [
            "where"
        ],
        "xarray/core/dataarray.py": [
            "DataArray"
        ]
    },
    "pydata__xarray-6599": {
        "xarray/core/computation.py": [
            "polyval"
        ],
        "xarray/core/duck_array_ops.py": [
            "datetime_to_numeric",
            "timedelta_to_numeric",
            "np_timedelta64_to_float",
            "pd_timedelta_to_float",
            "py_timedelta_to_float"
        ],
        "xarray/core/dataarray.py": []
    },
    "pydata__xarray-6721": {
        "xarray/core/common.py": [
            "get_chunksizes"
        ],
        "xarray/core/variable.py": [
            "_as_array_or_item"
        ],
        "xarray/core/dataset.py": []
    },
    "pydata__xarray-6744": {
        "xarray/core/rolling.py": [
            "Rolling",
            "DataArrayRolling"
        ],
        "xarray/core/dataarray.py": [
            "DataArray.rolling"
        ],
        "xarray/core/computation.py": []
    },
    "pydata__xarray-6938": {
        "xarray/core/dataset.py": [
            "Dataset.swap_dims"
        ],
        "xarray/core/dataarray.py": [
            "DataArray.swap_dims"
        ],
        "xarray/core/coordinates.py": [
            "DatasetCoordinates",
            "DataArrayCoordinates"
        ]
    },
    "pydata__xarray-6992": {
        "xarray/core/dataset.py": [
            "DataVariables",
            "Dataset"
        ],
        "xarray/core/coordinates.py": [
            "DatasetCoordinates"
        ],
        "xarray/core/indexes.py": [
            "Indexes",
            "assert_no_index_corrupted"
        ]
    },
    "pydata__xarray-7229": {
        "xarray/core/computation.py": [
            "where"
        ],
        "xarray/core/variable.py": [
            "Variable",
            "IndexVariable"
        ],
        "xarray/core/dataarray.py": [
            "DataArray"
        ]
    },
    "pydata__xarray-7233": {
        "xarray/core/rolling.py": [
            "DataArrayCoarsen",
            "DatasetCoarsen",
            "Coarsen"
        ],
        "xarray/core/dataset.py": [
            "Dataset"
        ],
        "xarray/core/coordinates.py": [
            "DatasetCoordinates"
        ]
    },
    "pydata__xarray-7393": {
        "xarray/core/dataarray.py": [
            "DataArray.stack"
        ],
        "xarray/core/dataset.py": [
            "Dataset.stack",
            "Dataset._stack_once",
            "Dataset._get_stack_index"
        ],
        "xarray/core/indexing.py": [
            "PandasMultiIndexingAdapter"
        ]
    },
    "pylint-dev__pylint-4551": {
        "pylint/pyreverse/inspector.py": [
            "Linker",
            "visit_classdef",
            "visit_functiondef",
            "handle_assignattr_type"
        ],
        "pylint/pyreverse/diagrams.py": [
            "ClassDiagram",
            "get_attrs",
            "get_methods"
        ],
        "pylint/pyreverse/writer.py": [
            "DiagramWriter",
            "get_values",
            "DotWriter",
            "VCGWriter"
        ]
    },
    "pylint-dev__pylint-4604": {
        "pylint/checkers/variables.py": [
            "VariablesChecker"
        ],
        "pylint/checkers/imports.py": [
            "ImportsChecker"
        ],
        "pylint/checkers/typecheck.py": []
    },
    "pylint-dev__pylint-4661": {
        "pylint/constants.py": [],
        "pylint/lint/pylinter.py": [
            "PyLinter"
        ],
        "pylint/config/find_default_config_files.py": [
            "find_default_config_files"
        ]
    },
    "pylint-dev__pylint-4970": {
        "pylint/checkers/similar.py": [
            "Similar",
            "SimilarChecker",
            "hash_lineset"
        ],
        "pylint/config/option.py": [
            "_validate",
            "Option"
        ],
        "pylint/lint/pylinter.py": []
    },
    "pylint-dev__pylint-6386": {
        "pylint/lint/base_options.py": [
            "_make_linter_options",
            "_make_run_options"
        ],
        "pylint/config/option.py": [
            "Option"
        ],
        "pylint/config/option_parser.py": [
            "OptionParser"
        ]
    },
    "pylint-dev__pylint-6528": {
        "pylint/lint/expand_modules.py": [
            "_is_in_ignore_list_re",
            "expand_modules"
        ],
        "pylint/lint/pylinter.py": [
            "PyLinter",
            "PyLinter._discover_files",
            "PyLinter._expand_files",
            "PyLinter._iterate_file_descrs"
        ],
        "pylint/lint/run.py": []
    },
    "pylint-dev__pylint-6903": {
        "pylint/lint/run.py": [
            "_query_cpu",
            "_cpu_count"
        ],
        "pylint/lint/parallel.py": [
            "check_parallel"
        ],
        "pylint/lint/pylinter.py": [
            "PyLinter"
        ]
    },
    "pylint-dev__pylint-7080": {
        "pylint/lint/pylinter.py": [
            "should_analyze_file",
            "_discover_files",
            "_iterate_file_descrs",
            "_expand_files"
        ],
        "pylint/lint/expand_modules.py": [
            "_is_in_ignore_list_re",
            "_is_ignored_file",
            "expand_modules"
        ],
        "pylint/lint/run.py": []
    },
    "pylint-dev__pylint-7277": {
        "pylint/__init__.py": [
            "modify_sys_path"
        ],
        "pylint/lint/__init__.py": [
            "_patch_sys_path",
            "fix_import_path"
        ],
        "pylint/lint/run.py": []
    },
    "pylint-dev__pylint-8898": {
        "pylint/config/argument.py": [
            "_regexp_csv_transfomer",
            "_csv_transformer",
            "_regex_transformer"
        ],
        "pylint/config/arguments_manager.py": [
            "_ArgumentsManager"
        ],
        "pylint/config/config_initialization.py": [
            "_config_initialization"
        ]
    },
    "pytest-dev__pytest-10051": {
        "src/_pytest/logging.py": [
            "LogCaptureFixture",
            "LogCaptureFixture.get_records",
            "LogCaptureFixture.clear"
        ],
        "src/_pytest/capture.py": [],
        "src/_pytest/fixtures.py": []
    },
    "pytest-dev__pytest-10081": {
        "src/_pytest/debugging.py": [
            "pytestPDB",
            "_enter_pdb",
            "post_mortem"
        ],
        "src/_pytest/unittest.py": [
            "TestCaseFunction",
            "pytest_runtest_protocol"
        ],
        "src/_pytest/skipping.py": [
            "evaluate_skip_marks",
            "pytest_runtest_setup",
            "pytest_runtest_call"
        ]
    },
    "pytest-dev__pytest-10356": {
        "src/_pytest/mark/structures.py": [
            "Mark",
            "MarkDecorator",
            "get_unpacked_marks",
            "normalize_mark_list",
            "store_mark",
            "NodeKeywords"
        ],
        "src/_pytest/python.py": [
            "PyobjMixin",
            "PyCollector",
            "Class",
            "Function"
        ],
        "src/_pytest/mark/__init__.py": [
            "pytest_configure",
            "pytest_collection_modifyitems"
        ]
    },
    "pytest-dev__pytest-5262": {
        "src/_pytest/capture.py": [
            "EncodedFile",
            "safe_text_dupfile",
            "FDCapture",
            "FDCaptureBinary",
            "SysCapture",
            "SysCaptureBinary"
        ],
        "src/_pytest/_io/__init__.py": [],
        "src/_pytest/compat.py": []
    },
    "pytest-dev__pytest-5631": {
        "src/_pytest/compat.py": [
            "num_mock_patch_args",
            "getfuncargnames"
        ],
        "src/_pytest/python.py": [
            "pytest_pycollect_makeitem",
            "Function"
        ],
        "src/_pytest/fixtures.py": []
    },
    "pytest-dev__pytest-5787": {
        "src/_pytest/reports.py": [
            "BaseReport",
            "TestReport",
            "pytest_report_to_serializable",
            "pytest_report_from_serializable"
        ],
        "src/_pytest/runner.py": [
            "CallInfo",
            "pytest_runtest_makereport",
            "call_and_report"
        ],
        "src/_pytest/nodes.py": [
            "Node._repr_failure_py",
            "Node.repr_failure"
        ]
    },
    "pytest-dev__pytest-5809": {
        "src/_pytest/pastebin.py": [
            "create_new_paste",
            "pytest_terminal_summary"
        ],
        "src/_pytest/terminal.py": [
            "TerminalReporter"
        ],
        "src/_pytest/config/__init__.py": []
    },
    "pytest-dev__pytest-5840": {
        "src/_pytest/python.py": [
            "Module",
            "Module._importtestmodule",
            "Package",
            "Package._collectfile",
            "pytest_collect_file"
        ],
        "src/_pytest/main.py": [
            "Session",
            "Session._collectfile",
            "Session._parsearg",
            "Session._tryconvertpyarg"
        ],
        "src/_pytest/config/findpaths.py": [
            "determine_setup",
            "exists",
            "get_common_ancestor"
        ]
    },
    "pytest-dev__pytest-6197": {
        "src/_pytest/python.py": [
            "Package",
            "pytest_collect_file",
            "pytest_pycollect_makemodule"
        ],
        "src/_pytest/main.py": [
            "Session",
            "pytest_ignore_collect",
            "_collectfile",
            "_recurse"
        ],
        "src/_pytest/nodes.py": []
    },
    "pytest-dev__pytest-6202": {
        "src/_pytest/python.py": [
            "PyobjMixin.getmodpath"
        ],
        "src/_pytest/nodes.py": [
            "Node.nodeid",
            "Item.location",
            "Item.reportinfo"
        ],
        "src/_pytest/reports.py": [
            "BaseReport",
            "BaseReport.head_line"
        ]
    },
    "pytest-dev__pytest-7205": {
        "src/_pytest/setuponly.py": [
            "_show_fixture_action"
        ],
        "src/_pytest/_io/saferepr.py": [
            "saferepr"
        ],
        "src/_pytest/fixtures.py": []
    },
    "pytest-dev__pytest-7236": {
        "src/_pytest/debugging.py": [
            "PdbInvoke",
            "_enter_pdb"
        ],
        "src/_pytest/unittest.py": [
            "TestCaseFunction",
            "addSkip",
            "runtest"
        ],
        "src/_pytest/skipping.py": [
            "pytest_runtest_setup",
            "pytest_runtest_makereport"
        ]
    },
    "pytest-dev__pytest-7324": {
        "src/_pytest/assertion/rewrite.py": [
            "AssertionRewriter",
            "rewrite_asserts",
            "_get_assertion_exprs"
        ],
        "src/_pytest/assertion/__init__.py": [
            "install_importhook",
            "AssertionState"
        ],
        "src/_pytest/python.py": [
            "Function"
        ]
    },
    "pytest-dev__pytest-7432": {
        "src/_pytest/skipping.py": [
            "pytest_runtest_makereport"
        ],
        "src/_pytest/reports.py": [
            "TestReport",
            "BaseReport"
        ],
        "src/_pytest/runner.py": [
            "CallInfo"
        ]
    },
    "pytest-dev__pytest-7490": {
        "src/_pytest/skipping.py": [
            "evaluate_xfail_marks",
            "pytest_runtest_call",
            "pytest_runtest_makereport"
        ],
        "src/_pytest/mark/structures.py": [
            "Mark",
            "MarkDecorator",
            "normalize_mark_list"
        ],
        "src/_pytest/nodes.py": [
            "Node.add_marker",
            "Node.iter_markers",
            "Node.get_closest_marker"
        ]
    },
    "pytest-dev__pytest-7521": {
        "src/_pytest/capture.py": [
            "CaptureIO",
            "TeeCaptureIO",
            "SysCapture",
            "FDCapture",
            "MultiCapture",
            "CaptureFixture",
            "readouterr"
        ],
        "src/_pytest/_io/terminalwriter.py": [],
        "src/_pytest/fixtures.py": []
    },
    "pytest-dev__pytest-7571": {
        "src/_pytest/logging.py": [
            "LogCaptureFixture",
            "LogCaptureHandler",
            "caplog"
        ],
        "src/_pytest/fixtures.py": [
            "FixtureRequest",
            "SubRequest",
            "FixtureDef"
        ],
        "src/_pytest/capture.py": []
    },
    "pytest-dev__pytest-7982": {
        "src/_pytest/python.py": [
            "Package",
            "Package.collect",
            "Package._recurse"
        ],
        "src/_pytest/nodes.py": [
            "FSCollector",
            "Collector"
        ],
        "src/pytest/collect.py": []
    },
    "pytest-dev__pytest-8399": {
        "src/_pytest/unittest.py": [
            "_make_xunit_fixture",
            "UnitTestCase"
        ],
        "src/_pytest/fixtures.py": [
            "FixtureDef",
            "FixtureManager"
        ],
        "src/_pytest/config/__init__.py": []
    },
    "scikit-learn__scikit-learn-10297": {
        "sklearn/linear_model/ridge.py": [
            "_BaseRidgeCV",
            "RidgeClassifierCV"
        ],
        "sklearn/linear_model/__init__.py": [],
        "sklearn/linear_model/base.py": []
    },
    "scikit-learn__scikit-learn-10844": {
        "sklearn/metrics/cluster/supervised.py": [
            "fowlkes_mallows_score"
        ],
        "sklearn/metrics/cluster/__init__.py": [],
        "sklearn/metrics/__init__.py": []
    },
    "scikit-learn__scikit-learn-10908": {
        "sklearn/feature_extraction/text.py": [
            "CountVectorizer",
            "VectorizerMixin._validate_vocabulary",
            "VectorizerMixin.get_feature_names"
        ],
        "sklearn/feature_extraction/__init__.py": [],
        "sklearn/exceptions.py": []
    },
    "scikit-learn__scikit-learn-11310": {
        "sklearn/model_selection/_search.py": [
            "BaseSearchCV",
            "fit_grid_point",
            "_fit_and_score"
        ],
        "sklearn/model_selection/_validation.py": [
            "_fit_and_score"
        ],
        "sklearn/model_selection/__init__.py": []
    },
    "scikit-learn__scikit-learn-11578": {
        "sklearn/linear_model/logistic.py": [
            "_log_reg_scoring_path",
            "LogisticRegression",
            "LogisticRegressionCV",
            "logistic_regression_path"
        ],
        "sklearn/metrics/scorer.py": [
            "_ProbaScorer"
        ],
        "sklearn/linear_model/__init__.py": []
    },
    "scikit-learn__scikit-learn-12585": {
        "sklearn/base.py": [
            "clone",
            "BaseEstimator.get_params",
            "BaseEstimator.set_params"
        ],
        "sklearn/utils/estimator_checks.py": [
            "check_estimator",
            "check_get_params_invariance",
            "check_set_params"
        ],
        "sklearn/utils/metaestimators.py": []
    },
    "scikit-learn__scikit-learn-12682": {
        "sklearn/decomposition/dict_learning.py": [
            "_sparse_encode",
            "sparse_encode",
            "SparseCoder",
            "SparseCodingMixin"
        ],
        "examples/decomposition/plot_sparse_coding.py": [
            "ricker_matrix"
        ],
        "examples/linear_model/plot_lasso_dense_vs_sparse_data.py": []
    },
    "scikit-learn__scikit-learn-12973": {
        "sklearn/linear_model/least_angle.py": [
            "LassoLarsIC",
            "LassoLarsIC.fit"
        ],
        "sklearn/linear_model/__init__.py": [],
        "sklearn/utils/estimator_checks.py": []
    },
    "scikit-learn__scikit-learn-13124": {
        "sklearn/model_selection/_split.py": [
            "StratifiedKFold",
            "_BaseKFold",
            "_make_test_folds",
            "_validate_shuffle_split",
            "_validate_shuffle_split_init",
            "_approximate_mode"
        ],
        "sklearn/model_selection/_validation.py": [
            "_check_is_permutation",
            "_shuffle"
        ],
        "sklearn/model_selection/__init__.py": []
    },
    "scikit-learn__scikit-learn-13135": {
        "sklearn/preprocessing/_discretization.py": [
            "KBinsDiscretizer",
            "KBinsDiscretizer.fit",
            "KBinsDiscretizer.transform"
        ],
        "sklearn/base.py": [
            "TransformerMixin.fit_transform"
        ],
        "sklearn/preprocessing/__init__.py": []
    },
    "scikit-learn__scikit-learn-13142": {
        "sklearn/mixture/gaussian_mixture.py": [
            "GaussianMixture"
        ],
        "sklearn/mixture/base.py": [
            "BaseMixture.fit",
            "BaseMixture.fit_predict",
            "BaseMixture.predict",
            "BaseMixture._initialize_parameters"
        ],
        "sklearn/mixture/__init__.py": []
    },
    "scikit-learn__scikit-learn-13328": {
        "sklearn/linear_model/huber.py": [
            "_huber_loss_and_gradient",
            "HuberRegressor"
        ],
        "sklearn/linear_model/base.py": [
            "_preprocess_data",
            "LinearModel"
        ],
        "sklearn/base.py": [
            "BaseEstimator",
            "RegressorMixin"
        ]
    },
    "scikit-learn__scikit-learn-13439": {
        "sklearn/pipeline.py": [
            "Pipeline"
        ],
        "sklearn/utils/metaestimators.py": [
            "_BaseComposition"
        ],
        "sklearn/utils/estimator_checks.py": []
    },
    "scikit-learn__scikit-learn-13496": {
        "sklearn/ensemble/iforest.py": [
            "IsolationForest"
        ],
        "sklearn/ensemble/base.py": [
            "BaseEnsemble"
        ],
        "sklearn/ensemble/__init__.py": []
    },
    "scikit-learn__scikit-learn-13779": {
        "sklearn/ensemble/voting.py": [
            "_parallel_fit_estimator",
            "VotingClassifier",
            "VotingRegressor"
        ],
        "sklearn/ensemble/base.py": [],
        "sklearn/utils/estimator_checks.py": []
    },
    "scikit-learn__scikit-learn-14053": {
        "sklearn/tree/export.py": [
            "export_text",
            "_BaseTreeExporter",
            "_DOTTreeExporter",
            "_MPLTreeExporter"
        ],
        "sklearn/tree/tree.py": [
            "BaseDecisionTree",
            "DecisionTreeClassifier"
        ],
        "sklearn/tree/__init__.py": []
    },
    "scikit-learn__scikit-learn-14087": {
        "sklearn/linear_model/logistic.py": [
            "LogisticRegressionCV",
            "_logistic_regression_path",
            "_log_reg_scoring_path"
        ],
        "sklearn/linear_model/__init__.py": [],
        "sklearn/linear_model/base.py": []
    },
    "scikit-learn__scikit-learn-14141": {
        "sklearn/utils/_show_versions.py": [
            "_get_deps_info",
            "show_versions"
        ],
        "sklearn/_config.py": [],
        "sklearn/utils/__init__.py": []
    },
    "scikit-learn__scikit-learn-14496": {
        "sklearn/cluster/optics_.py": [
            "OPTICS",
            "compute_optics_graph",
            "_validate_size"
        ],
        "sklearn/neighbors/base.py": [
            "NeighborsBase"
        ],
        "sklearn/utils/fixes.py": []
    },
    "scikit-learn__scikit-learn-14629": {
        "sklearn/multioutput.py": [
            "MultiOutputClassifier",
            "_fit_estimator"
        ],
        "sklearn/model_selection/_validation.py": [
            "cross_val_predict",
            "_fit_and_predict",
            "_enforce_prediction_order"
        ],
        "sklearn/base.py": []
    },
    "scikit-learn__scikit-learn-14710": {
        "sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py": [
            "BaseHistGradientBoosting",
            "HistGradientBoostingClassifier"
        ],
        "sklearn/metrics/classification.py": [
            "_check_targets",
            "accuracy_score"
        ],
        "sklearn/base.py": [
            "ClassifierMixin.score"
        ]
    },
    "scikit-learn__scikit-learn-14894": {
        "sklearn/svm/base.py": [
            "BaseLibSVM",
            "BaseLibSVM._sparse_fit",
            "BaseLibSVM._get_coef"
        ],
        "sklearn/svm/classes.py": [
            "SVR"
        ],
        "sklearn/svm/bounds.py": []
    },
    "scikit-learn__scikit-learn-14983": {
        "sklearn/model_selection/_split.py": [
            "_RepeatedSplits",
            "RepeatedKFold",
            "RepeatedStratifiedKFold",
            "_build_repr"
        ],
        "sklearn/base.py": [
            "BaseEstimator"
        ],
        "sklearn/utils/_pprint.py": []
    },
    "scikit-learn__scikit-learn-15100": {
        "sklearn/feature_extraction/text.py": [
            "strip_accents_unicode",
            "_preprocess",
            "CountVectorizer",
            "HashingVectorizer",
            "TfidfVectorizer"
        ],
        "sklearn/feature_extraction/dict_vectorizer.py": [],
        "sklearn/compose/_column_transformer.py": []
    },
    "scikit-learn__scikit-learn-25102": {
        "sklearn/utils/_set_output.py": [
            "_wrap_in_pandas_container",
            "_wrap_data_with_container",
            "_SetOutputMixin"
        ],
        "sklearn/_config.py": [
            "set_config",
            "config_context"
        ],
        "sklearn/feature_selection/_univariate_selection.py": [
            "_BaseFilter"
        ]
    },
    "scikit-learn__scikit-learn-25232": {
        "sklearn/impute/_iterative.py": [
            "IterativeImputer",
            "IterativeImputer._initial_imputation"
        ],
        "sklearn/impute/_base.py": [
            "SimpleImputer"
        ],
        "sklearn/impute/__init__.py": []
    },
    "scikit-learn__scikit-learn-25747": {
        "sklearn/pipeline.py": [
            "FeatureUnion",
            "_transform_one",
            "_hstack"
        ],
        "sklearn/utils/_set_output.py": [
            "_wrap_in_pandas_container",
            "_wrap_data_with_container",
            "_wrap_method_output"
        ],
        "sklearn/compose/__init__.py": []
    },
    "scikit-learn__scikit-learn-25931": {
        "sklearn/ensemble/_iforest.py": [
            "IsolationForest",
            "IsolationForest.fit",
            "IsolationForest.predict",
            "IsolationForest._compute_score_samples"
        ],
        "sklearn/base.py": [
            "BaseEstimator._check_feature_names",
            "BaseEstimator._validate_data"
        ],
        "sklearn/utils/_param_validation.py": []
    },
    "scikit-learn__scikit-learn-25973": {
        "sklearn/model_selection/_validation.py": [
            "_aggregate_score_dicts",
            "cross_validate"
        ],
        "sklearn/model_selection/_split.py": [
            "_CVIterableWrapper",
            "check_cv"
        ],
        "sklearn/feature_selection/_sequential.py": [
            "SequentialFeatureSelector"
        ]
    },
    "scikit-learn__scikit-learn-26194": {
        "sklearn/metrics/_ranking.py": [
            "roc_curve",
            "_binary_clf_curve"
        ],
        "sklearn/metrics/_plot/roc_curve.py": [
            "RocCurveDisplay"
        ],
        "sklearn/metrics/_scorer.py": []
    },
    "scikit-learn__scikit-learn-26323": {
        "sklearn/compose/_column_transformer.py": [
            "ColumnTransformer",
            "make_column_transformer"
        ],
        "sklearn/utils/_set_output.py": [
            "_SetOutputMixin",
            "_safe_set_output"
        ],
        "sklearn/utils/estimator_checks.py": []
    },
    "scikit-learn__scikit-learn-9288": {
        "sklearn/cluster/k_means_.py": [
            "k_means",
            "_kmeans_single_lloyd",
            "_kmeans_single_elkan",
            "_labels_inertia",
            "_labels_inertia_precompute_dense",
            "KMeans"
        ],
        "sklearn/utils/validation.py": [
            "check_array"
        ],
        "sklearn/utils/_joblib.py": []
    },
    "sphinx-doc__sphinx-10323": {
        "sphinx/directives/code.py": [
            "LiteralIncludeReader",
            "LiteralInclude",
            "dedent_lines"
        ],
        "sphinx/transforms/post_transforms/code.py": [
            "HighlightLanguageTransform",
            "TrimDoctestFlagsTransform"
        ],
        "sphinx/util/docutils.py": [
            "SphinxDirective"
        ]
    },
    "sphinx-doc__sphinx-10435": {
        "sphinx/writers/latex.py": [
            "LaTeXTranslator",
            "visit_literal",
            "depart_literal"
        ],
        "sphinx/transforms/post_transforms/code.py": [
            "HighlightLanguageTransform",
            "HighlightLanguageVisitor"
        ],
        "sphinx/builders/latex/__init__.py": []
    },
    "sphinx-doc__sphinx-10449": {
        "sphinx/ext/autodoc/__init__.py": [
            "ClassDocumenter",
            "format_signature"
        ],
        "sphinx/ext/autodoc/typehints.py": [
            "merge_typehints",
            "augment_descriptions_with_types"
        ],
        "sphinx/ext/autodoc/directive.py": []
    },
    "sphinx-doc__sphinx-10466": {
        "sphinx/builders/gettext.py": [
            "Message",
            "Catalog",
            "MessageCatalogBuilder"
        ],
        "sphinx/util/i18n.py": [
            "CatalogInfo",
            "CatalogRepository"
        ],
        "sphinx/environment/__init__.py": []
    },
    "sphinx-doc__sphinx-10614": {
        "sphinx/ext/inheritance_diagram.py": [
            "InheritanceGraph",
            "html_visit_inheritance_diagram"
        ],
        "sphinx/builders/html/__init__.py": [
            "StandaloneHTMLBuilder"
        ],
        "sphinx/writers/html5.py": [
            "HTML5Translator"
        ]
    },
    "sphinx-doc__sphinx-10673": {
        "sphinx/environment/collectors/toctree.py": [
            "TocTreeCollector"
        ],
        "sphinx/environment/adapters/toctree.py": [
            "TocTree"
        ],
        "sphinx/builders/html/__init__.py": [
            "StandaloneHTMLBuilder",
            "gen_additional_pages",
            "write_genindex"
        ]
    },
    "sphinx-doc__sphinx-11445": {
        "sphinx/environment/collectors/title.py": [
            "TitleCollector"
        ],
        "sphinx/transforms/references.py": [
            "SphinxDomains"
        ],
        "sphinx/domains/std.py": [
            "StandardDomain",
            "warn_missing_reference"
        ]
    },
    "sphinx-doc__sphinx-11510": {
        "sphinx/environment/__init__.py": [
            "BuildEnvironment.note_included",
            "BuildEnvironment.get_and_resolve_doctree",
            "BuildEnvironment.resolve_references"
        ],
        "sphinx/application.py": [
            "Sphinx.emit",
            "Sphinx.connect"
        ],
        "sphinx/io.py": [
            "SphinxStandaloneReader",
            "SphinxFileInput",
            "create_publisher"
        ]
    },
    "sphinx-doc__sphinx-7440": {
        "sphinx/domains/std.py": [
            "Glossary",
            "StandardDomain",
            "split_term_classifiers",
            "make_glossary_term"
        ],
        "doc/conf.py": [],
        "sphinx/environment/collectors/indexentries.py": []
    },
    "sphinx-doc__sphinx-7454": {
        "sphinx/ext/autodoc/typehints.py": [
            "record_typehints",
            "merge_typehints"
        ],
        "sphinx/domains/python.py": [
            "PyXrefMixin",
            "PyObject",
            "PyFunction",
            "_parse_annotation"
        ],
        "sphinx/ext/autodoc/__init__.py": []
    },
    "sphinx-doc__sphinx-7462": {
        "sphinx/domains/python.py": [
            "_parse_annotation",
            "_parse_arglist",
            "PyObject.handle_signature",
            "PyXRefRole.process_link",
            "PyFunction"
        ],
        "sphinx/util/typing.py": [
            "stringify",
            "_stringify_py37",
            "_stringify_py36"
        ],
        "sphinx/ext/autodoc/typehints.py": [
            "record_typehints",
            "merge_typehints"
        ]
    },
    "sphinx-doc__sphinx-7590": {
        "sphinx/domains/cpp.py": [
            "DefinitionParser",
            "ASTNumberLiteral",
            "ASTCharLiteral",
            "ASTStringLiteral",
            "ASTLiteral",
            "CPPDomain"
        ],
        "sphinx/util/cfamily.py": [],
        "sphinx/ext/autodoc/typehints.py": []
    },
    "sphinx-doc__sphinx-7748": {
        "sphinx/ext/autodoc/__init__.py": [
            "DocstringSignatureMixin",
            "DocstringStripSignatureMixin",
            "MethodDocumenter"
        ],
        "sphinx/util/docstrings.py": [
            "prepare_docstring"
        ],
        "sphinx/ext/autodoc/directive.py": []
    },
    "sphinx-doc__sphinx-7757": {
        "sphinx/domains/python.py": [
            "_parse_arglist",
            "_pseudo_parse_arglist",
            "PyObject",
            "PyFunction"
        ],
        "sphinx/util/inspect.py": [
            "stringify_signature",
            "Signature"
        ],
        "sphinx/util/docfields.py": []
    },
    "sphinx-doc__sphinx-7889": {
        "sphinx/ext/autodoc/mock.py": [
            "_make_subclass",
            "_MockObject"
        ],
        "sphinx/ext/autodoc/__init__.py": [
            "GenericAliasDocumenter",
            "TypeVarDocumenter",
            "ClassDocumenter"
        ],
        "sphinx/ext/autodoc/typehints.py": [
            "record_typehints",
            "merge_typehints"
        ]
    },
    "sphinx-doc__sphinx-7910": {
        "sphinx/ext/napoleon/__init__.py": [
            "_process_docstring",
            "_skip_member"
        ],
        "sphinx/ext/autodoc/__init__.py": [
            "ClassDocumenter",
            "MethodDocumenter"
        ],
        "sphinx/util/inspect.py": [
            "unwrap",
            "unwrap_all",
            "signature",
            "getdoc"
        ]
    },
    "sphinx-doc__sphinx-7985": {
        "sphinx/builders/linkcheck.py": [
            "CheckExternalLinksBuilder",
            "check_thread",
            "process_result",
            "write_doc",
            "write_entry"
        ],
        "sphinx/environment/collectors/toctree.py": [
            "TocTreeCollector"
        ],
        "sphinx/util/nodes.py": [
            "make_refnode",
            "make_id"
        ]
    },
    "sphinx-doc__sphinx-8035": {
        "sphinx/ext/autodoc/directive.py": [
            "DummyOptionSpec",
            "DocumenterBridge",
            "process_documenter_options"
        ],
        "sphinx/ext/autodoc/__init__.py": [
            "members_option",
            "Options",
            "Documenter",
            "ModuleDocumenter",
            "ClassDocumenter"
        ],
        "sphinx/ext/autodoc/importer.py": []
    },
    "sphinx-doc__sphinx-8056": {
        "sphinx/ext/napoleon/docstring.py": [
            "NumpyDocstring",
            "GoogleDocstring",
            "_convert_numpy_type_spec",
            "_tokenize_type_spec"
        ],
        "sphinx/domains/python.py": [
            "PyTypedField",
            "PyField",
            "PyGroupedField"
        ],
        "sphinx/util/docstrings.py": [
            "prepare_docstring"
        ]
    },
    "sphinx-doc__sphinx-8120": {
        "sphinx/locale/__init__.py": [
            "init",
            "get_translator",
            "_lazy_translate",
            "get_translation"
        ],
        "sphinx/config.py": [
            "Config"
        ],
        "sphinx/util/i18n.py": [
            "CatalogInfo",
            "CatalogRepository",
            "find_catalog",
            "find_catalog_files",
            "find_catalog_source_files"
        ]
    },
    "sphinx-doc__sphinx-8265": {
        "sphinx/ext/autodoc/__init__.py": [
            "DocstringSignatureMixin",
            "FunctionDocumenter",
            "MethodDocumenter"
        ],
        "sphinx/domains/python.py": [
            "PyObject",
            "PyFunction",
            "PyMethod",
            "_parse_arglist"
        ],
        "sphinx/writers/html.py": [
            "HTMLTranslator"
        ]
    },
    "sphinx-doc__sphinx-8269": {
        "sphinx/builders/linkcheck.py": [
            "check_anchor",
            "CheckExternalLinksBuilder",
            "CheckExternalLinksBuilder.process_result",
            "CheckExternalLinksBuilder.write_entry"
        ],
        "sphinx/util/requests.py": [
            "get",
            "head"
        ],
        "sphinx/config.py": [
            "Config"
        ]
    },
    "sphinx-doc__sphinx-8459": {
        "sphinx/ext/autodoc/typehints.py": [
            "record_typehints",
            "merge_typehints",
            "modify_field_list"
        ],
        "sphinx/ext/autodoc/__init__.py": [
            "FunctionDocumenter",
            "DataDocumenter",
            "MethodDocumenter",
            "AttributeDocumenter"
        ],
        "sphinx/config.py": [
            "Config"
        ]
    },
    "sphinx-doc__sphinx-8475": {
        "sphinx/builders/linkcheck.py": [
            "CheckExternalLinksBuilder"
        ],
        "sphinx/util/requests.py": [
            "head",
            "get"
        ],
        "sphinx/util/cfamily.py": []
    },
    "sphinx-doc__sphinx-8548": {
        "sphinx/ext/autodoc/__init__.py": [
            "ClassDocumenter",
            "get_object_members",
            "document_members",
            "AttributeDocumenter",
            "can_document_member",
            "import_object"
        ],
        "sphinx/ext/autodoc/importer.py": [
            "get_class_members",
            "get_object_members",
            "ClassAttribute"
        ],
        "sphinx/ext/autodoc/directive.py": []
    },
    "sphinx-doc__sphinx-8551": {
        "sphinx/domains/python.py": [
            "PyXrefMixin",
            "PyField",
            "PyTypedField",
            "PythonDomain",
            "PythonDomain.find_obj",
            "PythonDomain.resolve_xref"
        ],
        "sphinx/util/docfields.py": [
            "Field",
            "TypedField"
        ],
        "sphinx/environment/__init__.py": []
    },
    "sphinx-doc__sphinx-8593": {
        "sphinx/ext/autodoc/__init__.py": [
            "DataDocumenter",
            "ModuleDocumenter",
            "AttributeDocumenter",
            "get_documenters",
            "autodoc_attrgetter"
        ],
        "sphinx/domains/python.py": [
            "PyVariable",
            "PyAttribute",
            "filter_meta_fields"
        ],
        "sphinx/ext/autodoc/directive.py": []
    },
    "sphinx-doc__sphinx-8595": {
        "sphinx/ext/autodoc/__init__.py": [
            "ModuleDocumenter",
            "_All",
            "_Empty"
        ],
        "sphinx/ext/autodoc/importer.py": [
            "get_module_members"
        ],
        "sphinx/ext/autodoc/directive.py": []
    },
    "sphinx-doc__sphinx-8621": {
        "sphinx/roles.py": [
            "GUILabel",
            "MenuSelection"
        ],
        "sphinx/writers/html.py": [
            "HTMLTranslator.visit_literal",
            "HTMLTranslator.depart_literal"
        ],
        "sphinx/writers/html5.py": [
            "HTML5Translator.visit_literal",
            "HTML5Translator.depart_literal"
        ]
    },
    "sphinx-doc__sphinx-8638": {
        "sphinx/ext/autodoc/__init__.py": [
            "AttributeDocumenter",
            "DataDocumenter",
            "Documenter",
            "ClassDocumenter"
        ],
        "sphinx/domains/python.py": [
            "PyVariable",
            "PyAttribute",
            "PythonDomain"
        ],
        "sphinx/ext/autodoc/directive.py": []
    },
    "sphinx-doc__sphinx-8721": {
        "sphinx/ext/viewcode.py": [
            "should_generate_module_page",
            "collect_pages",
            "setup"
        ],
        "sphinx/builders/_epub_base.py": [
            "EpubBuilder"
        ],
        "sphinx/builders/epub3.py": [
            "Epub3Builder",
            "setup"
        ]
    },
    "sphinx-doc__sphinx-9229": {
        "sphinx/ext/autodoc/__init__.py": [
            "GenericAliasMixin",
            "DataDocumenter",
            "AttributeDocumenter"
        ],
        "sphinx/domains/python.py": [
            "PyVariable",
            "PyObject"
        ],
        "sphinx/ext/autodoc/directive.py": []
    },
    "sphinx-doc__sphinx-9230": {
        "sphinx/ext/autodoc/__init__.py": [
            "PyTypedField",
            "PyField",
            "PyGroupedField"
        ],
        "sphinx/domains/python.py": [
            "_parse_annotation",
            "_parse_arglist",
            "_pseudo_parse_arglist",
            "PyObject"
        ],
        "sphinx/util/docstrings.py": []
    },
    "sphinx-doc__sphinx-9258": {
        "sphinx/ext/autodoc/typehints.py": [
            "record_typehints",
            "merge_typehints",
            "modify_field_list",
            "augment_descriptions_with_types"
        ],
        "sphinx/domains/python.py": [
            "type_to_xref",
            "_parse_annotation",
            "PyTypedField",
            "PyField",
            "PyXrefRole"
        ],
        "sphinx/util/docstrings.py": [
            "separate_metadata",
            "extract_metadata"
        ]
    },
    "sphinx-doc__sphinx-9281": {
        "sphinx/domains/python.py": [
            "_parse_arglist",
            "_parse_annotation",
            "PyObject",
            "PyFunction"
        ],
        "sphinx/ext/autodoc/__init__.py": [
            "FunctionDocumenter",
            "MethodDocumenter",
            "AttributeDocumenter",
            "format_args",
            "format_signature"
        ],
        "sphinx/ext/autodoc/directive.py": []
    },
    "sphinx-doc__sphinx-9320": {
        "sphinx/cmd/quickstart.py": [
            "term_input",
            "is_path",
            "allow_empty",
            "do_prompt",
            "ask_user",
            "valid_dir",
            "main"
        ],
        "sphinx/util/console.py": [
            "terminal_safe",
            "colorize"
        ],
        "sphinx/util/logging.py": []
    },
    "sphinx-doc__sphinx-9367": {
        "sphinx/pycode/ast.py": [
            "_UnparseVisitor",
            "visit_Tuple"
        ],
        "sphinx/pygments_styles.py": [],
        "sphinx/highlighting.py": []
    },
    "sphinx-doc__sphinx-9461": {
        "sphinx/domains/python.py": [
            "PyMethod",
            "PyProperty",
            "PyClassMethod"
        ],
        "sphinx/ext/autodoc/__init__.py": [
            "PropertyDocumenter",
            "MethodDocumenter",
            "ClassDocumenter"
        ],
        "sphinx/ext/autodoc/directive.py": []
    },
    "sphinx-doc__sphinx-9591": {
        "sphinx/ext/autodoc/typehints.py": [
            "record_typehints",
            "merge_typehints"
        ],
        "sphinx/domains/python.py": [
            "PyProperty",
            "PyXRefRole"
        ],
        "sphinx/ext/autodoc/__init__.py": [
            "PropertyDocumenter"
        ]
    },
    "sphinx-doc__sphinx-9602": {
        "sphinx/domains/python.py": [
            "type_to_xref",
            "_parse_annotation",
            "PyXrefRole",
            "PythonDomain"
        ],
        "sphinx/ext/autodoc/typehints.py": [
            "record_typehints",
            "merge_typehints"
        ],
        "sphinx/util/typing.py": [
            "stringify",
            "_stringify_py37",
            "_stringify_py36"
        ]
    },
    "sphinx-doc__sphinx-9658": {
        "sphinx/ext/autodoc/__init__.py": [
            "ClassDocumenter",
            "ClassDocumenter.add_directive_header",
            "ClassDocumenter.import_object"
        ],
        "sphinx/ext/autodoc/mock.py": [
            "_MockObject",
            "_make_subclass",
            "MockFinder",
            "MockLoader"
        ],
        "sphinx/domains/python.py": [
            "PyClasslike",
            "PyClasslike.get_signature_prefix"
        ]
    },
    "sphinx-doc__sphinx-9673": {
        "sphinx/ext/napoleon/docstring.py": [
            "GoogleDocstring",
            "NumpyDocstring"
        ],
        "sphinx/ext/autodoc/typehints.py": [
            "record_typehints",
            "merge_typehints",
            "augment_descriptions_with_types"
        ],
        "sphinx/ext/napoleon/__init__.py": [
            "Config",
            "_process_docstring"
        ]
    },
    "sphinx-doc__sphinx-9698": {
        "sphinx/domains/python.py": [
            "PyMethod",
            "PyProperty"
        ],
        "sphinx/environment/adapters/indexentries.py": [
            "IndexEntries"
        ],
        "sphinx/domains/index.py": []
    },
    "sphinx-doc__sphinx-9711": {
        "sphinx/application.py": [
            "Sphinx"
        ],
        "sphinx/extension.py": [
            "verify_needs_extensions"
        ],
        "sphinx/util/matching.py": []
    },
    "sympy__sympy-11618": {
        "sympy/geometry/point.py": [
            "Point.distance"
        ],
        "sympy/vector/point.py": [],
        "sympy/physics/vector/point.py": []
    },
    "sympy__sympy-12096": {
        "sympy/core/function.py": [
            "Function._eval_evalf"
        ],
        "sympy/core/evalf.py": [
            "evalf"
        ],
        "sympy/utilities/lambdify.py": [
            "implemented_function"
        ]
    },
    "sympy__sympy-12419": {
        "sympy/matrices/expressions/matexpr.py": [
            "Identity",
            "Identity._entry"
        ],
        "sympy/concrete/summations.py": [
            "Sum",
            "eval_sum",
            "eval_sum_direct",
            "eval_sum_symbolic"
        ],
        "sympy/assumptions/refine.py": [
            "refine"
        ]
    },
    "sympy__sympy-12481": {
        "sympy/combinatorics/permutations.py": [
            "Permutation",
            "_af_rmul",
            "_af_rmuln"
        ],
        "sympy/combinatorics/__init__.py": [],
        "sympy/combinatorics/perm_groups.py": []
    },
    "sympy__sympy-12489": {
        "sympy/combinatorics/permutations.py": [
            "_af_new",
            "Permutation"
        ],
        "sympy/core/basic.py": [
            "Basic"
        ],
        "sympy/core/singleton.py": [
            "Singleton"
        ]
    },
    "sympy__sympy-13031": {
        "sympy/matrices/common.py": [
            "MatrixShaping",
            "MatrixShaping.hstack",
            "MatrixShaping.vstack"
        ],
        "sympy/matrices/dense.py": [
            "DenseMatrix",
            "MutableDenseMatrix"
        ],
        "sympy/matrices/matrices.py": [
            "MatrixBase"
        ]
    },
    "sympy__sympy-13091": {
        "sympy/core/basic.py": [
            "Basic.__eq__",
            "Basic.__ne__",
            "Basic.__lt__",
            "Basic.__gt__",
            "Basic.__le__",
            "Basic.__ge__"
        ],
        "sympy/core/expr.py": [
            "Expr.__lt__",
            "Expr.__gt__",
            "Expr.__le__",
            "Expr.__ge__"
        ],
        "sympy/core/relational.py": [
            "Relational"
        ]
    },
    "sympy__sympy-13372": {
        "sympy/core/evalf.py": [
            "evalf",
            "evalf_mul",
            "EvalfMixin"
        ],
        "sympy/core/mul.py": [
            "Mul"
        ],
        "sympy/functions/elementary/miscellaneous.py": [
            "MinMaxBase",
            "Max"
        ]
    },
    "sympy__sympy-13480": {
        "sympy/functions/elementary/hyperbolic.py": [
            "coth",
            "coth.eval"
        ],
        "sympy/functions/elementary/trigonometric.py": [
            "tan",
            "tan.eval"
        ],
        "sympy/core/function.py": [
            "Function",
            "Function._eval_subs"
        ]
    },
    "sympy__sympy-13551": {
        "sympy/concrete/products.py": [
            "Product",
            "product"
        ],
        "sympy/core/mul.py": [
            "Mul",
            "prod"
        ],
        "sympy/functions/combinatorial/factorials.py": []
    },
    "sympy__sympy-13615": {
        "sympy/sets/sets.py": [
            "Complement",
            "FiniteSet",
            "Set._complement",
            "Set.complement",
            "Interval._complement",
            "Union._complement",
            "EmptySet._complement",
            "UniversalSet._complement",
            "FiniteSet._complement"
        ],
        "sympy/sets/contains.py": [],
        "sympy/sets/fancysets.py": []
    },
    "sympy__sympy-13647": {
        "sympy/matrices/common.py": [
            "MatrixShaping",
            "MatrixShaping._eval_col_insert",
            "MatrixShaping.col_insert"
        ],
        "sympy/matrices/dense.py": [
            "DenseMatrix",
            "MutableDenseMatrix"
        ],
        "sympy/matrices/matrices.py": [
            "MatrixBase"
        ]
    },
    "sympy__sympy-13757": {
        "sympy/polys/polytools.py": [
            "Poly",
            "Poly.__rmul__",
            "Poly.__mul__"
        ],
        "sympy/core/mul.py": [
            "Mul",
            "Mul.flatten"
        ],
        "sympy/polys/polyclasses.py": [
            "DMP",
            "DMP.__mul__",
            "DMP.__rmul__"
        ]
    },
    "sympy__sympy-13798": {
        "sympy/printing/latex.py": [
            "LatexPrinter",
            "latex"
        ],
        "sympy/printing/printer.py": [
            "Printer"
        ],
        "sympy/printing/pretty/pretty_symbology.py": []
    },
    "sympy__sympy-13852": {
        "sympy/functions/special/zeta_functions.py": [
            "polylog",
            "polylog.eval",
            "polylog._eval_expand_func"
        ],
        "sympy/core/function.py": [
            "expand_func"
        ],
        "sympy/simplify/simplify.py": [
            "nsimplify"
        ]
    },
    "sympy__sympy-13877": {
        "sympy/matrices/matrices.py": [
            "_eval_det_bareiss",
            "bareiss",
            "det"
        ],
        "sympy/matrices/expressions/determinant.py": [
            "Determinant",
            "det"
        ],
        "sympy/core/expr.py": [
            "__lt__"
        ]
    },
    "sympy__sympy-13878": {
        "sympy/stats/crv_types.py": [
            "ArcsinDistribution",
            "DagumDistribution",
            "ErlangDistribution",
            "FrechetDistribution",
            "GammaDistribution",
            "GammaInverseDistribution",
            "KumaraswamyDistribution",
            "LaplaceDistribution",
            "LogisticDistribution",
            "NakagamiDistribution",
            "StudentTDistribution",
            "UniformSumDistribution"
        ],
        "sympy/stats/crv.py": [
            "SingleContinuousDistribution._cdf",
            "SingleContinuousDistribution.cdf",
            "SingleContinuousDistribution.compute_cdf"
        ],
        "sympy/stats/rv_interface.py": []
    },
    "sympy__sympy-13974": {
        "sympy/physics/quantum/tensorproduct.py": [
            "TensorProduct",
            "tensor_product_simp",
            "tensor_product_simp_Mul"
        ],
        "sympy/physics/quantum/operator.py": [],
        "sympy/physics/quantum/qexpr.py": []
    },
    "sympy__sympy-14248": {
        "sympy/printing/str.py": [
            "StrPrinter",
            "_print_Add",
            "_print_MatAdd"
        ],
        "sympy/printing/pretty/pretty.py": [
            "PrettyPrinter",
            "_print_Add",
            "_print_MatAdd"
        ],
        "sympy/printing/latex.py": [
            "LatexPrinter",
            "_print_Add",
            "_print_MatAdd"
        ]
    },
    "sympy__sympy-14531": {
        "sympy/printing/str.py": [
            "StrPrinter",
            "sstr"
        ],
        "sympy/printing/python.py": [
            "PythonPrinter",
            "python",
            "print_python"
        ],
        "sympy/printing/printer.py": [
            "Printer"
        ]
    },
    "sympy__sympy-14711": {
        "sympy/physics/vector/vector.py": [
            "Vector.__add__",
            "Vector.__mul__",
            "_check_vector"
        ],
        "sympy/physics/vector/__init__.py": [],
        "sympy/physics/vector/functions.py": []
    },
    "sympy__sympy-14976": {
        "sympy/utilities/lambdify.py": [
            "lambdify",
            "_EvaluatorPrinter"
        ],
        "sympy/printing/lambdarepr.py": [
            "LambdaPrinter"
        ],
        "sympy/core/numbers.py": [
            "Rational"
        ]
    },
    "sympy__sympy-15017": {
        "sympy/tensor/array/ndim_array.py": [
            "NDimArray.__len__",
            "NDimArray.__iter__"
        ],
        "sympy/tensor/array/dense_ndim_array.py": [
            "DenseNDimArray.__iter__"
        ],
        "sympy/tensor/array/__init__.py": []
    },
    "sympy__sympy-15345": {
        "sympy/printing/mathematica.py": [
            "MCodePrinter",
            "mathematica_code"
        ],
        "sympy/printing/printer.py": [],
        "sympy/core/function.py": []
    },
    "sympy__sympy-15349": {
        "sympy/algebras/quaternion.py": [
            "Quaternion.to_rotation_matrix"
        ],
        "sympy/physics/vector/vector.py": [],
        "sympy/physics/mechanics/functions.py": []
    },
    "sympy__sympy-15599": {
        "sympy/core/mod.py": [
            "Mod"
        ],
        "sympy/core/numbers.py": [
            "Integer",
            "Rational"
        ],
        "sympy/core/expr.py": [
            "Expr"
        ]
    },
    "sympy__sympy-15809": {
        "sympy/functions/elementary/miscellaneous.py": [
            "MinMaxBase",
            "Max",
            "Min"
        ],
        "sympy/core/numbers.py": [
            "Infinity",
            "NegativeInfinity"
        ],
        "sympy/core/function.py": []
    },
    "sympy__sympy-15875": {
        "sympy/core/add.py": [
            "Add._eval_is_zero"
        ],
        "sympy/core/numbers.py": [
            "Number",
            "Zero",
            "ComplexInfinity"
        ],
        "sympy/core/expr.py": []
    },
    "sympy__sympy-15976": {
        "sympy/printing/mathml.py": [
            "MathMLPresentationPrinter",
            "MathMLPresentationPrinter._print_Symbol",
            "mathml"
        ],
        "sympy/core/symbol.py": [
            "Symbol"
        ],
        "sympy/printing/printer.py": []
    },
    "sympy__sympy-16450": {
        "sympy/core/assumptions.py": [
            "StdFactKB"
        ],
        "sympy/assumptions/ask.py": [
            "AssumptionKeys",
            "ask",
            "ask_full_inference"
        ],
        "sympy/assumptions/assume.py": [
            "AppliedPredicate",
            "Predicate"
        ]
    },
    "sympy__sympy-16597": {
        "sympy/core/assumptions.py": [
            "StdFactKB"
        ],
        "sympy/core/symbol.py": [
            "Symbol"
        ],
        "sympy/assumptions/handlers/common.py": [
            "CommonHandler"
        ]
    },
    "sympy__sympy-16766": {
        "sympy/printing/pycode.py": [
            "PythonCodePrinter",
            "pycode"
        ],
        "sympy/printing/codeprinter.py": [
            "CodePrinter"
        ],
        "sympy/printing/python.py": []
    },
    "sympy__sympy-16792": {
        "sympy/utilities/autowrap.py": [
            "CythonCodeWrapper",
            "autowrap"
        ],
        "sympy/utilities/codegen.py": [
            "CCodeGen",
            "get_prototype",
            "_declare_arguments",
            "make_routine"
        ],
        "sympy/codegen/cnodes.py": []
    },
    "sympy__sympy-16886": {
        "sympy/crypto/crypto.py": [
            "encode_morse",
            "decode_morse"
        ],
        "sympy/crypto/__init__.py": [],
        "sympy/simplify/trigsimp.py": []
    },
    "sympy__sympy-17139": {
        "sympy/simplify/fu.py": [
            "_TR56",
            "TR6"
        ],
        "sympy/simplify/trigsimp.py": [
            "trigsimp",
            "futrig",
            "_futrig"
        ],
        "sympy/core/expr.py": [
            "Expr.__lt__"
        ]
    },
    "sympy__sympy-17318": {
        "sympy/simplify/sqrtdenest.py": [
            "sqrtdenest",
            "_sqrtdenest0",
            "_sqrtdenest1",
            "_sqrt_match"
        ],
        "sympy/simplify/radsimp.py": [
            "split_surds",
            "_split_gcd"
        ],
        "sympy/simplify/simplify.py": []
    },
    "sympy__sympy-17630": {
        "sympy/matrices/expressions/blockmatrix.py": [
            "BlockMatrix",
            "block_collapse",
            "bc_matmul"
        ],
        "sympy/core/numbers.py": [
            "Zero"
        ],
        "sympy/matrices/expressions/matmul.py": [
            "MatMul",
            "any_zeros"
        ]
    },
    "sympy__sympy-17655": {
        "sympy/geometry/point.py": [
            "Point.__add__",
            "Point.__mul__",
            "Point.__rmul__",
            "Point._normalize_dimension"
        ],
        "sympy/geometry/entity.py": [
            "GeometryEntity.__radd__",
            "GeometryEntity.__rmul__"
        ],
        "sympy/core/mul.py": [
            "Mul"
        ]
    },
    "sympy__sympy-18189": {
        "sympy/solvers/diophantine.py": [
            "diophantine",
            "_diop_general_sum_of_even_powers",
            "_diop_general_sum_of_squares",
            "diop_solve",
            "classify_diop",
            "_sorted_tuple"
        ],
        "sympy/polys/monomials.py": [
            "itermonomials",
            "Monomial"
        ],
        "sympy/solvers/solvers.py": [
            "recast_to_symbols"
        ]
    },
    "sympy__sympy-18199": {
        "sympy/ntheory/residue_ntheory.py": [
            "nthroot_mod",
            "_nthroot_mod1",
            "_nthroot_mod2"
        ],
        "sympy/ntheory/__init__.py": [],
        "sympy/simplify/simplify.py": []
    },
    "sympy__sympy-18211": {
        "sympy/solvers/solveset.py": [
            "_solve_trig",
            "_solve_trig1",
            "_solve_trig2",
            "_solveset",
            "solveset"
        ],
        "sympy/core/relational.py": [
            "Equality",
            "Equality._eval_as_set"
        ],
        "sympy/sets/conditionset.py": []
    },
    "sympy__sympy-18698": {
        "sympy/polys/sqfreetools.py": [
            "dup_sqf_list",
            "dmp_sqf_list",
            "dup_sqf_list_include",
            "dmp_sqf_list_include"
        ],
        "sympy/polys/polytools.py": [
            "sqf_list",
            "sqf",
            "Poly.sqf_list",
            "Poly.sqf_list_include"
        ],
        "sympy/polys/factortools.py": [
            "dup_factor_list",
            "dmp_factor_list",
            "dup_factor_list_include",
            "dmp_factor_list_include"
        ]
    },
    "sympy__sympy-18763": {
        "sympy/printing/latex.py": [
            "LatexPrinter._print_Subs",
            "LatexPrinter.parenthesize"
        ],
        "sympy/printing/precedence.py": [],
        "sympy/printing/printer.py": []
    },
    "sympy__sympy-19040": {
        "sympy/polys/polytools.py": [
            "factor",
            "factor_list",
            "_generic_factor",
            "_generic_factor_list",
            "_symbolic_factor",
            "_symbolic_factor_list"
        ],
        "sympy/polys/factortools.py": [
            "dup_ext_factor",
            "dmp_ext_factor",
            "dup_factor_list",
            "dmp_factor_list"
        ],
        "sympy/polys/domains/algebraicfield.py": [
            "AlgebraicField"
        ]
    },
    "sympy__sympy-19346": {
        "sympy/printing/repr.py": [
            "ReprPrinter",
            "srepr"
        ],
        "sympy/printing/printer.py": [
            "Printer"
        ],
        "sympy/core/basic.py": [
            "Basic"
        ]
    },
    "sympy__sympy-19495": {
        "sympy/sets/conditionset.py": [
            "ConditionSet",
            "ConditionSet._eval_subs"
        ],
        "sympy/sets/sets.py": [
            "Set",
            "imageset"
        ],
        "sympy/core/basic.py": [
            "Basic.subs",
            "Basic._subs",
            "Basic._eval_subs",
            "Basic.xreplace"
        ]
    },
    "sympy__sympy-19637": {
        "sympy/core/sympify.py": [
            "kernS",
            "sympify",
            "_sympify"
        ],
        "sympy/core/basic.py": [],
        "sympy/core/core.py": []
    },
    "sympy__sympy-19783": {
        "sympy/physics/quantum/dagger.py": [
            "Dagger"
        ],
        "sympy/physics/quantum/operator.py": [
            "IdentityOperator",
            "Operator",
            "Operator.__mul__"
        ],
        "sympy/physics/quantum/identitysearch.py": []
    },
    "sympy__sympy-19954": {
        "sympy/combinatorics/perm_groups.py": [
            "PermutationGroup.minimal_blocks",
            "PermutationGroup.sylow_subgroup",
            "PermutationGroup._p_elements_group",
            "PermutationGroup._sylow_alt_sym"
        ],
        "sympy/combinatorics/named_groups.py": [
            "DihedralGroup"
        ],
        "sympy/combinatorics/group_constructs.py": []
    },
    "sympy__sympy-20154": {
        "sympy/utilities/iterables.py": [
            "partitions"
        ],
        "sympy/combinatorics/partitions.py": [
            "IntegerPartition",
            "Partition"
        ],
        "sympy/utilities/enumerative.py": [
            "MultisetPartitionTraverser"
        ]
    },
    "sympy__sympy-20428": {
        "sympy/polys/polytools.py": [
            "Poly.clear_denoms",
            "Poly.is_zero",
            "Poly.primitive"
        ],
        "sympy/polys/densebasic.py": [
            "dmp_strip",
            "dup_strip"
        ],
        "sympy/polys/polyclasses.py": [
            "DMP"
        ]
    },
    "sympy__sympy-20438": {
        "sympy/sets/handlers/issubset.py": [
            "is_subset_sets"
        ],
        "sympy/sets/sets.py": [
            "ProductSet",
            "FiniteSet",
            "Set",
            "Set.is_subset",
            "Set._eval_is_subset"
        ],
        "sympy/core/relational.py": [
            "Complement",
            "Complement.equals"
        ]
    },
    "sympy__sympy-20590": {
        "sympy/core/symbol.py": [
            "Symbol",
            "Dummy",
            "Wild",
            "Str"
        ],
        "sympy/core/basic.py": [
            "Basic",
            "Atom"
        ],
        "sympy/core/__init__.py": []
    },
    "sympy__sympy-20801": {
        "sympy/core/relational.py": [
            "Equality",
            "_eval_is_eq"
        ],
        "sympy/core/expr.py": [
            "Expr"
        ],
        "sympy/core/numbers.py": [
            "Float",
            "Zero",
            "One",
            "NegativeOne",
            "Infinity",
            "NegativeInfinity",
            "NaN",
            "ComplexInfinity",
            "NumberSymbol"
        ]
    },
    "sympy__sympy-20916": {
        "sympy/printing/pretty/pretty_symbology.py": [
            "GSUB"
        ],
        "sympy/printing/pretty/pretty.py": [
            "PrettyPrinter"
        ],
        "sympy/printing/pretty/stringpict.py": [
            "prettyForm"
        ]
    },
    "sympy__sympy-21379": {
        "sympy/core/basic.py": [
            "Basic.subs",
            "Basic._subs",
            "Basic._eval_subs"
        ],
        "sympy/functions/elementary/piecewise.py": [
            "Piecewise",
            "Piecewise._eval_subs",
            "piecewise_fold"
        ],
        "sympy/functions/elementary/hyperbolic.py": [
            "sinh",
            "cosh",
            "tanh"
        ]
    },
    "sympy__sympy-21596": {
        "sympy/sets/handlers/intersection.py": [
            "intersection_sets(ImageSet, Set)",
            "intersection_sets(Set, Set)"
        ],
        "sympy/sets/sets.py": [
            "ImageSet",
            "Set",
            "Intersection",
            "Contains.eval"
        ],
        "sympy/sets/contains.py": []
    },
    "sympy__sympy-21612": {
        "sympy/parsing/latex/_parse_latex_antlr.py": [
            "convert_frac",
            "convert_mp"
        ],
        "sympy/parsing/latex/_antlr/latexparser.py": [
            "LaTeXParser"
        ],
        "sympy/parsing/latex/errors.py": []
    },
    "sympy__sympy-21847": {
        "sympy/polys/monomials.py": [
            "itermonomials"
        ],
        "sympy/polys/orderings.py": [],
        "sympy/polys/multivariate_resultants.py": []
    },
    "sympy__sympy-21930": {
        "sympy/physics/secondquant.py": [
            "CreateBoson",
            "AnnihilateBoson",
            "Commutator"
        ],
        "sympy/printing/latex.py": [
            "LatexPrinter"
        ],
        "sympy/printing/printer.py": []
    },
    "sympy__sympy-22080": {
        "sympy/utilities/lambdify.py": [
            "lambdify",
            "_EvaluatorPrinter"
        ],
        "sympy/core/mod.py": [
            "Mod"
        ],
        "sympy/printing/python.py": [
            "PythonPrinter"
        ]
    },
    "sympy__sympy-22456": {
        "sympy/codegen/ast.py": [
            "String",
            "Token",
            "Basic"
        ],
        "sympy/core/basic.py": [
            "Basic.__new__",
            "Basic.__eq__",
            "Basic.func",
            "Basic.args"
        ],
        "sympy/core/expr.py": [
            "Expr"
        ]
    },
    "sympy__sympy-22714": {
        "sympy/core/sympify.py": [
            "sympify"
        ],
        "sympy/parsing/sympy_parser.py": [
            "parse_expr",
            "eval_expr",
            "EvaluateFalseTransformer"
        ],
        "sympy/geometry/point.py": [
            "Point",
            "Point2D"
        ]
    },
    "sympy__sympy-22914": {
        "sympy/printing/pycode.py": [
            "PythonCodePrinter"
        ],
        "sympy/printing/python.py": [],
        "sympy/printing/codeprinter.py": []
    },
    "sympy__sympy-23262": {
        "sympy/utilities/lambdify.py": [
            "_EvaluatorPrinter",
            "lambdify",
            "lambdastr"
        ],
        "sympy/printing/pycode.py": [
            "AbstractPythonCodePrinter",
            "PythonCodePrinter",
            "pycode"
        ],
        "sympy/printing/python.py": [
            "PythonPrinter",
            "python",
            "print_python"
        ]
    },
    "sympy__sympy-23413": {
        "sympy/matrices/normalforms.py": [
            "hermite_normal_form",
            "_to_domain"
        ],
        "sympy/matrices/matrices.py": [
            "MatrixReductions",
            "MatrixReductions.rank",
            "MatrixReductions.rref"
        ],
        "sympy/matrices/dense.py": [
            "DenseMatrix"
        ]
    },
    "sympy__sympy-23534": {
        "sympy/core/symbol.py": [
            "symbols",
            "Symbol"
        ],
        "sympy/core/function.py": [
            "Function",
            "UndefinedFunction",
            "FunctionClass"
        ],
        "sympy/core/sympify.py": []
    },
    "sympy__sympy-23824": {
        "sympy/physics/hep/gamma_matrices.py": [
            "kahane_simplify",
            "GammaMatrix"
        ],
        "sympy/physics/hep/__init__.py": [],
        "sympy/simplify/gammasimp.py": []
    },
    "sympy__sympy-23950": {
        "sympy/sets/contains.py": [
            "Contains",
            "Contains.as_set"
        ],
        "sympy/functions/elementary/piecewise.py": [
            "Piecewise",
            "Piecewise.eval"
        ],
        "sympy/sets/sets.py": [
            "Set"
        ]
    },
    "sympy__sympy-24066": {
        "sympy/physics/units/systems/si.py": [
            "SI"
        ],
        "sympy/physics/units/dimensions.py": [
            "DimensionSystem"
        ],
        "sympy/physics/units/quantities.py": [
            "Quantity._collect_factor_and_dimension"
        ]
    },
    "sympy__sympy-24213": {
        "sympy/physics/units/unitsystem.py": [
            "UnitSystem._collect_factor_and_dimension"
        ],
        "sympy/physics/units/dimensions.py": [
            "DimensionSystem.equivalent_dims"
        ],
        "sympy/physics/units/quantities.py": []
    },
    "sympy__sympy-24443": {
        "sympy/combinatorics/homomorphisms.py": [
            "_check_homomorphism",
            "homomorphism",
            "GroupHomomorphism"
        ],
        "sympy/combinatorics/perm_groups.py": [
            "PermutationGroup"
        ],
        "sympy/combinatorics/fp_groups.py": []
    },
    "sympy__sympy-24539": {
        "sympy/polys/rings.py": [
            "PolyElement.as_expr",
            "PolyRing"
        ],
        "sympy/polys/polytools.py": [
            "Poly.as_expr"
        ],
        "sympy/polys/solvers.py": []
    },
    "sympy__sympy-24562": {
        "sympy/core/numbers.py": [
            "Rational",
            "_decimal_to_Rational_prec",
            "_literal_float",
            "sympify_fractions"
        ],
        "sympy/core/sympify.py": [
            "sympify",
            "_sympify"
        ],
        "sympy/core/expr.py": []
    },
    "sympy__sympy-24661": {
        "sympy/core/relational.py": [
            "Relational",
            "_Inequality",
            "StrictLessThan",
            "StrictGreaterThan",
            "LessThan",
            "GreaterThan"
        ],
        "sympy/parsing/sympy_parser.py": [
            "parse_expr",
            "EvaluateFalseTransformer"
        ],
        "sympy/core/sympify.py": [
            "sympify"
        ]
    }
}