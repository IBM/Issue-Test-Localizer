[
  {
    "instance_id": "sympy__sympy-15678",
    "file_function": {
      "sympy/geometry/tests/test_util.py": [
        "test_idiff"
      ],
      "sympy/utilities/tests/test_wester.py": [
        "test_U8"
      ]
    }
  },
  {
    "instance_id": "pytest-dev__pytest-5227",
    "file_function": {
      "testing/logging/test_formatter.py": [
        "test_coloredlogformatter"
      ],
      "testing/logging/test_reporting.py": [
        "section"
      ]
    }
  },
  {
    "instance_id": "sympy__sympy-11400",
    "file_function": {
      "sympy/printing/tests/test_ccode.py": [
        "test_ccode_Indexed"
      ]
    }
  },
  {
    "instance_id": "pallets__flask-4045",
    "file_function": {
      "tests/test_async.py": [
        "_async_app",
        "index"
      ],
      "tests/test_cli.py": [
        "test_cli_blueprints",
        "test_cli_empty"
      ]
    }
  },
  {
    "instance_id": "sympy__sympy-21627",
    "file_function": {
      "sympy/solvers/tests/test_solveset.py": [
        "test_solve_hyperbolic"
      ],
      "sympy/core/tests/test_args.py": [
        "test_sympy__functions__elementary__hyperbolic__acosh",
        "test_sympy__functions__elementary__hyperbolic__cosh"
      ],
      "sympy/simplify/tests/test_trigsimp.py": [
        "test_hyperbolic_simp"
      ],
      "sympy/functions/elementary/tests/test_hyperbolic.py": [
        "test_cosh",
        "test_acosh"
      ],
      "sympy/plotting/intervalmath/tests/test_interval_functions.py": [
        "test_cosh",
        "test_acosh"
      ],
      "sympy/integrals/tests/test_heurisch.py": [
        "test_heurisch_hyperbolic"
      ],
      "sympy/polys/tests/test_ring_series.py": [
        "test_cosh"
      ]
    }
  },
  {
    "instance_id": "pytest-dev__pytest-5103",
    "file_function": {
      "testing/test_assertion.py": [
        "callequal",
        "test_reprcompare_notin",
        "test_reprcompare_whitespaces"
      ],
      "testing/test_assertrewrite.py": [
        "rewrite",
        "test_remember_rewritten_modules",
        "spy_write_pyc",
        "spy_imp_find_module"
      ],
      "src/_pytest/pytester.py": [
        "inline_run",
        "revert_warn_already_imported"
      ]
    }
  },
  {
    "instance_id": "django__django-16255",
    "file_function": {
      "tests/sitemaps_tests/test_http.py": [
        "test_sitemap_get_urls_no_site_1",
        "test_sitemap_get_urls_no_site_2",
        "test_sitemap_item"
      ],
      "tests/sitemaps_tests/test_generic.py": [
        "test_generic_sitemap_attributes",
        "test_get_protocol_defined_in_constructor",
        "test_get_protocol_passed_as_argument",
        "test_get_protocol_default",
        "test_get_protocol_default_warning"
      ]
    }
  },
  {
    "instance_id": "sympy__sympy-22840",
    "file_function": {
      "sympy/printing/tests/test_llvmjit.py": [
        "test_cse"
      ],
      "sympy/simplify/tests/test_cse.py": [
        "test_preprocess_for_cse",
        "test_postprocess_for_cse",
        "test_cse_single",
        "test_nested_substitution",
        "test_non_commutative_cse",
        "test_multiple_expressions",
        "test_postprocess",
        "test_issue_4499"
      ],
      "sympy/codegen/tests/test_ast.py": [
        "test_CodeBlock_cse"
      ]
    }
  },
  {
    "instance_id": "django__django-13448",
    "file_function": {
      "tests/backends/base/test_creation.py": [
        "test_default_name",
        "test_custom_test_name",
        "test_custom_test_name_with_test_prefix"
      ]
    }
  },
  {
    "instance_id": "pytest-dev__pytest-5221",
    "file_function": {
      "testing/test_junitxml.py": [
        "test_unicode_issue368"
      ],
      "testing/test_terminal.py": [
        "test_internalerror",
        "test_writeline",
        "test_show_runtest_logstart"
      ],
      "testing/test_conftest.py": [
        "basedir"
      ],
      "testing/test_nose.py": [
        "f"
      ],
      "testing/test_doctest.py": [
        "makeit"
      ],
      "testing/test_pathlib.py": [
        "match_"
      ],
      "src/_pytest/pytester.py": [
        "getnode"
      ],
      "testing/example_scripts/unittest/test_parametrized_fixture_error_message.py": [
        "two"
      ]
    }
  },
  {
    "instance_id": "sympy__sympy-22005",
    "file_function": {
      "sympy/solvers/tests/test_polysys.py": [
        "test_solve_poly_system",
        "test_solve_biquadratic",
        "test_solve_issue_3686"
      ]
    }
  }
]