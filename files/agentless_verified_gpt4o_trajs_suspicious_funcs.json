{
    "astropy__astropy-12907": {
        "astropy/modeling/separable.py": [
            "separability_matrix",
            "_coord_matrix",
            "_cstack",
            "_cdot",
            "_separable"
        ],
        "astropy/modeling/core.py": [
            "CompoundModel",
            "CompoundModel._make_leaflist",
            "CompoundModel.traverse_postorder",
            "CompoundModel._format_expression",
            "CompoundModel._format_components",
            "CompoundModel._set_sub_models_and_parameter_units"
        ],
        "astropy/modeling/models.py": []
    },
    "astropy__astropy-13033": {
        "astropy/timeseries/core.py": [
            "autocheck_required_columns",
            "BaseTimeSeries._check_required_columns",
            "BaseTimeSeries._delay_required_column_checks"
        ],
        "astropy/timeseries/binned.py": [
            "BinnedTimeSeries"
        ],
        "astropy/timeseries/downsample.py": [
            "aggregate_downsample"
        ]
    },
    "astropy__astropy-13236": {
        "astropy/table/ndarray_mixin.py": [
            "NdarrayMixin"
        ],
        "astropy/table/column.py": [
            "Column",
            "BaseColumn"
        ],
        "astropy/table/table.py": [
            "Table._convert_data_to_col",
            "Table._convert_col_for_table",
            "Table.add_column",
            "Table.add_columns",
            "Table.replace_column"
        ]
    },
    "astropy__astropy-13398": {
        "astropy/coordinates/builtin_frames/itrs.py": [
            "ITRS"
        ],
        "astropy/coordinates/builtin_frames/altaz.py": [
            "AltAz"
        ],
        "astropy/coordinates/builtin_frames/hadec.py": [
            "HADec"
        ]
    },
    "astropy__astropy-13453": {
        "astropy/io/ascii/core.py": [
            "BaseData",
            "BaseData._set_col_formats"
        ],
        "astropy/io/ascii/ui.py": [
            "write"
        ],
        "astropy/io/ascii/html.py": [
            "HTML",
            "HTML.write"
        ]
    },
    "astropy__astropy-13579": {
        "astropy/wcs/wcsapi/sliced_low_level_wcs.py": [
            "SlicedLowLevelWCS"
        ],
        "astropy/wcs/wcsapi/high_level_wcs_wrapper.py": [
            "HighLevelWCSWrapper"
        ],
        "astropy/wcs/wcsapi/utils.py": [
            "wcs_to_celestial_frame"
        ]
    },
    "astropy__astropy-13977": {
        "astropy/units/quantity.py": [
            "Quantity.__array_ufunc__"
        ],
        "astropy/units/core.py": [
            "_condition_arg"
        ],
        "astropy/units/utils.py": []
    },
    "astropy__astropy-14096": {
        "astropy/coordinates/sky_coordinate.py": [
            "SkyCoord.__getattr__",
            "SkyCoord.__setattr__",
            "SkyCoord.__delattr__"
        ],
        "astropy/coordinates/__init__.py": [],
        "astropy/coordinates/errors.py": []
    },
    "astropy__astropy-14182": {
        "astropy/io/ascii/rst.py": [
            "RST",
            "SimpleRSTHeader",
            "SimpleRSTData"
        ],
        "astropy/io/ascii/ui.py": [
            "get_writer",
            "write"
        ],
        "astropy/io/ascii/core.py": [
            "_get_writer"
        ]
    },
    "astropy__astropy-14309": {
        "astropy/io/fits/connect.py": [
            "is_fits"
        ],
        "astropy/io/registry/base.py": [
            "_UnifiedIORegistryBase.identify_format"
        ],
        "astropy/io/registry/compat.py": [
            "_make_io_func"
        ]
    },
    "astropy__astropy-14365": {
        "astropy/io/ascii/qdp.py": [
            "_line_type",
            "_get_type_from_list_of_lines",
            "_get_lines_from_file",
            "_interpret_err_lines",
            "_get_tables_from_qdp_file",
            "_understand_err_col",
            "_read_table_qdp",
            "_write_table_qdp",
            "QDPSplitter",
            "QDPHeader",
            "QDPData",
            "QDP"
        ],
        "astropy/io/ascii/core.py": [
            "BaseSplitter",
            "DefaultSplitter",
            "BaseHeader",
            "BaseData",
            "BaseReader"
        ],
        "astropy/io/ascii/connect.py": [
            "io_read",
            "io_write",
            "io_identify"
        ]
    },
    "astropy__astropy-14369": {
        "astropy/io/ascii/mrt.py": [
            "MrtHeader",
            "MrtData",
            "Mrt"
        ],
        "astropy/units/cds.py": [
            "_initialize_module",
            "enable"
        ],
        "astropy/io/ascii/cds.py": [
            "CdsHeader",
            "CdsData",
            "Cds"
        ]
    },
    "astropy__astropy-14508": {
        "astropy/io/fits/card.py": [
            "Card._format_float",
            "Card._format_value",
            "_format_float",
            "_format_value"
        ],
        "astropy/io/fits/header.py": [
            "Header"
        ],
        "astropy/io/fits/verify.py": []
    },
    "astropy__astropy-14539": {
        "astropy/io/fits/diff.py": [
            "FITSDiff",
            "HDUDiff",
            "TableDataDiff"
        ],
        "astropy/io/fits/column.py": [
            "Column",
            "ColDefs",
            "_FormatP",
            "_FormatQ",
            "_VLF"
        ],
        "astropy/io/fits/file.py": [
            "_File"
        ]
    },
    "astropy__astropy-14598": {
        "astropy/io/fits/card.py": [
            "Card",
            "_format_value",
            "_parse_value"
        ],
        "astropy/io/fits/header.py": [
            "Header",
            "fromstring",
            "tostring"
        ],
        "astropy/io/fits/util.py": []
    },
    "astropy__astropy-14995": {
        "astropy/nddata/nddata.py": [
            "NDData"
        ],
        "astropy/nddata/nddata_withmixins.py": [
            "NDDataRef"
        ],
        "astropy/nddata/nddata_base.py": [
            "NDDataBase"
        ]
    },
    "astropy__astropy-7166": {
        "astropy/utils/misc.py": [
            "InheritDocstrings"
        ],
        "astropy/utils/decorators.py": [],
        "astropy/utils/introspection.py": []
    },
    "astropy__astropy-7336": {
        "astropy/units/decorators.py": [
            "QuantityInput.__call__"
        ],
        "astropy/utils/decorators.py": [
            "make_function_with_signature"
        ],
        "astropy/units/core.py": []
    },
    "astropy__astropy-7606": {
        "astropy/units/core.py": [
            "Unit.__eq__",
            "_UnitMetaClass.__call__"
        ],
        "astropy/units/utils.py": [],
        "astropy/units/__init__.py": []
    },
    "astropy__astropy-7671": {
        "astropy/utils/introspection.py": [
            "minversion"
        ],
        "astropy/utils/setup_package.py": [
            "get_extensions",
            "get_package_data"
        ],
        "astropy/utils/__init__.py": []
    },
    "astropy__astropy-8707": {
        "astropy/io/fits/header.py": [
            "Header.fromstring",
            "Header.fromfile"
        ],
        "astropy/io/fits/card.py": [
            "Card.fromstring"
        ],
        "astropy/io/fits/file.py": []
    },
    "astropy__astropy-8872": {
        "astropy/units/quantity.py": [
            "Quantity.__new__",
            "Quantity.__array_finalize__",
            "Quantity.__array_wrap__",
            "Quantity.__array_ufunc__",
            "Quantity._result_as_quantity"
        ],
        "astropy/units/core.py": [
            "UnitBase.to",
            "UnitBase._get_converter",
            "UnitBase._apply_equivalencies",
            "UnitBase._to",
            "UnitBase.decompose",
            "UnitBase._compose",
            "UnitBase.compose",
            "UnitBase.to_system",
            "CompositeUnit.__init__",
            "CompositeUnit.decompose",
            "CompositeUnit._expand_and_gather",
            "CompositeUnit.is_unity"
        ],
        "astropy/units/utils.py": [
            "quantity_asanyarray"
        ]
    },
    "django__django-10097": {
        "django/core/validators.py": [
            "URLValidator",
            "_lazy_re_compile"
        ],
        "django/conf/global_settings.py": [],
        "django/conf/urls/__init__.py": []
    },
    "django__django-10554": {
        "django/db/models/query.py": [
            "QuerySet.union",
            "QuerySet.order_by",
            "QuerySet._combinator_query",
            "QuerySet._fetch_all",
            "QuerySet._clone"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLCompiler.execute_sql",
            "SQLCompiler.get_combinator_sql",
            "SQLCompiler.get_order_by"
        ],
        "django/db/models/sql/query.py": [
            "Query.combine",
            "Query.add_ordering",
            "Query.clear_ordering"
        ]
    },
    "django__django-10880": {
        "django/db/models/expressions.py": [
            "Case",
            "Case.as_sql"
        ],
        "django/db/models/aggregates.py": [
            "Count",
            "Count.as_sql"
        ],
        "django/db/models/query.py": []
    },
    "django__django-10914": {
        "django/core/files/storage.py": [
            "FileSystemStorage"
        ],
        "django/conf/global_settings.py": [],
        "django/core/files/uploadhandler.py": []
    },
    "django__django-10973": {
        "django/db/backends/postgresql/client.py": [
            "DatabaseClient"
        ],
        "django/db/backends/postgresql/base.py": [
            "DatabaseWrapper"
        ],
        "django/db/backends/postgresql/utils.py": []
    },
    "django__django-10999": {
        "django/utils/dateparse.py": [
            "parse_duration"
        ],
        "django/utils/duration.py": [],
        "django/utils/regex_helper.py": []
    },
    "django__django-11066": {
        "django/contrib/contenttypes/management/__init__.py": [
            "RenameContentType._rename",
            "RenameContentType.rename_forward",
            "RenameContentType.rename_backward",
            "inject_rename_contenttypes_operations",
            "get_contenttypes_and_models",
            "create_contenttypes"
        ],
        "django/contrib/contenttypes/models.py": [
            "ContentTypeManager",
            "ContentType"
        ],
        "django/db/transaction.py": [
            "atomic"
        ]
    },
    "django__django-11087": {
        "django/db/models/deletion.py": [
            "Collector"
        ],
        "django/db/models/query.py": [
            "QuerySet.delete",
            "QuerySet._raw_delete",
            "QuerySet._fetch_all"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLDeleteCompiler",
            "SQLCompiler.execute_sql"
        ]
    },
    "django__django-11095": {
        "django/contrib/admin/options.py": [
            "ModelAdmin",
            "ModelAdmin.get_inline_instances"
        ],
        "django/contrib/admin/views/main.py": [],
        "django/contrib/admin/forms.py": []
    },
    "django__django-11099": {
        "django/contrib/auth/validators.py": [
            "ASCIIUsernameValidator",
            "UnicodeUsernameValidator"
        ],
        "django/core/validators.py": [],
        "django/contrib/auth/migrations/0008_alter_user_username_max_length.py": []
    },
    "django__django-11119": {
        "django/template/engine.py": [
            "Engine.render_to_string"
        ],
        "django/template/context.py": [
            "Context",
            "RequestContext",
            "make_context"
        ],
        "django/template/base.py": []
    },
    "django__django-11133": {
        "django/http/response.py": [
            "HttpResponseBase",
            "HttpResponse"
        ],
        "django/http/__init__.py": [],
        "django/db/backends/postgresql/base.py": []
    },
    "django__django-11138": {
        "django/db/backends/mysql/operations.py": [
            "DatabaseOperations._convert_field_to_tz",
            "DatabaseOperations.datetime_cast_date_sql",
            "DatabaseOperations.datetime_cast_time_sql",
            "DatabaseOperations.datetime_extract_sql",
            "DatabaseOperations.datetime_trunc_sql"
        ],
        "django/db/backends/oracle/operations.py": [
            "DatabaseOperations._convert_field_to_tz",
            "DatabaseOperations.datetime_cast_date_sql",
            "DatabaseOperations.datetime_cast_time_sql",
            "DatabaseOperations.datetime_extract_sql",
            "DatabaseOperations.datetime_trunc_sql"
        ],
        "django/db/backends/sqlite3/operations.py": [
            "DatabaseOperations._convert_tzname_to_sql",
            "DatabaseOperations.datetime_cast_date_sql",
            "DatabaseOperations.datetime_cast_time_sql",
            "DatabaseOperations.datetime_extract_sql",
            "DatabaseOperations.datetime_trunc_sql"
        ]
    },
    "django__django-11141": {
        "django/db/migrations/loader.py": [
            "MigrationLoader"
        ],
        "django/core/management/commands/migrate.py": [
            "Command"
        ],
        "django/db/migrations/__init__.py": []
    },
    "django__django-11149": {
        "django/contrib/admin/options.py": [
            "BaseModelAdmin",
            "InlineModelAdmin",
            "TabularInline",
            "BaseModelAdmin.has_view_or_change_permission",
            "InlineModelAdmin.has_view_or_change_permission"
        ],
        "django/contrib/admin/views/main.py": [],
        "django/contrib/admin/forms.py": []
    },
    "django__django-11163": {
        "django/forms/models.py": [
            "model_to_dict"
        ],
        "django/forms/utils.py": [],
        "django/forms/fields.py": []
    },
    "django__django-11179": {
        "django/db/models/deletion.py": [
            "Collector.delete"
        ],
        "django/db/models/base.py": [
            "Model.delete",
            "Model._set_pk_val"
        ],
        "django/db/models/query.py": []
    },
    "django__django-11206": {
        "django/utils/numberformat.py": [
            "format"
        ],
        "django/utils/formats.py": [
            "number_format"
        ],
        "django/utils/__init__.py": []
    },
    "django__django-11211": {
        "django/db/models/fields/related.py": [
            "RelatedField",
            "ForeignObject",
            "ForeignKey"
        ],
        "django/db/models/query.py": [
            "QuerySet",
            "QuerySet.prefetch_related",
            "QuerySet._prefetch_related_objects",
            "prefetch_related_objects",
            "get_prefetcher",
            "prefetch_one_level"
        ],
        "django/contrib/contenttypes/fields.py": [
            "GenericForeignKey",
            "GenericForeignKey.get_prefetch_queryset"
        ]
    },
    "django__django-11239": {
        "django/db/backends/postgresql/client.py": [
            "DatabaseClient"
        ],
        "django/db/backends/postgresql/base.py": [
            "DatabaseWrapper.get_connection_params",
            "DatabaseWrapper.get_new_connection"
        ],
        "django/core/management/commands/dbshell.py": [
            "Command"
        ]
    },
    "django__django-11265": {
        "django/db/models/sql/query.py": [
            "Query.split_exclude",
            "Query.add_filter",
            "Query.add_q",
            "Query._add_q",
            "Query.build_filter",
            "Query.names_to_path"
        ],
        "django/db/models/query.py": [
            "QuerySet.exclude",
            "QuerySet._filter_or_exclude"
        ],
        "django/db/models/query_utils.py": []
    },
    "django__django-11276": {
        "django/utils/html.py": [
            "escape"
        ],
        "django/template/defaultfilters.py": [
            "escape_filter",
            "force_escape"
        ],
        "django/template/defaulttags.py": []
    },
    "django__django-11292": {
        "django/core/management/base.py": [
            "CommandParser",
            "BaseCommand.add_arguments",
            "BaseCommand.run_from_argv",
            "BaseCommand.execute"
        ],
        "django/core/management/commands/migrate.py": [
            "Command.add_arguments",
            "Command.handle"
        ],
        "django/core/management/commands/runserver.py": [
            "Command.add_arguments",
            "Command.handle"
        ]
    },
    "django__django-11299": {
        "django/db/backends/sqlite3/schema.py": [
            "DatabaseSchemaEditor._remake_table",
            "DatabaseSchemaEditor.add_constraint"
        ],
        "django/db/models/constraints.py": [
            "CheckConstraint",
            "CheckConstraint._get_check_sql"
        ],
        "django/db/backends/oracle/schema.py": [
            "DatabaseSchemaEditor._remake_table",
            "DatabaseSchemaEditor.add_constraint"
        ]
    },
    "django__django-11333": {
        "django/urls/resolvers.py": [
            "get_resolver",
            "URLResolver"
        ],
        "django/urls/base.py": [
            "set_urlconf",
            "get_urlconf",
            "reverse"
        ],
        "django/conf/__init__.py": []
    },
    "django__django-11400": {
        "django/contrib/admin/filters.py": [
            "RelatedFieldListFilter",
            "RelatedOnlyFieldListFilter"
        ],
        "django/contrib/admin/options.py": [
            "BaseModelAdmin.get_ordering"
        ],
        "django/contrib/admin/views/main.py": [
            "ChangeList.get_ordering"
        ]
    },
    "django__django-11433": {
        "django/forms/forms.py": [
            "BaseForm"
        ],
        "django/forms/models.py": [
            "construct_instance"
        ],
        "django/forms/fields.py": []
    },
    "django__django-11451": {
        "django/contrib/auth/backends.py": [
            "ModelBackend.authenticate"
        ],
        "django/contrib/auth/__init__.py": [
            "authenticate"
        ],
        "django/contrib/auth/models.py": []
    },
    "django__django-11477": {
        "django/urls/resolvers.py": [
            "URLResolver",
            "URLResolver.reverse",
            "URLResolver._reverse_with_prefix"
        ],
        "django/urls/utils.py": [
            "get_callable"
        ],
        "django/conf/urls/i18n.py": [
            "i18n_patterns"
        ]
    },
    "django__django-11490": {
        "django/db/models/query.py": [
            "QuerySet.values",
            "QuerySet.values_list",
            "QuerySet.union"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLCompiler.get_combinator_sql"
        ],
        "django/db/models/sql/query.py": [
            "Query.combine",
            "Query.set_values"
        ]
    },
    "django__django-11532": {
        "django/core/mail/message.py": [
            "forbid_multi_line_headers",
            "EmailMessage.message",
            "SafeMIMEMessage",
            "SafeMIMEText",
            "SafeMIMEMultipart"
        ],
        "django/core/mail/utils.py": [
            "CachedDnsName"
        ],
        "django/core/mail/backends/smtp.py": []
    },
    "django__django-11551": {
        "django/contrib/admin/checks.py": [
            "ModelAdminChecks._check_list_display_item"
        ],
        "django/contrib/admin/options.py": [
            "ModelAdmin"
        ],
        "django/contrib/admin/__init__.py": []
    },
    "django__django-11555": {
        "django/db/models/expressions.py": [
            "OrderBy"
        ],
        "django/db/models/sql/query.py": [
            "get_order_dir"
        ],
        "django/db/models/query.py": [
            "QuerySet.order_by"
        ]
    },
    "django__django-11603": {
        "django/db/models/aggregates.py": [
            "Aggregate",
            "Avg",
            "Sum",
            "Max",
            "Min"
        ],
        "django/db/models/query.py": [],
        "django/db/models/expressions.py": []
    },
    "django__django-11728": {
        "django/utils/regex_helper.py": [
            "simplify_regexp",
            "replace_named_groups"
        ],
        "django/urls/resolvers.py": [
            "RegexPattern",
            "RoutePattern",
            "URLPattern",
            "URLResolver"
        ],
        "django/urls/utils.py": []
    },
    "django__django-11734": {
        "django/db/models/query.py": [
            "QuerySet.exclude",
            "QuerySet._filter_or_exclude",
            "QuerySet.annotate"
        ],
        "django/db/models/expressions.py": [
            "OuterRef",
            "Exists",
            "Q"
        ],
        "django/db/models/query_utils.py": [
            "Q"
        ]
    },
    "django__django-11740": {
        "django/db/migrations/autodetector.py": [
            "MigrationAutodetector._detect_changes",
            "MigrationAutodetector._get_dependencies_for_foreign_key"
        ],
        "django/db/migrations/state.py": [
            "ProjectState.reload_model",
            "ProjectState.reload_models",
            "ProjectState._reload",
            "ProjectState.add_model",
            "ProjectState.remove_model"
        ],
        "django/db/migrations/graph.py": [
            "MigrationGraph.add_dependency",
            "MigrationGraph.validate_consistency"
        ]
    },
    "django__django-11749": {
        "django/core/management/base.py": [
            "BaseCommand",
            "BaseCommand.create_parser",
            "BaseCommand.add_arguments"
        ],
        "django/core/management/__init__.py": [
            "call_command"
        ],
        "django/core/management/utils.py": []
    },
    "django__django-11790": {
        "django/contrib/auth/forms.py": [
            "AuthenticationForm",
            "UsernameField"
        ],
        "django/contrib/auth/models.py": [
            "AbstractUser"
        ],
        "django/contrib/auth/views.py": []
    },
    "django__django-11815": {
        "django/db/migrations/serializer.py": [
            "EnumSerializer"
        ],
        "django/db/migrations/autodetector.py": [
            "deep_deconstruct"
        ],
        "django/db/migrations/writer.py": [
            "MigrationWriter"
        ]
    },
    "django__django-11820": {
        "django/db/models/base.py": [
            "Model",
            "Model._check_ordering"
        ],
        "django/db/models/fields/related.py": [
            "RelatedField",
            "ForeignObject",
            "ForeignKey",
            "OneToOneField",
            "ManyToManyField"
        ],
        "django/db/models/options.py": [
            "Options"
        ]
    },
    "django__django-11848": {
        "django/utils/http.py": [
            "parse_http_date",
            "parse_http_date_safe"
        ],
        "django/utils/dateparse.py": [],
        "django/http/request.py": []
    },
    "django__django-11880": {
        "django/forms/fields.py": [
            "Field.__deepcopy__",
            "ChoiceField.__deepcopy__",
            "ModelChoiceField.__deepcopy__",
            "MultiValueField.__deepcopy__"
        ],
        "django/forms/forms.py": [],
        "django/forms/models.py": []
    },
    "django__django-11885": {
        "django/db/models/deletion.py": [
            "Collector",
            "Collector.delete",
            "Collector.can_fast_delete",
            "Collector.get_del_batches"
        ],
        "django/db/models/query.py": [
            "QuerySet.delete",
            "QuerySet._raw_delete"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLDeleteCompiler"
        ]
    },
    "django__django-11951": {
        "django/db/models/query.py": [
            "QuerySet.bulk_create",
            "QuerySet.bulk_update"
        ],
        "django/db/models/query_utils.py": [],
        "django/db/models/manager.py": []
    },
    "django__django-11964": {
        "django/db/models/enums.py": [
            "TextChoices"
        ],
        "django/db/models/fields/__init__.py": [
            "Field.to_python",
            "Field.get_prep_value",
            "CharField.to_python",
            "CharField.get_prep_value",
            "IntegerField.to_python",
            "IntegerField.get_prep_value"
        ],
        "django/db/models/fields/mixins.py": []
    },
    "django__django-11999": {
        "django/db/models/base.py": [
            "Model._get_FIELD_display"
        ],
        "django/db/models/fields/__init__.py": [
            "CharField"
        ],
        "django/db/models/fields/mixins.py": []
    },
    "django__django-12039": {
        "django/db/models/indexes.py": [
            "Index"
        ],
        "django/db/backends/base/schema.py": [
            "BaseDatabaseSchemaEditor._create_index_sql",
            "BaseDatabaseSchemaEditor._index_columns"
        ],
        "django/db/backends/ddl_references.py": [
            "Columns",
            "IndexColumns"
        ]
    },
    "django__django-12050": {
        "django/db/models/query.py": [
            "QuerySet.resolve_expression"
        ],
        "django/db/models/lookups.py": [
            "Lookup",
            "Exact"
        ],
        "django/db/models/query_utils.py": []
    },
    "django__django-12125": {
        "django/db/migrations/state.py": [
            "_get_app_label_and_model_name",
            "ProjectState",
            "ModelState"
        ],
        "django/db/migrations/serializer.py": [
            "DeconstructableSerializer",
            "ModelFieldSerializer",
            "Serializer"
        ],
        "django/db/migrations/autodetector.py": [
            "MigrationAutodetector"
        ]
    },
    "django__django-12143": {
        "django/contrib/admin/options.py": [
            "ModelAdmin._get_edited_object_pks",
            "ModelAdmin._get_list_editable_queryset"
        ],
        "django/contrib/admin/views/main.py": [],
        "django/contrib/admin/forms.py": []
    },
    "django__django-12155": {
        "django/contrib/admindocs/utils.py": [
            "trim_docstring"
        ],
        "django/contrib/admindocs/views.py": [],
        "django/contrib/admindocs/middleware.py": []
    },
    "django__django-12193": {
        "django/forms/widgets.py": [
            "CheckboxInput",
            "CheckboxInput.get_context"
        ],
        "django/forms/fields.py": [
            "BooleanField"
        ],
        "django/contrib/postgres/forms/array.py": [
            "SplitArrayField",
            "SplitArrayWidget",
            "SplitArrayWidget.get_context"
        ]
    },
    "django__django-12209": {
        "django/db/models/base.py": [
            "Model.save",
            "Model.save_base",
            "Model._save_table",
            "Model._do_insert"
        ],
        "django/db/models/fields/__init__.py": [
            "Field.get_pk_value_on_save"
        ],
        "django/core/management/commands/loaddata.py": [
            "Command.loaddata"
        ]
    },
    "django__django-12262": {
        "django/template/library.py": [
            "Library.simple_tag",
            "Library.inclusion_tag",
            "parse_bits"
        ],
        "django/template/base.py": [
            "token_kwargs"
        ],
        "django/template/defaulttags.py": []
    },
    "django__django-12273": {
        "django/db/models/base.py": [
            "Model.save",
            "Model.save_base",
            "Model._save_table",
            "Model._do_update",
            "Model._do_insert"
        ],
        "django/db/models/query.py": [
            "QuerySet.create",
            "QuerySet.bulk_create",
            "QuerySet.update_or_create",
            "QuerySet._create_object_from_params",
            "QuerySet._insert",
            "QuerySet._batched_insert"
        ],
        "django/db/models/fields/__init__.py": [
            "AutoField",
            "IntegerField",
            "Field"
        ]
    },
    "django__django-12276": {
        "django/forms/widgets.py": [
            "FileInput",
            "ClearableFileInput.use_required_attribute"
        ],
        "django/forms/forms.py": [],
        "django/forms/__init__.py": []
    },
    "django__django-12304": {
        "django/template/base.py": [
            "Template",
            "VariableNode"
        ],
        "django/db/models/enums.py": [
            "Choices"
        ],
        "django/template/context.py": []
    },
    "django__django-12308": {
        "django/contrib/admin/utils.py": [
            "display_for_field"
        ],
        "django/contrib/admin/forms.py": [],
        "django/contrib/admin/widgets.py": []
    },
    "django__django-12325": {
        "django/db/models/fields/related.py": [
            "RelatedField",
            "ForeignObject",
            "OneToOneField"
        ],
        "django/db/models/base.py": [
            "ModelBase",
            "Model"
        ],
        "django/db/models/fields/__init__.py": [
            "Field"
        ]
    },
    "django__django-12406": {
        "django/forms/widgets.py": [
            "RadioSelect"
        ],
        "django/forms/models.py": [
            "ModelChoiceField"
        ],
        "django/forms/forms.py": []
    },
    "django__django-12419": {
        "django/middleware/security.py": [
            "SecurityMiddleware"
        ],
        "django/conf/global_settings.py": [],
        "django/utils/http.py": []
    },
    "django__django-12663": {
        "django/db/models/query.py": [
            "QuerySet.filter",
            "QuerySet._filter_or_exclude"
        ],
        "django/db/models/sql/query.py": [
            "Query.build_filter",
            "Query.build_lookup",
            "Query.add_q"
        ],
        "django/db/models/lookups.py": [
            "Lookup.__init__",
            "Lookup.get_prep_lookup"
        ]
    },
    "django__django-12708": {
        "django/db/backends/base/schema.py": [
            "BaseDatabaseSchemaEditor._delete_composed_index",
            "BaseDatabaseSchemaEditor.alter_index_together",
            "BaseDatabaseSchemaEditor.alter_unique_together"
        ],
        "django/db/migrations/operations/models.py": [
            "AlterIndexTogether",
            "AlterUniqueTogether"
        ],
        "django/db/models/options.py": [
            "Options.total_unique_constraints"
        ]
    },
    "django__django-12713": {
        "django/contrib/admin/options.py": [
            "BaseModelAdmin.formfield_for_manytomany",
            "BaseModelAdmin.formfield_for_foreignkey"
        ],
        "django/contrib/admin/forms.py": [],
        "django/contrib/admin/widgets.py": []
    },
    "django__django-12741": {
        "django/db/backends/base/operations.py": [
            "BaseDatabaseOperations.execute_sql_flush"
        ],
        "django/db/backends/sqlite3/operations.py": [
            "DatabaseOperations.sql_flush"
        ],
        "django/db/backends/mysql/operations.py": [
            "DatabaseOperations.sql_flush"
        ]
    },
    "django__django-12754": {
        "django/db/migrations/autodetector.py": [
            "MigrationAutodetector._detect_changes",
            "MigrationAutodetector._build_migration_list",
            "MigrationAutodetector._sort_migrations"
        ],
        "django/db/migrations/operations/models.py": [
            "CreateModel",
            "DeleteModel",
            "RenameModel",
            "AlterModelTable",
            "AlterTogetherOptionOperation",
            "AlterUniqueTogether",
            "AlterIndexTogether",
            "AlterOrderWithRespectTo",
            "AlterModelOptions",
            "AlterModelManagers",
            "AddIndex",
            "RemoveIndex",
            "AddConstraint",
            "RemoveConstraint"
        ],
        "django/db/migrations/optimizer.py": [
            "MigrationOptimizer.optimize",
            "MigrationOptimizer.optimize_inner"
        ]
    },
    "django__django-12774": {
        "django/db/models/constraints.py": [
            "UniqueConstraint"
        ],
        "django/db/models/query.py": [
            "QuerySet.in_bulk"
        ],
        "django/db/models/manager.py": [
            "BaseManager.get_queryset"
        ]
    },
    "django__django-12858": {
        "django/db/models/options.py": [
            "Options"
        ],
        "django/db/models/fields/related.py": [
            "ForeignKey",
            "RelatedField"
        ],
        "django/db/models/fields/related_lookups.py": [
            "RelatedIsNull"
        ]
    },
    "django__django-12965": {
        "django/db/models/query.py": [
            "QuerySet.delete",
            "QuerySet._raw_delete"
        ],
        "django/db/backends/mysql/compiler.py": [
            "SQLDeleteCompiler.as_sql"
        ],
        "django/db/models/deletion.py": []
    },
    "django__django-13012": {
        "django/db/models/expressions.py": [
            "ExpressionWrapper",
            "ExpressionWrapper.get_group_by_cols",
            "BaseExpression.get_group_by_cols",
            "Value.get_group_by_cols"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLCompiler.get_group_by"
        ],
        "django/db/models/query.py": []
    },
    "django__django-13023": {
        "django/db/models/fields/__init__.py": [
            "DecimalField.to_python"
        ],
        "django/db/models/fields/mixins.py": [],
        "django/db/models/fields/proxy.py": []
    },
    "django__django-13028": {
        "django/db/models/sql/query.py": [
            "Query.check_filterable",
            "Query.build_filter",
            "Query._add_q"
        ],
        "django/db/models/query.py": [
            "QuerySet.filter",
            "QuerySet._filter_or_exclude"
        ],
        "django/db/models/manager.py": []
    },
    "django__django-13033": {
        "django/db/models/query.py": [
            "QuerySet.order_by"
        ],
        "django/db/models/sql/query.py": [
            "Query.add_ordering",
            "Query.clear_ordering",
            "Query.setup_joins",
            "Query.trim_joins"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLCompiler.get_order_by",
            "SQLCompiler.find_ordering_name"
        ]
    },
    "django__django-13089": {
        "django/core/cache/backends/db.py": [
            "DatabaseCache._cull"
        ],
        "django/core/cache/backends/base.py": [],
        "django/core/cache/utils.py": []
    },
    "django__django-13109": {
        "django/db/models/fields/related.py": [
            "ForeignKey.validate"
        ],
        "django/db/models/fields/__init__.py": [],
        "django/db/models/fields/mixins.py": []
    },
    "django__django-13112": {
        "django/contrib/auth/migrations/0001_initial.py": [],
        "django/contrib/auth/migrations/0002_alter_permission_name_max_length.py": [],
        "django/contrib/auth/migrations/0003_alter_user_email_max_length.py": []
    },
    "django__django-13121": {
        "django/db/backends/sqlite3/operations.py": [
            "DatabaseOperations.convert_durationfield_value",
            "DatabaseOperations.combine_duration_expression"
        ],
        "django/db/backends/base/operations.py": [
            "BaseDatabaseOperations.convert_durationfield_value",
            "BaseDatabaseOperations.combine_duration_expression"
        ],
        "django/db/backends/mysql/operations.py": [
            "DatabaseOperations.convert_durationfield_value",
            "DatabaseOperations.combine_duration_expression"
        ]
    },
    "django__django-13128": {
        "django/db/models/expressions.py": [
            "Combinable",
            "CombinedExpression",
            "TemporalSubtraction",
            "ExpressionWrapper"
        ],
        "django/db/models/query.py": [
            "QuerySet.annotate"
        ],
        "django/db/models/functions/datetime.py": []
    },
    "django__django-13158": {
        "django/db/models/query.py": [
            "QuerySet.none",
            "QuerySet.union",
            "QuerySet._combinator_query"
        ],
        "django/forms/models.py": [
            "ModelMultipleChoiceField"
        ],
        "django/db/models/expressions.py": []
    },
    "django__django-13195": {
        "django/http/response.py": [
            "HttpResponseBase.delete_cookie",
            "HttpResponseBase.set_cookie"
        ],
        "django/conf/global_settings.py": [],
        "django/http/cookie.py": []
    },
    "django__django-13212": {
        "django/core/validators.py": [
            "RegexValidator",
            "URLValidator",
            "EmailValidator",
            "BaseValidator",
            "MaxValueValidator",
            "MinValueValidator",
            "MinLengthValidator",
            "MaxLengthValidator",
            "DecimalValidator",
            "FileExtensionValidator",
            "ProhibitNullCharactersValidator"
        ],
        "django/core/exceptions.py": [
            "ValidationError"
        ],
        "django/forms/fields.py": [
            "Field",
            "CharField",
            "IntegerField",
            "FloatField",
            "DecimalField",
            "BaseTemporalField",
            "DateField",
            "TimeField",
            "DateTimeField",
            "DurationField",
            "RegexField",
            "EmailField",
            "FileField",
            "ImageField",
            "URLField",
            "BooleanField",
            "NullBooleanField",
            "ChoiceField",
            "TypedChoiceField",
            "MultipleChoiceField",
            "TypedMultipleChoiceField",
            "ComboField",
            "MultiValueField",
            "FilePathField",
            "SplitDateTimeField",
            "GenericIPAddressField",
            "SlugField",
            "UUIDField",
            "JSONField"
        ]
    },
    "django__django-13279": {
        "django/contrib/sessions/backends/base.py": [
            "SessionBase.encode",
            "SessionBase.decode",
            "SessionBase._legacy_decode"
        ],
        "django/contrib/sessions/backends/db.py": [
            "SessionStore"
        ],
        "django/contrib/sessions/backends/cache.py": [
            "SessionStore"
        ]
    },
    "django__django-13297": {
        "django/views/generic/base.py": [
            "TemplateView.get"
        ],
        "django/utils/functional.py": [
            "SimpleLazyObject"
        ],
        "django/db/backends/sqlite3/operations.py": [
            "DatabaseOperations._quote_params_for_last_executed_query"
        ]
    },
    "django__django-13315": {
        "django/forms/models.py": [
            "apply_limit_choices_to_to_formfield",
            "ModelChoiceField",
            "ModelMultipleChoiceField"
        ],
        "django/db/models/fields/related.py": [
            "ForeignKey"
        ],
        "django/db/models/query.py": [
            "QuerySet"
        ]
    },
    "django__django-13343": {
        "django/db/models/fields/files.py": [
            "FileField.deconstruct"
        ],
        "django/db/migrations/serializer.py": [
            "ModelFieldSerializer"
        ],
        "django/db/migrations/writer.py": []
    },
    "django__django-13344": {
        "django/core/handlers/asgi.py": [
            "ASGIHandler",
            "ASGIHandler.__call__",
            "ASGIHandler.send_response"
        ],
        "django/core/handlers/base.py": [
            "BaseHandler",
            "BaseHandler.get_response",
            "BaseHandler.get_response_async",
            "BaseHandler._get_response",
            "BaseHandler._get_response_async"
        ],
        "django/middleware/common.py": [
            "CommonMiddleware",
            "CommonMiddleware.process_response",
            "BrokenLinkEmailsMiddleware",
            "BrokenLinkEmailsMiddleware.process_response"
        ]
    },
    "django__django-13346": {
        "django/db/models/lookups.py": [
            "In"
        ],
        "django/db/models/fields/json.py": [
            "KeyTransform",
            "KeyTextTransform",
            "KeyTransformExact",
            "KeyTransformIExact",
            "KeyTransformIContains",
            "KeyTransformStartsWith",
            "KeyTransformIStartsWith",
            "KeyTransformEndsWith",
            "KeyTransformIEndsWith",
            "KeyTransformRegex",
            "KeyTransformIRegex",
            "KeyTransformLt",
            "KeyTransformLte",
            "KeyTransformGt",
            "KeyTransformGte"
        ],
        "django/db/models/query.py": [
            "QuerySet.filter",
            "QuerySet._filter_or_exclude"
        ]
    },
    "django__django-13363": {
        "django/db/models/functions/datetime.py": [
            "TruncDate",
            "TruncTime",
            "TruncBase.__init__",
            "TruncBase.as_sql",
            "TruncBase.resolve_expression"
        ],
        "django/utils/timezone.py": [
            "get_current_timezone_name"
        ],
        "django/db/models/functions/mixins.py": []
    },
    "django__django-13401": {
        "django/db/models/fields/__init__.py": [
            "Field.__eq__",
            "Field.__lt__",
            "Field.__hash__"
        ],
        "django/db/models/fields/related.py": [],
        "django/db/models/fields/related_descriptors.py": []
    },
    "django__django-13406": {
        "django/db/models/query.py": [
            "QuerySet",
            "ValuesIterable",
            "ValuesListIterable",
            "NamedValuesListIterable",
            "FlatValuesListIterable"
        ],
        "django/db/models/query_utils.py": [
            "DeferredAttribute"
        ],
        "django/db/models/expressions.py": []
    },
    "django__django-13410": {
        "django/core/files/locks.py": [
            "lock",
            "unlock"
        ],
        "django/core/checks/security/__init__.py": [],
        "django/core/checks/compatibility/__init__.py": []
    },
    "django__django-13417": {
        "django/db/models/query.py": [
            "QuerySet.ordered",
            "QuerySet.annotate"
        ],
        "django/db/models/sql/query.py": [
            "Query.add_annotation",
            "Query.add_ordering",
            "Query.clear_ordering",
            "Query.set_group_by"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLCompiler.get_order_by",
            "SQLCompiler.get_group_by"
        ]
    },
    "django__django-13449": {
        "django/db/backends/sqlite3/operations.py": [
            "DatabaseOperations.get_db_converters",
            "DatabaseOperations.get_decimalfield_converter"
        ],
        "django/db/models/expressions.py": [
            "SQLiteNumericMixin",
            "Window.as_sql"
        ],
        "django/db/models/functions/window.py": [
            "LagLeadFunction._resolve_output_field"
        ]
    },
    "django__django-13512": {
        "django/contrib/admin/views/main.py": [
            "ChangeList"
        ],
        "django/contrib/admin/forms.py": [
            "AdminAuthenticationForm",
            "AdminPasswordChangeForm"
        ],
        "django/contrib/admin/widgets.py": [
            "FilteredSelectMultiple",
            "AdminDateWidget",
            "AdminTimeWidget",
            "AdminSplitDateTime",
            "AdminRadioSelect",
            "AdminFileWidget",
            "ForeignKeyRawIdWidget",
            "ManyToManyRawIdWidget",
            "RelatedFieldWidgetWrapper",
            "AdminTextareaWidget",
            "AdminTextInputWidget",
            "AdminEmailInputWidget",
            "AdminURLFieldWidget",
            "AdminIntegerFieldWidget",
            "AdminBigIntegerFieldWidget",
            "AdminUUIDInputWidget",
            "AutocompleteMixin",
            "AutocompleteSelect",
            "AutocompleteSelectMultiple"
        ]
    },
    "django__django-13513": {
        "django/views/debug.py": [
            "get_traceback_frames",
            "get_traceback_data"
        ],
        "django/views/generic/__init__.py": [],
        "django/views/decorators/clickjacking.py": []
    },
    "django__django-13516": {
        "django/core/management/commands/migrate.py": [
            "Command.handle",
            "Command.migration_progress_callback"
        ],
        "django/core/management/base.py": [
            "OutputWrapper",
            "BaseCommand.execute"
        ],
        "django/core/management/commands/showmigrations.py": []
    },
    "django__django-13551": {
        "django/contrib/auth/tokens.py": [
            "PasswordResetTokenGenerator"
        ],
        "django/contrib/auth/models.py": [
            "AbstractUser"
        ],
        "django/contrib/auth/views.py": [
            "PasswordResetConfirmView"
        ]
    },
    "django__django-13568": {
        "django/contrib/auth/checks.py": [
            "check_user_model"
        ],
        "django/contrib/auth/models.py": [
            "AbstractUser",
            "User"
        ],
        "django/contrib/auth/base_user.py": []
    },
    "django__django-13569": {
        "django/db/models/sql/compiler.py": [
            "SQLCompiler.get_group_by"
        ],
        "django/db/models/query.py": [
            "QuerySet.order_by"
        ],
        "django/db/models/expressions.py": [
            "OrderBy"
        ]
    },
    "django__django-13590": {
        "django/db/models/sql/query.py": [
            "Query.resolve_lookup_value"
        ],
        "django/db/models/query_utils.py": [],
        "django/db/models/fields/related_lookups.py": []
    },
    "django__django-13658": {
        "django/core/management/__init__.py": [
            "ManagementUtility",
            "execute_from_command_line"
        ],
        "django/core/management/base.py": [
            "CommandParser"
        ],
        "django/core/management/utils.py": []
    },
    "django__django-13670": {
        "django/utils/dateformat.py": [
            "DateFormat.y"
        ],
        "django/utils/datetime_safe.py": [
            "date.strftime",
            "datetime.strftime",
            "strftime"
        ],
        "django/utils/dates.py": []
    },
    "django__django-13741": {
        "django/contrib/auth/forms.py": [
            "ReadOnlyPasswordHashField",
            "UserChangeForm"
        ],
        "django/contrib/auth/admin.py": [],
        "django/contrib/auth/views.py": []
    },
    "django__django-13786": {
        "django/db/migrations/operations/models.py": [
            "CreateModel.reduce",
            "AlterModelOptions.state_forwards"
        ],
        "django/db/migrations/optimizer.py": [
            "MigrationOptimizer"
        ],
        "django/db/migrations/operations/utils.py": []
    },
    "django__django-13794": {
        "django/template/defaultfilters.py": [
            "add"
        ],
        "django/utils/safestring.py": [
            "SafeString"
        ],
        "django/utils/translation/trans_real.py": []
    },
    "django__django-13807": {
        "django/db/backends/sqlite3/base.py": [
            "DatabaseWrapper.check_constraints"
        ],
        "django/db/backends/sqlite3/schema.py": [
            "DatabaseSchemaEditor"
        ],
        "django/db/backends/sqlite3/introspection.py": [
            "DatabaseIntrospection"
        ]
    },
    "django__django-13809": {
        "django/core/management/commands/runserver.py": [
            "Command",
            "Command.add_arguments",
            "Command.handle",
            "Command.inner_run"
        ],
        "django/core/management/base.py": [
            "BaseCommand",
            "BaseCommand.create_parser",
            "BaseCommand.check",
            "DjangoHelpFormatter"
        ],
        "django/core/checks/__init__.py": []
    },
    "django__django-13810": {
        "django/core/handlers/base.py": [
            "BaseHandler.load_middleware",
            "BaseHandler.adapt_method_mode",
            "BaseHandler.get_response",
            "BaseHandler.get_response_async",
            "BaseHandler._get_response",
            "BaseHandler._get_response_async"
        ],
        "django/core/handlers/asgi.py": [
            "ASGIHandler"
        ],
        "django/middleware/__init__.py": []
    },
    "django__django-13820": {
        "django/db/migrations/loader.py": [
            "MigrationLoader.load_disk"
        ],
        "django/db/migrations/__init__.py": [],
        "django/db/migrations/utils.py": []
    },
    "django__django-13821": {
        "django/db/backends/sqlite3/base.py": [
            "check_sqlite_version",
            "DatabaseWrapper"
        ],
        "django/db/backends/sqlite3/features.py": [
            "DatabaseFeatures"
        ],
        "django/db/backends/sqlite3/operations.py": [
            "DatabaseOperations"
        ]
    },
    "django__django-13837": {
        "django/utils/autoreload.py": [
            "get_child_arguments"
        ],
        "django/core/management/commands/runserver.py": [
            "Command"
        ],
        "django/__main__.py": []
    },
    "django__django-13925": {
        "django/db/models/base.py": [
            "ModelBase",
            "Model"
        ],
        "django/conf/global_settings.py": [],
        "django/apps/config.py": [
            "AppConfig"
        ]
    },
    "django__django-13933": {
        "django/forms/models.py": [
            "ModelChoiceField",
            "ModelMultipleChoiceField"
        ],
        "django/forms/fields.py": [
            "ChoiceField"
        ],
        "django/forms/utils.py": []
    },
    "django__django-13964": {
        "django/db/models/fields/related.py": [
            "ForeignKey",
            "ForeignObject"
        ],
        "django/db/models/base.py": [
            "Model.save",
            "Model.save_base",
            "Model._save_table",
            "Model._prepare_related_fields_for_save"
        ],
        "django/db/models/fields/related_descriptors.py": [
            "ForwardManyToOneDescriptor",
            "ForeignKeyDeferredAttribute"
        ]
    },
    "django__django-14007": {
        "django/db/models/fields/__init__.py": [
            "BigAutoField",
            "AutoFieldMixin"
        ],
        "django/db/models/query.py": [
            "QuerySet._insert"
        ],
        "django/db/models/base.py": [
            "Model._do_insert"
        ]
    },
    "django__django-14011": {
        "django/core/servers/basehttp.py": [
            "ThreadedWSGIServer"
        ],
        "django/db/backends/base/base.py": [
            "BaseDatabaseWrapper.close",
            "BaseDatabaseWrapper.validate_thread_sharing",
            "BaseDatabaseWrapper.inc_thread_sharing",
            "BaseDatabaseWrapper.dec_thread_sharing"
        ],
        "django/db/backends/sqlite3/base.py": [
            "DatabaseWrapper.close"
        ]
    },
    "django__django-14017": {
        "django/db/models/query_utils.py": [
            "Q",
            "Q.__and__",
            "Q._combine"
        ],
        "django/db/models/expressions.py": [
            "Combinable",
            "Combinable.__and__",
            "Combinable.__rand__",
            "Exists"
        ],
        "django/db/models/query.py": []
    },
    "django__django-14034": {
        "django/forms/fields.py": [
            "MultiValueField",
            "MultiValueField.clean",
            "MultiValueField.validate"
        ],
        "django/forms/forms.py": [
            "BaseForm.is_valid",
            "BaseForm.full_clean",
            "BaseForm._clean_fields"
        ],
        "django/forms/widgets.py": []
    },
    "django__django-14053": {
        "django/contrib/staticfiles/storage.py": [
            "HashedFilesMixin",
            "HashedFilesMixin.post_process",
            "HashedFilesMixin._post_process"
        ],
        "django/contrib/staticfiles/management/commands/collectstatic.py": [
            "Command.collect"
        ],
        "django/contrib/staticfiles/utils.py": []
    },
    "django__django-14089": {
        "django/utils/datastructures.py": [
            "OrderedSet"
        ],
        "django/setup.py": [],
        "django/__init__.py": []
    },
    "django__django-14122": {
        "django/db/models/sql/query.py": [
            "Query.set_group_by",
            "Query.add_ordering"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLCompiler.get_group_by"
        ],
        "django/db/models/query.py": []
    },
    "django__django-14140": {
        "django/db/models/query_utils.py": [
            "Q"
        ],
        "django/db/models/expressions.py": [
            "Exists"
        ],
        "django/db/models/query.py": []
    },
    "django__django-14155": {
        "django/urls/resolvers.py": [
            "ResolverMatch",
            "ResolverMatch.__init__",
            "ResolverMatch.__repr__"
        ],
        "django/urls/utils.py": [],
        "django/urls/base.py": []
    },
    "django__django-14170": {
        "django/db/models/lookups.py": [
            "YearLookup",
            "YearExact",
            "YearGt",
            "YearGte",
            "YearLt",
            "YearLte"
        ],
        "django/db/models/functions/datetime.py": [
            "ExtractIsoYear"
        ],
        "django/db/models/query.py": []
    },
    "django__django-14238": {
        "django/db/models/base.py": [
            "ModelBase"
        ],
        "django/db/models/fields/__init__.py": [
            "AutoFieldMeta"
        ],
        "django/db/models/options.py": [
            "Options._get_default_pk_class"
        ]
    },
    "django__django-14311": {
        "django/utils/autoreload.py": [
            "get_child_arguments",
            "restart_with_reloader",
            "run_with_reloader"
        ],
        "django/utils/module_loading.py": [
            "import_string"
        ],
        "django/core/management/commands/runserver.py": [
            "Command"
        ]
    },
    "django__django-14315": {
        "django/db/backends/postgresql/client.py": [
            "DatabaseClient.settings_to_cmd_args_env",
            "DatabaseClient.runshell"
        ],
        "django/db/backends/postgresql/base.py": [],
        "django/db/backends/postgresql/operations.py": []
    },
    "django__django-14349": {
        "django/core/validators.py": [
            "URLValidator"
        ],
        "django/utils/http.py": [
            "_urlsplit"
        ],
        "django/http/request.py": [
            "HttpRequest.get_full_path",
            "HttpRequest.get_full_path_info",
            "HttpRequest.build_absolute_uri"
        ]
    },
    "django__django-14351": {
        "django/db/models/sql/query.py": [
            "Query.add_q",
            "Query._add_q",
            "Query.build_filter",
            "Query.add_filter",
            "Query.setup_joins",
            "Query.trim_joins",
            "Query.get_aggregation",
            "Query.get_count",
            "Query.get_compiler",
            "Query.as_sql",
            "Query.resolve_expression",
            "Query.get_external_cols",
            "Query.get_group_by_cols",
            "Query.get_source_expressions",
            "Query.set_source_expressions",
            "Query._gen_cols",
            "Query._gen_col_aliases"
        ],
        "django/db/models/query.py": [
            "QuerySet.filter",
            "QuerySet._filter_or_exclude",
            "QuerySet._filter_or_exclude_inplace",
            "QuerySet.annotate",
            "QuerySet._annotate",
            "QuerySet.values",
            "QuerySet.values_list",
            "QuerySet.distinct",
            "QuerySet.extra",
            "QuerySet._clone",
            "QuerySet._fetch_all",
            "QuerySet._iterator",
            "QuerySet.iterator",
            "QuerySet.aggregate",
            "QuerySet.count",
            "QuerySet.exists",
            "QuerySet.explain",
            "QuerySet.resolve_expression"
        ],
        "django/db/models/expressions.py": [
            "Expression.resolve_expression",
            "Expression.get_group_by_cols",
            "Expression.get_source_expressions",
            "Expression.set_source_expressions"
        ]
    },
    "django__django-14373": {
        "django/utils/dateformat.py": [
            "DateFormat.Y"
        ],
        "django/utils/dates.py": [],
        "django/utils/dateparse.py": []
    },
    "django__django-14376": {
        "django/db/backends/mysql/base.py": [
            "DatabaseWrapper.get_connection_params",
            "DatabaseWrapper.get_new_connection"
        ],
        "django/db/backends/mysql/introspection.py": [
            "DatabaseIntrospection"
        ],
        "django/db/backends/mysql/operations.py": [
            "DatabaseOperations"
        ]
    },
    "django__django-14404": {
        "django/views/defaults.py": [
            "catch_all_view"
        ],
        "django/http/request.py": [
            "HttpRequest.get_full_path_info"
        ],
        "django/conf/global_settings.py": []
    },
    "django__django-14434": {
        "django/db/models/sql/query.py": [
            "Query._get_col",
            "Query.add_select_col",
            "Query.set_select",
            "Query.add_fields",
            "Query.add_ordering",
            "Query.add_extra",
            "Query.add_deferred_loading",
            "Query.add_immediate_loading",
            "Query.set_annotation_mask",
            "Query.append_annotation_mask",
            "Query.set_extra_mask",
            "Query.set_values",
            "Query.resolve_ref",
            "Query.split_exclude",
            "Query.setup_joins",
            "Query.names_to_path",
            "Query.add_annotation",
            "Query.resolve_expression",
            "Query.get_external_cols",
            "Query.as_sql",
            "Query.resolve_lookup_value",
            "Query.solve_lookup_type",
            "Query.check_query_object_type",
            "Query.check_related_objects",
            "Query.check_filterable",
            "Query.build_lookup",
            "Query.try_transform",
            "Query.build_filter",
            "Query.add_filter",
            "Query.add_q",
            "Query.build_where",
            "Query._add_q",
            "Query.build_filtered_relation_q",
            "Query.add_filtered_relation",
            "Query.trim_joins",
            "Query.get_initial_alias",
            "Query.table_alias",
            "Query.ref_alias",
            "Query.unref_alias",
            "Query.promote_joins",
            "Query.demote_joins",
            "Query.reset_refcounts",
            "Query.change_aliases"
        ],
        "django/db/models/sql/compiler.py": [],
        "django/db/models/sql/__init__.py": []
    },
    "django__django-14493": {
        "django/contrib/staticfiles/storage.py": [
            "HashedFilesMixin.post_process",
            "ManifestFilesMixin.post_process"
        ],
        "django/contrib/staticfiles/management/commands/collectstatic.py": [],
        "django/conf/global_settings.py": []
    },
    "django__django-14500": {
        "django/db/migrations/executor.py": [
            "MigrationExecutor.unapply_migration",
            "MigrationExecutor.check_replacements"
        ],
        "django/db/migrations/loader.py": [
            "MigrationLoader"
        ],
        "django/db/migrations/recorder.py": [
            "MigrationRecorder.record_unapplied"
        ]
    },
    "django__django-14534": {
        "django/forms/boundfield.py": [
            "BoundField",
            "BoundWidget.id_for_label"
        ],
        "django/forms/widgets.py": [
            "CheckboxSelectMultiple"
        ],
        "django/forms/fields.py": []
    },
    "django__django-14539": {
        "django/utils/html.py": [
            "urlize",
            "smart_urlquote"
        ],
        "django/template/defaultfilters.py": [
            "urlize",
            "urlizetrunc"
        ],
        "django/utils/text.py": [
            "smart_split",
            "_replace_entity"
        ]
    },
    "django__django-14559": {
        "django/db/models/query.py": [
            "QuerySet.bulk_update",
            "QuerySet.update"
        ],
        "django/db/models/manager.py": [],
        "django/db/models/base.py": []
    },
    "django__django-14580": {
        "django/db/migrations/writer.py": [
            "MigrationWriter"
        ],
        "django/db/migrations/serializer.py": [
            "Serializer"
        ],
        "django/db/migrations/autodetector.py": [
            "MigrationAutodetector"
        ]
    },
    "django__django-14608": {
        "django/forms/formsets.py": [
            "BaseFormSet.non_form_errors",
            "BaseFormSet.full_clean",
            "BaseFormSet.errors"
        ],
        "django/forms/forms.py": [
            "BaseForm.non_field_errors"
        ],
        "django/forms/utils.py": [
            "ErrorList"
        ]
    },
    "django__django-14631": {
        "django/forms/forms.py": [
            "BaseForm._clean_fields",
            "BaseForm.changed_data"
        ],
        "django/forms/boundfield.py": [
            "BoundField.did_change"
        ],
        "django/forms/fields.py": []
    },
    "django__django-14672": {
        "django/db/models/fields/related.py": [
            "ManyToManyField"
        ],
        "django/db/models/fields/reverse_related.py": [
            "ManyToManyRel"
        ],
        "django/db/models/fields/__init__.py": []
    },
    "django__django-14725": {
        "django/forms/models.py": [
            "BaseModelFormSet",
            "BaseModelFormSet.save_new",
            "BaseModelFormSet._construct_form",
            "modelformset_factory",
            "BaseInlineFormSet",
            "BaseInlineFormSet.save_new",
            "inlineformset_factory"
        ],
        "django/forms/formsets.py": [
            "BaseFormSet",
            "formset_factory"
        ],
        "django/forms/utils.py": []
    },
    "django__django-14752": {
        "django/contrib/admin/views/autocomplete.py": [
            "AutocompleteJsonView.get",
            "AutocompleteJsonView.serialize_result"
        ],
        "django/contrib/admin/__init__.py": [],
        "django/contrib/admin/forms.py": []
    },
    "django__django-14765": {
        "django/db/migrations/state.py": [
            "ProjectState.__init__"
        ],
        "django/db/migrations/autodetector.py": [
            "MigrationAutodetector.__init__",
            "MigrationAutodetector.changes",
            "MigrationAutodetector._detect_changes"
        ],
        "django/db/migrations/loader.py": [
            "MigrationLoader.project_state"
        ]
    },
    "django__django-14771": {
        "django/utils/autoreload.py": [
            "get_child_arguments",
            "restart_with_reloader"
        ],
        "django/core/management/__init__.py": [
            "execute_from_command_line"
        ],
        "django/core/management/commands/runserver.py": [
            "Command.handle",
            "Command.run",
            "Command.inner_run"
        ]
    },
    "django__django-14787": {
        "django/utils/decorators.py": [
            "_update_method_wrapper",
            "_multi_decorate",
            "method_decorator"
        ],
        "django/views/decorators/common.py": [],
        "django/views/decorators/csrf.py": []
    },
    "django__django-14792": {
        "django/utils/timezone.py": [
            "_get_timezone_name"
        ],
        "django/db/backends/postgresql/operations.py": [
            "_prepare_tzname_delta",
            "date_trunc_sql",
            "datetime_trunc_sql",
            "time_trunc_sql"
        ],
        "django/db/models/functions/mixins.py": [
            "FixDecimalInputMixin",
            "FixDurationInputMixin",
            "NumericOutputFieldMixin"
        ]
    },
    "django__django-14855": {
        "django/contrib/admin/helpers.py": [
            "AdminReadonlyField"
        ],
        "django/contrib/admin/options.py": [
            "ModelAdmin.response_add"
        ],
        "django/contrib/admin/sites.py": [
            "AdminSite"
        ]
    },
    "django__django-14915": {
        "django/forms/models.py": [
            "ModelChoiceIteratorValue"
        ],
        "django/forms/widgets.py": [
            "ChoiceWidget.create_option"
        ],
        "django/forms/utils.py": []
    },
    "django__django-14999": {
        "django/db/migrations/operations/models.py": [
            "RenameModel",
            "RenameModel.database_forwards",
            "RenameModel.database_backwards"
        ],
        "django/db/backends/sqlite3/schema.py": [
            "DatabaseSchemaEditor.alter_db_table"
        ],
        "django/db/backends/postgresql/schema.py": [
            "DatabaseSchemaEditor.alter_db_table"
        ]
    },
    "django__django-15022": {
        "django/contrib/admin/views/main.py": [
            "ChangeList"
        ],
        "django/contrib/admin/options.py": [
            "ModelAdmin.get_search_results"
        ],
        "django/contrib/admin/templatetags/admin_list.py": []
    },
    "django__django-15037": {
        "django/core/management/commands/inspectdb.py": [
            "Command.handle_inspection",
            "Command.get_field_type"
        ],
        "django/db/backends/base/introspection.py": [
            "BaseDatabaseIntrospection.get_relations",
            "BaseDatabaseIntrospection.get_constraints"
        ],
        "django/db/backends/postgresql/introspection.py": [
            "DatabaseIntrospection.get_relations",
            "DatabaseIntrospection.get_constraints"
        ]
    },
    "django__django-15098": {
        "django/middleware/locale.py": [
            "LocaleMiddleware"
        ],
        "django/conf/urls/i18n.py": [
            "i18n_patterns",
            "is_language_prefix_patterns_used"
        ],
        "django/utils/translation/trans_real.py": [
            "reset_cache",
            "TranslationCatalog",
            "DjangoTranslation",
            "translation",
            "activate",
            "deactivate",
            "deactivate_all",
            "get_language",
            "get_language_bidi",
            "catalog",
            "gettext",
            "pgettext",
            "gettext_noop",
            "do_ntranslate",
            "ngettext",
            "npgettext",
            "all_locale_paths",
            "check_for_language",
            "get_languages",
            "get_supported_language_variant",
            "get_language_from_path",
            "get_language_from_request",
            "parse_accept_lang_header"
        ]
    },
    "django__django-15103": {
        "django/utils/html.py": [
            "json_script"
        ],
        "django/utils/jslex.py": [],
        "django/utils/http.py": []
    },
    "django__django-15104": {
        "django/db/migrations/autodetector.py": [
            "MigrationAutodetector.only_relation_agnostic_fields"
        ],
        "django/db/migrations/state.py": [
            "ProjectState",
            "ModelState"
        ],
        "django/db/migrations/graph.py": []
    },
    "django__django-15127": {
        "django/contrib/messages/storage/base.py": [
            "Message.level_tag"
        ],
        "django/contrib/messages/utils.py": [
            "get_level_tags"
        ],
        "django/contrib/messages/constants.py": []
    },
    "django__django-15128": {
        "django/db/models/sql/query.py": [
            "Query.combine",
            "Query.change_aliases",
            "Query.table_alias",
            "Query.join"
        ],
        "django/db/models/query.py": [
            "QuerySet.__or__",
            "QuerySet._combinator_query"
        ],
        "django/db/models/sql/compiler.py": []
    },
    "django__django-15161": {
        "django/db/models/expressions.py": [
            "Func",
            "Value",
            "RawSQL",
            "Star",
            "Col",
            "Ref",
            "ExpressionList",
            "OrderByList",
            "ExpressionWrapper",
            "When",
            "Case",
            "Subquery",
            "Exists",
            "OrderBy",
            "Window",
            "WindowFrame",
            "RowRange",
            "ValueRange"
        ],
        "django/db/models/functions/__init__.py": [],
        "django/db/models/aggregates.py": [
            "Aggregate",
            "Avg",
            "Count",
            "Max",
            "Min",
            "StdDev",
            "Sum",
            "Variance"
        ]
    },
    "django__django-15252": {
        "django/db/migrations/recorder.py": [
            "MigrationRecorder"
        ],
        "django/db/migrations/executor.py": [
            "MigrationExecutor.apply_migration",
            "MigrationExecutor.record_migration",
            "MigrationExecutor.unapply_migration"
        ],
        "django/db/backends/base/creation.py": [
            "BaseDatabaseCreation.create_test_db",
            "BaseDatabaseCreation._create_test_db",
            "BaseDatabaseCreation.clone_test_db",
            "BaseDatabaseCreation._clone_test_db"
        ]
    },
    "django__django-15268": {
        "django/db/migrations/optimizer.py": [
            "MigrationOptimizer",
            "MigrationOptimizer.optimize",
            "MigrationOptimizer.optimize_inner"
        ],
        "django/db/migrations/operations/models.py": [
            "AlterUniqueTogether",
            "AlterIndexTogether",
            "ModelOptionOperation.reduce"
        ],
        "django/db/migrations/autodetector.py": [
            "MigrationAutodetector",
            "MigrationAutodetector._optimize_migrations",
            "MigrationAutodetector._get_altered_foo_together_operations",
            "MigrationAutodetector._generate_removed_altered_foo_together",
            "MigrationAutodetector.generate_removed_altered_unique_together",
            "MigrationAutodetector.generate_removed_altered_index_together",
            "MigrationAutodetector._generate_altered_foo_together",
            "MigrationAutodetector.generate_altered_unique_together",
            "MigrationAutodetector.generate_altered_index_together"
        ]
    },
    "django__django-15277": {
        "django/db/models/fields/__init__.py": [
            "CharField"
        ],
        "django/db/models/expressions.py": [
            "Value._resolve_output_field"
        ],
        "django/core/validators.py": []
    },
    "django__django-15278": {
        "django/db/backends/sqlite3/schema.py": [
            "DatabaseSchemaEditor.add_field",
            "DatabaseSchemaEditor._remake_table"
        ],
        "django/db/backends/sqlite3/base.py": [
            "SQLiteCursorWrapper"
        ],
        "django/db/backends/sqlite3/operations.py": [
            "DatabaseOperations.adapt_timefield_value"
        ]
    },
    "django__django-15280": {
        "django/db/models/query.py": [
            "QuerySet._prefetch_related_objects",
            "QuerySet._fetch_all",
            "QuerySet.only",
            "QuerySet.prefetch_related"
        ],
        "django/db/models/fields/related_descriptors.py": [
            "ForwardOneToOneDescriptor",
            "ForwardManyToOneDescriptor",
            "ReverseOneToOneDescriptor",
            "ReverseManyToOneDescriptor"
        ],
        "django/db/models/fields/related.py": [
            "ForeignKey",
            "OneToOneField"
        ]
    },
    "django__django-15315": {
        "django/db/models/fields/__init__.py": [
            "Field.__hash__",
            "Field.contribute_to_class"
        ],
        "django/db/models/fields/related.py": [],
        "django/db/models/fields/mixins.py": []
    },
    "django__django-15368": {
        "django/db/models/query.py": [
            "QuerySet.bulk_update"
        ],
        "django/db/models/expressions.py": [
            "F",
            "Expression"
        ],
        "django/db/models/fields/__init__.py": []
    },
    "django__django-15375": {
        "django/db/models/aggregates.py": [
            "Aggregate",
            "Aggregate.__init__",
            "Aggregate.as_sql"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLAggregateCompiler",
            "SQLAggregateCompiler.as_sql"
        ],
        "django/db/models/query.py": [
            "QuerySet.aggregate"
        ]
    },
    "django__django-15380": {
        "django/db/migrations/autodetector.py": [
            "MigrationAutodetector.changes",
            "MigrationAutodetector._detect_changes",
            "MigrationAutodetector.generate_renamed_fields"
        ],
        "django/db/migrations/state.py": [
            "ProjectState.rename_model"
        ],
        "django/db/migrations/graph.py": []
    },
    "django__django-15382": {
        "django/db/models/query.py": [
            "QuerySet.filter",
            "QuerySet._filter_or_exclude",
            "QuerySet.none"
        ],
        "django/db/models/sql/where.py": [
            "WhereNode",
            "NothingNode"
        ],
        "django/db/models/expressions.py": [
            "Exists"
        ]
    },
    "django__django-15467": {
        "django/contrib/admin/options.py": [
            "BaseModelAdmin.formfield_for_foreignkey"
        ],
        "django/contrib/admin/helpers.py": [],
        "django/contrib/admin/utils.py": []
    },
    "django__django-15499": {
        "django/db/migrations/operations/models.py": [
            "CreateModel",
            "AlterModelManagers"
        ],
        "django/db/migrations/optimizer.py": [
            "MigrationOptimizer.optimize",
            "MigrationOptimizer.optimize_inner"
        ],
        "django/db/migrations/autodetector.py": [
            "MigrationAutodetector.generate_created_models",
            "MigrationAutodetector.generate_altered_managers"
        ]
    },
    "django__django-15503": {
        "django/db/backends/sqlite3/operations.py": [
            "DatabaseOperations.get_db_converters"
        ],
        "django/db/backends/mysql/operations.py": [
            "DatabaseOperations.get_db_converters"
        ],
        "django/db/backends/oracle/operations.py": [
            "DatabaseOperations.get_db_converters"
        ]
    },
    "django__django-15525": {
        "django/db/models/fields/related_descriptors.py": [
            "ForwardManyToOneDescriptor"
        ],
        "django/core/serializers/python.py": [
            "Deserializer"
        ],
        "django/core/serializers/base.py": [
            "build_instance"
        ]
    },
    "django__django-15554": {
        "django/db/models/query.py": [
            "QuerySet.alias"
        ],
        "django/db/models/sql/query.py": [
            "Query.table_alias",
            "Query.add_filtered_relation",
            "Query.add_annotation",
            "Query.resolve_expression",
            "Query.build_filtered_relation_q"
        ],
        "django/db/models/expressions.py": []
    },
    "django__django-15561": {
        "django/db/backends/sqlite3/schema.py": [
            "DatabaseSchemaEditor.alter_field",
            "DatabaseSchemaEditor._alter_field"
        ],
        "django/db/migrations/operations/fields.py": [
            "AlterField.database_forwards"
        ],
        "django/db/backends/sqlite3/operations.py": []
    },
    "django__django-15563": {
        "django/db/models/query.py": [
            "QuerySet.update",
            "QuerySet._update"
        ],
        "django/db/models/base.py": [
            "Model",
            "Model._do_update"
        ],
        "django/db/models/manager.py": [
            "Manager"
        ]
    },
    "django__django-15569": {
        "django/db/models/query_utils.py": [
            "RegisterLookupMixin._unregister_lookup",
            "RegisterLookupMixin._clear_cached_lookups",
            "RegisterLookupMixin.register_lookup"
        ],
        "django/db/models/lookups.py": [
            "Lookup",
            "Transform",
            "BuiltinLookup",
            "FieldGetDbPrepValueMixin",
            "FieldGetDbPrepValueIterableMixin",
            "PostgresOperatorLookup",
            "Exact",
            "IExact",
            "GreaterThan",
            "GreaterThanOrEqual",
            "LessThan",
            "LessThanOrEqual",
            "IntegerFieldFloatRounding",
            "IntegerGreaterThanOrEqual",
            "IntegerLessThan",
            "In",
            "PatternLookup",
            "Contains",
            "IContains",
            "StartsWith",
            "IStartsWith",
            "EndsWith",
            "IEndsWith",
            "Range",
            "IsNull",
            "Regex",
            "IRegex",
            "YearLookup",
            "YearExact",
            "YearGt",
            "YearGte",
            "YearLt",
            "YearLte",
            "UUIDTextMixin",
            "UUIDIExact",
            "UUIDContains",
            "UUIDIContains",
            "UUIDStartsWith",
            "UUIDIStartsWith",
            "UUIDEndsWith",
            "UUIDIEndsWith"
        ],
        "django/db/models/fields/related_lookups.py": [
            "MultiColSource"
        ]
    },
    "django__django-15572": {
        "django/template/autoreload.py": [
            "template_changed"
        ],
        "django/utils/autoreload.py": [
            "is_django_module",
            "is_django_path",
            "check_errors",
            "raise_last_exception",
            "ensure_echo_on",
            "iter_all_python_module_files",
            "iter_modules_and_files",
            "common_roots",
            "sys_path_directories",
            "get_child_arguments",
            "trigger_reload",
            "restart_with_reloader",
            "BaseReloader",
            "StatReloader",
            "WatchmanUnavailable",
            "WatchmanReloader",
            "get_reloader",
            "start_django",
            "run_with_reloader"
        ],
        "django/conf/global_settings.py": []
    },
    "django__django-15629": {
        "django/db/backends/mysql/schema.py": [
            "DatabaseSchemaEditor._alter_column_type_sql"
        ],
        "django/db/backends/mysql/operations.py": [
            "DatabaseOperations.quote_name",
            "DatabaseOperations.sql_flush",
            "DatabaseOperations.adapt_decimalfield_value",
            "DatabaseOperations.adapt_datetimefield_value",
            "DatabaseOperations.adapt_timefield_value"
        ],
        "django/db/backends/mysql/introspection.py": [
            "DatabaseIntrospection.get_table_description",
            "DatabaseIntrospection.get_constraints"
        ]
    },
    "django__django-15695": {
        "django/db/migrations/operations/models.py": [
            "RenameIndex"
        ],
        "django/db/backends/postgresql/schema.py": [
            "DatabaseSchemaEditor._create_index_sql",
            "DatabaseSchemaEditor._delete_index_sql"
        ],
        "django/db/migrations/operations/__init__.py": []
    },
    "django__django-15731": {
        "django/db/models/manager.py": [
            "BaseManager._get_queryset_methods",
            "BaseManager.from_queryset"
        ],
        "django/db/models/query.py": [
            "QuerySet.bulk_create"
        ],
        "django/db/models/base.py": []
    },
    "django__django-15732": {
        "django/db/migrations/operations/models.py": [
            "AlterUniqueTogether"
        ],
        "django/db/backends/postgresql/schema.py": [
            "DatabaseSchemaEditor._delete_index_sql"
        ],
        "django/db/backends/postgresql/introspection.py": [
            "DatabaseIntrospection.get_constraints"
        ]
    },
    "django__django-15741": {
        "django/utils/formats.py": [
            "get_format",
            "get_format_lazy"
        ],
        "django/utils/functional.py": [
            "lazy"
        ],
        "django/template/defaultfilters.py": [
            "date"
        ]
    },
    "django__django-15814": {
        "django/db/models/sql/query.py": [
            "Query.join_parent_model"
        ],
        "django/db/models/query.py": [
            "QuerySet.only",
            "get_related_populators",
            "RelatedPopulator"
        ],
        "django/db/models/fields/related.py": [
            "ForeignKey",
            "OneToOneField",
            "ManyToManyField"
        ]
    },
    "django__django-15851": {
        "django/db/backends/postgresql/client.py": [
            "DatabaseClient.runshell"
        ],
        "django/core/management/commands/dbshell.py": [
            "Command.handle"
        ],
        "django/db/backends/postgresql/base.py": []
    },
    "django__django-15863": {
        "django/template/defaultfilters.py": [
            "floatformat"
        ],
        "django/template/backends/django.py": [
            "DjangoTemplates",
            "Template"
        ],
        "django/template/utils.py": [
            "EngineHandler"
        ]
    },
    "django__django-15916": {
        "django/forms/models.py": [
            "modelform_factory",
            "ModelFormMetaclass"
        ],
        "django/forms/__init__.py": [],
        "django/forms/utils.py": []
    },
    "django__django-15930": {
        "django/db/models/expressions.py": [
            "When",
            "Case"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLCompiler.compile",
            "SQLCompiler.as_sql"
        ],
        "django/db/models/query.py": [
            "QuerySet.annotate"
        ]
    },
    "django__django-15957": {
        "django/db/models/query.py": [
            "QuerySet.prefetch_related",
            "QuerySet._prefetch_related_objects"
        ],
        "django/db/models/fields/related_descriptors.py": [
            "ReverseManyToOneDescriptor.get_prefetch_queryset",
            "ForwardManyToOneDescriptor.get_prefetch_queryset"
        ],
        "django/db/models/fields/related.py": [
            "ForeignKey",
            "OneToOneField",
            "ManyToManyField"
        ]
    },
    "django__django-15973": {
        "django/db/migrations/executor.py": [
            "MigrationExecutor.apply_migration"
        ],
        "django/db/migrations/operations/models.py": [
            "CreateModel"
        ],
        "django/db/models/fields/related.py": [
            "resolve_relation",
            "ManyToManyField"
        ]
    },
    "django__django-15987": {
        "django/core/management/commands/loaddata.py": [
            "Command.loaddata",
            "Command.fixture_dirs",
            "Command.find_fixtures"
        ],
        "django/core/management/utils.py": [
            "normalize_path_patterns"
        ],
        "django/core/management/__init__.py": []
    },
    "django__django-16032": {
        "django/db/models/query.py": [
            "QuerySet.alias",
            "QuerySet.annotate"
        ],
        "django/db/models/sql/query.py": [
            "Query.add_annotation",
            "Query.add_select_col",
            "Query.clear_select_fields",
            "Query.set_select",
            "Query.get_group_by_cols",
            "Query.get_external_cols",
            "Query.resolve_expression",
            "Query.as_sql",
            "Query.build_filter",
            "Query.add_filter",
            "Query.add_q",
            "Query._add_q",
            "Query.build_where",
            "Query.clear_where",
            "Query.set_annotation_mask",
            "Query.append_annotation_mask",
            "Query.set_extra_mask",
            "Query.set_values"
        ],
        "django/db/models/expressions.py": []
    },
    "django__django-16082": {
        "django/db/models/expressions.py": [
            "Combinable",
            "CombinedExpression._resolve_output_field"
        ],
        "django/db/models/functions/math.py": [
            "Mod"
        ],
        "django/db/models/query.py": []
    },
    "django__django-16100": {
        "django/contrib/admin/views/main.py": [
            "ChangeList"
        ],
        "django/contrib/admin/options.py": [
            "ModelAdmin.changelist_view"
        ],
        "django/db/transaction.py": [
            "atomic"
        ]
    },
    "django__django-16116": {
        "django/core/management/commands/makemigrations.py": [
            "Command.add_arguments",
            "Command.handle"
        ],
        "django/db/migrations/autodetector.py": [
            "MigrationAutodetector"
        ],
        "django/db/migrations/executor.py": [
            "MigrationExecutor"
        ]
    },
    "django__django-16136": {
        "django/http/response.py": [
            "HttpResponseNotAllowed"
        ],
        "django/core/handlers/base.py": [
            "_get_response_async"
        ],
        "django/core/handlers/exception.py": [
            "get_exception_response"
        ]
    },
    "django__django-16139": {
        "django/contrib/auth/forms.py": [
            "UserChangeForm"
        ],
        "django/contrib/auth/admin.py": [
            "UserAdmin"
        ],
        "django/contrib/admin/views/main.py": []
    },
    "django__django-16145": {
        "django/core/management/commands/runserver.py": [
            "Command",
            "Command.inner_run"
        ],
        "django/core/servers/basehttp.py": [
            "run"
        ],
        "django/http/request.py": []
    },
    "django__django-16255": {
        "django/contrib/sitemaps/__init__.py": [
            "Sitemap.get_latest_lastmod",
            "GenericSitemap.get_latest_lastmod"
        ],
        "django/contrib/sitemaps/views.py": [],
        "django/contrib/sitemaps/management/__init__.py": []
    },
    "django__django-16256": {
        "django/db/models/fields/related_descriptors.py": [
            "create_reverse_many_to_one_manager",
            "create_forward_many_to_many_manager"
        ],
        "django/db/models/fields/related.py": [
            "ForeignKey",
            "OneToOneField",
            "ManyToManyField"
        ],
        "django/db/models/fields/reverse_related.py": [
            "ForeignObjectRel",
            "ManyToOneRel",
            "OneToOneRel",
            "ManyToManyRel"
        ]
    },
    "django__django-16263": {
        "django/db/models/query.py": [
            "QuerySet.count",
            "QuerySet.annotate"
        ],
        "django/db/models/sql/query.py": [
            "Query.get_count",
            "Query.add_annotation",
            "Query.set_annotation_mask",
            "Query.append_annotation_mask"
        ],
        "django/db/models/expressions.py": []
    },
    "django__django-16315": {
        "django/db/models/query.py": [
            "QuerySet.bulk_create",
            "QuerySet._check_bulk_create_options",
            "QuerySet._insert",
            "QuerySet._batched_insert"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLInsertCompiler",
            "SQLInsertCompiler.assemble_as_sql",
            "SQLInsertCompiler.as_sql",
            "SQLInsertCompiler.execute_sql"
        ],
        "django/db/models/fields/__init__.py": [
            "Field"
        ]
    },
    "django__django-16333": {
        "django/contrib/auth/forms.py": [
            "UserCreationForm"
        ],
        "django/contrib/auth/models.py": [
            "User"
        ],
        "django/contrib/auth/views.py": []
    },
    "django__django-16429": {
        "django/utils/timesince.py": [
            "timesince"
        ],
        "django/utils/timezone.py": [
            "now",
            "is_aware",
            "is_naive",
            "make_aware",
            "make_naive"
        ],
        "django/conf/global_settings.py": []
    },
    "django__django-16454": {
        "django/core/management/base.py": [
            "CommandParser",
            "CommandParser.add_subparsers",
            "CommandParser.add_parser",
            "CommandParser.error"
        ],
        "django/core/management/__init__.py": [
            "ManagementUtility.execute"
        ],
        "django/core/management/utils.py": [
            "popen_wrapper"
        ]
    },
    "django__django-16485": {
        "django/template/defaultfilters.py": [
            "floatformat"
        ],
        "django/utils/numberformat.py": [
            "format"
        ],
        "django/utils/formats.py": [
            "number_format"
        ]
    },
    "django__django-16493": {
        "django/db/models/fields/files.py": [
            "FileField.deconstruct"
        ],
        "django/core/files/storage/__init__.py": [],
        "django/db/migrations/serializer.py": [
            "FunctionTypeSerializer"
        ]
    },
    "django__django-16502": {
        "django/core/handlers/wsgi.py": [
            "WSGIHandler"
        ],
        "django/core/handlers/base.py": [
            "BaseHandler.get_response",
            "BaseHandler._get_response",
            "BaseHandler.get_response_async",
            "BaseHandler._get_response_async"
        ],
        "django/http/response.py": [
            "HttpResponse",
            "StreamingHttpResponse"
        ]
    },
    "django__django-16527": {
        "django/contrib/admin/templatetags/admin_modify.py": [
            "submit_row"
        ],
        "django/contrib/admin/options.py": [
            "BaseModelAdmin.has_add_permission",
            "BaseModelAdmin.has_change_permission"
        ],
        "django/contrib/admin/views/main.py": []
    },
    "django__django-16560": {
        "django/db/models/constraints.py": [
            "BaseConstraint",
            "CheckConstraint",
            "UniqueConstraint"
        ],
        "django/core/exceptions.py": [
            "ValidationError"
        ],
        "django/db/models/base.py": [
            "Model.validate_constraints",
            "Model.full_clean"
        ]
    },
    "django__django-16569": {
        "django/forms/formsets.py": [
            "BaseFormSet.add_fields"
        ],
        "django/forms/__init__.py": [],
        "django/forms/utils.py": []
    },
    "django__django-16595": {
        "django/db/migrations/optimizer.py": [
            "MigrationOptimizer.optimize",
            "MigrationOptimizer.optimize_inner"
        ],
        "django/db/migrations/operations/fields.py": [
            "FieldOperation.is_same_field_operation",
            "AlterField.reduce"
        ],
        "django/db/migrations/operations/models.py": []
    },
    "django__django-16612": {
        "django/contrib/admin/sites.py": [
            "AdminSite.catch_all_view"
        ],
        "django/http/response.py": [
            "HttpResponsePermanentRedirect"
        ],
        "django/middleware/common.py": [
            "CommonMiddleware.get_full_path_with_slash"
        ]
    },
    "django__django-16631": {
        "django/core/signing.py": [
            "Signer",
            "TimestampSigner"
        ],
        "django/contrib/auth/base_user.py": [
            "AbstractBaseUser.get_session_auth_hash"
        ],
        "django/contrib/sessions/backends/base.py": [
            "SessionBase"
        ]
    },
    "django__django-16642": {
        "django/http/response.py": [
            "FileResponse",
            "FileResponse.set_headers"
        ],
        "django/core/files/storage/filesystem.py": [
            "FileSystemStorage._open"
        ],
        "django/core/files/storage/base.py": []
    },
    "django__django-16661": {
        "django/contrib/admin/options.py": [
            "BaseModelAdmin.lookup_allowed",
            "ModelAdmin"
        ],
        "django/contrib/admin/filters.py": [
            "RelatedFieldListFilter"
        ],
        "django/contrib/admin/utils.py": [
            "lookup_spawns_duplicates"
        ]
    },
    "django__django-16662": {
        "django/db/migrations/writer.py": [
            "MigrationWriter"
        ],
        "django/db/migrations/autodetector.py": [
            "MigrationAutodetector"
        ],
        "django/db/migrations/recorder.py": [
            "MigrationRecorder"
        ]
    },
    "django__django-16667": {
        "django/forms/widgets.py": [
            "SelectDateWidget.value_from_datadict"
        ],
        "django/forms/fields.py": [
            "DateField.to_python"
        ],
        "django/forms/forms.py": []
    },
    "django__django-16801": {
        "django/db/models/fields/files.py": [
            "ImageField",
            "ImageField.contribute_to_class"
        ],
        "django/db/models/signals.py": [],
        "django/db/backends/signals.py": []
    },
    "django__django-16819": {
        "django/db/migrations/optimizer.py": [
            "MigrationOptimizer"
        ],
        "django/db/migrations/operations/models.py": [
            "AddIndex",
            "RemoveIndex",
            "RenameIndex",
            "AlterIndexTogether"
        ],
        "django/db/migrations/operations/__init__.py": []
    },
    "django__django-16877": {
        "django/template/defaultfilters.py": [
            "escapeseq",
            "join"
        ],
        "django/template/__init__.py": [],
        "django/template/utils.py": []
    },
    "django__django-16899": {
        "django/contrib/admin/checks.py": [
            "BaseModelAdminChecks._check_readonly_fields",
            "BaseModelAdminChecks._check_readonly_fields_item"
        ],
        "django/contrib/admin/options.py": [
            "BaseModelAdmin",
            "ModelAdmin"
        ],
        "django/contrib/admin/sites.py": []
    },
    "django__django-16901": {
        "django/db/models/query_utils.py": [
            "Q"
        ],
        "django/db/models/query.py": [
            "QuerySet.__xor__"
        ],
        "django/db/models/expressions.py": [
            "Combinable"
        ]
    },
    "django__django-16938": {
        "django/db/models/query_utils.py": [
            "select_related_descend"
        ],
        "django/db/models/sql/compiler.py": [
            "SQLCompiler.get_related_selections",
            "SQLCompiler.setup_query",
            "SQLCompiler.pre_sql_setup"
        ],
        "django/db/models/query.py": [
            "QuerySet.only",
            "QuerySet._fetch_all",
            "QuerySet._clone"
        ]
    },
    "django__django-16950": {
        "django/contrib/admin/options.py": [
            "BaseModelAdmin",
            "ModelAdmin",
            "InlineModelAdmin"
        ],
        "django/contrib/admin/helpers.py": [
            "InlineAdminFormSet",
            "InlineAdminForm"
        ],
        "django/contrib/admin/views/main.py": [
            "ChangeList"
        ]
    },
    "django__django-17029": {
        "django/apps/registry.py": [
            "Apps.clear_cache",
            "Apps.get_swappable_settings_name"
        ],
        "django/apps/__init__.py": [],
        "django/apps/config.py": []
    },
    "django__django-17084": {
        "django/db/models/expressions.py": [
            "BaseExpression",
            "Window"
        ],
        "django/db/models/aggregates.py": [
            "Aggregate"
        ],
        "django/db/models/query.py": [
            "QuerySet.annotate",
            "QuerySet.aggregate"
        ]
    },
    "django__django-17087": {
        "django/db/migrations/autodetector.py": [
            "MigrationAutodetector.deep_deconstruct"
        ],
        "django/db/migrations/serializer.py": [
            "DeconstructableSerializer"
        ],
        "django/db/migrations/writer.py": [
            "OperationWriter",
            "MigrationWriter"
        ]
    },
    "django__django-7530": {
        "django/db/migrations/loader.py": [
            "MigrationLoader"
        ],
        "django/core/management/commands/makemigrations.py": [
            "Command"
        ],
        "django/db/migrations/autodetector.py": [
            "MigrationAutodetector"
        ]
    },
    "django__django-9296": {
        "django/core/paginator.py": [
            "Paginator"
        ],
        "django/core/__init__.py": [],
        "django/http/multipartparser.py": []
    },
    "matplotlib__matplotlib-13989": {
        "lib/matplotlib/axes/_axes.py": [
            "Axes.hist"
        ],
        "lib/matplotlib/pyplot.py": [
            "hist"
        ],
        "examples/statistics/hist.py": [
            "axs[0].hist",
            "ax.hist2d"
        ]
    },
    "matplotlib__matplotlib-14623": {
        "lib/matplotlib/axis.py": [
            "Axis.set_view_interval",
            "Axis.get_view_interval",
            "Axis.set_inverted",
            "Axis.get_inverted"
        ],
        "lib/matplotlib/scale.py": [
            "LogScale",
            "LogTransform",
            "InvertedLogTransform"
        ],
        "lib/matplotlib/axes/_base.py": [
            "_AxesBase.set_ylim",
            "_AxesBase.get_ylim",
            "_AxesBase.set_yscale",
            "_AxesBase.get_yscale",
            "_AxesBase.invert_yaxis",
            "_AxesBase.yaxis_inverted"
        ]
    },
    "matplotlib__matplotlib-20488": {
        "lib/matplotlib/colors.py": [
            "LogNorm"
        ],
        "lib/matplotlib/image.py": [
            "_ImageBase._make_image",
            "_ImageBase.make_image",
            "_ImageBase.draw"
        ],
        "lib/matplotlib/ticker.py": []
    },
    "matplotlib__matplotlib-20676": {
        "lib/matplotlib/widgets.py": [
            "SpanSelector"
        ],
        "lib/matplotlib/axes/_base.py": [
            "_AxesBase.set_xlim",
            "_AxesBase.set_ylim",
            "_AxesBase.autoscale_view"
        ],
        "lib/matplotlib/figure.py": []
    },
    "matplotlib__matplotlib-20826": {
        "lib/matplotlib/axes/_base.py": [
            "_AxesBase.clear",
            "_AxesBase.cla",
            "_AxesBase.sharex",
            "_AxesBase.sharey"
        ],
        "lib/matplotlib/axis.py": [
            "Axis.clear",
            "Axis.cla",
            "Axis.reset_ticks",
            "Axis.set_tick_params",
            "Axis._update_ticks"
        ],
        "lib/matplotlib/figure.py": [
            "Figure.subplots"
        ]
    },
    "matplotlib__matplotlib-20859": {
        "lib/matplotlib/legend.py": [
            "Legend"
        ],
        "lib/matplotlib/figure.py": [
            "SubFigure",
            "FigureBase.legend"
        ],
        "lib/matplotlib/pyplot.py": [
            "figlegend"
        ]
    },
    "matplotlib__matplotlib-21568": {
        "lib/matplotlib/dates.py": [
            "_wrap_in_tex",
            "DateFormatter",
            "ConciseDateFormatter",
            "AutoDateFormatter"
        ],
        "lib/matplotlib/axis.py": [
            "XAxis",
            "YAxis"
        ],
        "lib/matplotlib/ticker.py": [
            "Formatter",
            "ScalarFormatter",
            "LogFormatter",
            "LogFormatterMathtext",
            "LogFormatterSciNotation",
            "EngFormatter",
            "PercentFormatter"
        ]
    },
    "matplotlib__matplotlib-22719": {
        "lib/matplotlib/axis.py": [
            "Axis.convert_units"
        ],
        "lib/matplotlib/category.py": [
            "StrCategoryConverter.convert"
        ],
        "lib/matplotlib/_api/deprecation.py": [
            "warn_deprecated"
        ]
    },
    "matplotlib__matplotlib-22865": {
        "lib/matplotlib/colorbar.py": [
            "Colorbar",
            "Colorbar._do_extends",
            "Colorbar._add_solids_patches"
        ],
        "lib/matplotlib/colors.py": [
            "from_levels_and_colors"
        ],
        "lib/matplotlib/collections.py": []
    },
    "matplotlib__matplotlib-22871": {
        "lib/matplotlib/dates.py": [
            "ConciseDateFormatter",
            "ConciseDateFormatter.__call__",
            "ConciseDateFormatter.get_offset"
        ],
        "lib/matplotlib/ticker.py": [],
        "lib/matplotlib/axis.py": []
    },
    "matplotlib__matplotlib-23299": {
        "lib/matplotlib/_pylab_helpers.py": [
            "Gcf"
        ],
        "lib/matplotlib/pyplot.py": [
            "get_backend",
            "rc_context"
        ],
        "lib/matplotlib/backends/backend_qt.py": []
    },
    "matplotlib__matplotlib-23314": {
        "lib/matplotlib/axes/_base.py": [
            "_AxesBase",
            "_AxesBase.set_visible"
        ],
        "lib/matplotlib/axes/_subplots.py": [
            "SubplotBase"
        ],
        "lib/matplotlib/figure.py": [
            "Figure.add_subplot"
        ]
    },
    "matplotlib__matplotlib-23412": {
        "lib/matplotlib/patches.py": [
            "Patch",
            "Patch.set_linestyle",
            "Patch.draw",
            "Rectangle",
            "Ellipse"
        ],
        "lib/matplotlib/lines.py": [
            "_get_dash_pattern",
            "_scale_dashes",
            "Line2D",
            "Line2D.set_linestyle",
            "Line2D.draw"
        ],
        "lib/matplotlib/artist.py": [
            "Artist",
            "Artist.draw"
        ]
    },
    "matplotlib__matplotlib-23476": {
        "lib/matplotlib/figure.py": [
            "Figure.__setstate__",
            "Figure.__getstate__",
            "Figure._set_dpi",
            "Figure.set_dpi",
            "Figure.get_dpi"
        ],
        "lib/matplotlib/backend_bases.py": [
            "new_figure_manager_given_figure"
        ],
        "lib/matplotlib/backends/backend_macosx.py": [
            "FigureCanvasMac"
        ]
    },
    "matplotlib__matplotlib-24026": {
        "lib/matplotlib/stackplot.py": [
            "stackplot"
        ],
        "lib/matplotlib/rcsetup.py": [
            "validate_color_for_prop_cycle"
        ],
        "lib/matplotlib/axes/_base.py": [
            "_process_plot_var_args.set_prop_cycle",
            "_AxesBase.set_prop_cycle"
        ]
    },
    "matplotlib__matplotlib-24149": {
        "lib/matplotlib/axes/_axes.py": [
            "Axes.bar",
            "Axes._convert_dx"
        ],
        "lib/matplotlib/cbook/__init__.py": [
            "_safe_first_finite"
        ],
        "lib/matplotlib/collections.py": []
    },
    "matplotlib__matplotlib-24177": {
        "lib/matplotlib/axes/_axes.py": [
            "Axes.hist"
        ],
        "lib/matplotlib/axes/_base.py": [
            "_AxesBase.autoscale_view",
            "_AxesBase.update_datalim",
            "_AxesBase.relim"
        ],
        "lib/matplotlib/axis.py": [
            "Axis.set_view_interval",
            "Axis.set_data_interval",
            "Axis.get_view_interval",
            "Axis.get_data_interval"
        ]
    },
    "matplotlib__matplotlib-24570": {
        "lib/matplotlib/offsetbox.py": [
            "_get_aligned_offsets",
            "HPacker"
        ],
        "examples/subplots_axes_and_figures/align_labels_demo.py": [],
        "examples/axisartist/demo_floating_axes.py": []
    },
    "matplotlib__matplotlib-24627": {
        "lib/matplotlib/axes/_base.py": [
            "_AxesBase.cla"
        ],
        "lib/matplotlib/figure.py": [
            "Figure.clf",
            "Figure.clear"
        ],
        "lib/matplotlib/axes/_axes.py": []
    },
    "matplotlib__matplotlib-24637": {
        "lib/matplotlib/offsetbox.py": [
            "AnnotationBbox"
        ],
        "lib/matplotlib/artist.py": [
            "Artist.set_gid",
            "Artist.get_gid"
        ],
        "lib/matplotlib/backends/backend_svg.py": [
            "RendererSVG.open_group"
        ]
    },
    "matplotlib__matplotlib-24870": {
        "lib/matplotlib/contour.py": [
            "ContourSet",
            "ContourSet._process_args",
            "ContourSet._process_levels"
        ],
        "lib/matplotlib/pyplot.py": [
            "Axes.contour"
        ],
        "examples/images_contours_and_fields/contour_demo.py": []
    },
    "matplotlib__matplotlib-24970": {
        "lib/matplotlib/colors.py": [
            "Colormap.__call__",
            "Colormap._set_extremes"
        ],
        "lib/matplotlib/pyplot.py": [],
        "lib/matplotlib/collections.py": []
    },
    "matplotlib__matplotlib-25122": {
        "lib/matplotlib/mlab.py": [
            "_spectral_helper"
        ],
        "lib/matplotlib/_cm.py": [],
        "lib/matplotlib/pylab.py": []
    },
    "matplotlib__matplotlib-25287": {
        "lib/matplotlib/axis.py": [
            "Axis._update_offset_text_position",
            "Axis._update_ticks",
            "Axis._reset_major_tick_kw",
            "Axis._reset_minor_tick_kw",
            "XAxis._update_offset_text_position",
            "YAxis._update_offset_text_position"
        ],
        "lib/matplotlib/axes/_base.py": [],
        "lib/matplotlib/rcsetup.py": []
    },
    "matplotlib__matplotlib-25311": {
        "lib/matplotlib/figure.py": [
            "Figure.__getstate__",
            "Figure.__setstate__"
        ],
        "lib/matplotlib/legend.py": [
            "DraggableLegend",
            "Legend.set_draggable"
        ],
        "lib/matplotlib/backends/backend_qt.py": [
            "FigureCanvasQT"
        ]
    },
    "matplotlib__matplotlib-25332": {
        "lib/matplotlib/figure.py": [
            "Figure.align_labels",
            "Figure.__getstate__",
            "Figure.__setstate__"
        ],
        "lib/matplotlib/axes/_base.py": [
            "_AxesBase.__getstate__",
            "_AxesBase.__setstate__"
        ],
        "lib/matplotlib/axis.py": [
            "Axis.__getstate__",
            "Axis.__setstate__"
        ]
    },
    "matplotlib__matplotlib-25479": {
        "lib/matplotlib/cm.py": [
            "_get_cmap",
            "ColormapRegistry.register",
            "ColormapRegistry.get_cmap",
            "ScalarMappable"
        ],
        "lib/matplotlib/pyplot.py": [
            "set_cmap",
            "imshow"
        ],
        "lib/matplotlib/colors.py": [
            "LinearSegmentedColormap"
        ]
    },
    "matplotlib__matplotlib-25775": {
        "lib/matplotlib/text.py": [
            "Text",
            "Text.__init__",
            "Text.draw"
        ],
        "lib/matplotlib/backends/backend_agg.py": [
            "RendererAgg.draw_text"
        ],
        "lib/matplotlib/artist.py": [
            "Artist"
        ]
    },
    "matplotlib__matplotlib-25960": {
        "lib/matplotlib/figure.py": [
            "Figure.subplots_adjust",
            "Figure.subfigures",
            "SubplotParams"
        ],
        "lib/matplotlib/gridspec.py": [
            "GridSpec",
            "GridSpecFromSubplotSpec"
        ],
        "lib/matplotlib/axes/_base.py": []
    },
    "matplotlib__matplotlib-26113": {
        "lib/matplotlib/axes/_axes.py": [
            "Axes.hexbin"
        ],
        "lib/matplotlib/collections.py": [
            "PolyCollection",
            "RegularPolyCollection",
            "CircleCollection",
            "EllipseCollection",
            "PatchCollection",
            "TriMesh",
            "QuadMesh"
        ],
        "lib/matplotlib/cbook.py": [
            "delete_masked_points",
            "_combine_masks"
        ]
    },
    "matplotlib__matplotlib-26208": {
        "lib/matplotlib/axes/_base.py": [
            "_AxesBase.update_datalim",
            "_AxesBase.twinx",
            "_AxesBase._make_twin_axes",
            "_AxesBase._set_lim_and_transforms",
            "_AxesBase._unstale_viewLim"
        ],
        "lib/matplotlib/axes/_axes.py": [
            "Axes.stackplot",
            "Axes.plot"
        ],
        "lib/matplotlib/stackplot.py": [
            "stackplot"
        ]
    },
    "matplotlib__matplotlib-26291": {
        "lib/mpl_toolkits/axes_grid1/inset_locator.py": [
            "inset_axes",
            "AnchoredLocatorBase.__call__"
        ],
        "lib/matplotlib/offsetbox.py": [
            "OffsetBox.get_window_extent",
            "OffsetBox.set_figure"
        ],
        "lib/matplotlib/_tight_bbox.py": [
            "adjust_bbox"
        ]
    },
    "matplotlib__matplotlib-26342": {
        "lib/matplotlib/contour.py": [
            "ContourSet",
            "ContourSet.__init__",
            "ContourSet.get_paths",
            "ContourSet.set_paths"
        ],
        "lib/matplotlib/pyplot.py": [],
        "lib/matplotlib/axes/_axes.py": []
    },
    "matplotlib__matplotlib-26466": {
        "lib/matplotlib/axes/_axes.py": [
            "Axes.annotate"
        ],
        "lib/matplotlib/artist.py": [
            "Artist"
        ],
        "lib/matplotlib/patches.py": [
            "FancyArrowPatch"
        ]
    },
    "mwaskom__seaborn-3069": {
        "seaborn/categorical.py": [
            "_CategoricalPlotterNew",
            "_CategoricalFacetPlotter",
            "_CategoricalPlotter",
            "_BoxPlotter",
            "_ViolinPlotter",
            "_CategoricalStatPlotter",
            "_BarPlotter",
            "_PointPlotter",
            "_CountPlotter",
            "_LVPlotter",
            "boxplot",
            "violinplot",
            "boxenplot",
            "stripplot",
            "swarmplot",
            "barplot",
            "pointplot",
            "countplot",
            "catplot"
        ],
        "seaborn/_core/scales.py": [
            "Scale",
            "Nominal",
            "Ordinal",
            "Discrete",
            "ContinuousBase",
            "Continuous",
            "Temporal",
            "PseudoAxis"
        ],
        "seaborn/axisgrid.py": [
            "FacetGrid",
            "PairGrid",
            "JointGrid",
            "pairplot",
            "jointplot"
        ]
    },
    "mwaskom__seaborn-3187": {
        "seaborn/_core/scales.py": [
            "Scale._get_formatter",
            "Continuous._get_formatter",
            "Nominal._get_formatter",
            "Temporal._get_formatter"
        ],
        "seaborn/_core/plot.py": [
            "Plot._setup_scales",
            "Plotter._update_legend_contents"
        ],
        "seaborn/relational.py": [
            "_RelationalPlotter.add_legend_data",
            "_ScatterPlotter.plot",
            "scatterplot"
        ]
    },
    "pallets__flask-5014": {
        "src/flask/blueprints.py": [
            "Blueprint"
        ],
        "src/flask/app.py": [
            "Flask.register_blueprint"
        ],
        "src/flask/__init__.py": []
    },
    "psf__requests-1142": {
        "requests/models.py": [
            "PreparedRequest.prepare_body",
            "PreparedRequest.prepare_content_length"
        ],
        "requests/sessions.py": [
            "Session.request"
        ],
        "requests/api.py": [
            "request",
            "get"
        ]
    },
    "psf__requests-1724": {
        "requests/sessions.py": [
            "Session.request",
            "Session.send"
        ],
        "requests/adapters.py": [
            "HTTPAdapter.send"
        ],
        "requests/api.py": [
            "request"
        ]
    },
    "psf__requests-1766": {
        "requests/auth.py": [
            "HTTPDigestAuth",
            "HTTPDigestAuth.build_digest_header"
        ],
        "requests/sessions.py": [],
        "requests/models.py": []
    },
    "psf__requests-1921": {
        "requests/sessions.py": [
            "Session",
            "Session.request"
        ],
        "requests/models.py": [
            "PreparedRequest.prepare_headers"
        ],
        "requests/utils.py": []
    },
    "psf__requests-2317": {
        "requests/compat.py": [],
        "requests/sessions.py": [
            "Session",
            "Session.request",
            "Session.send"
        ],
        "requests/utils.py": [
            "to_native_string"
        ]
    },
    "psf__requests-2931": {
        "requests/utils.py": [
            "to_native_string"
        ],
        "requests/models.py": [
            "PreparedRequest.prepare_body"
        ],
        "requests/sessions.py": [
            "Session.request"
        ]
    },
    "psf__requests-5414": {
        "requests/exceptions.py": [
            "InvalidURL"
        ],
        "requests/models.py": [
            "PreparedRequest._get_idna_encoded_host",
            "PreparedRequest.prepare_url"
        ],
        "requests/utils.py": []
    },
    "psf__requests-6028": {
        "requests/auth.py": [
            "HTTPProxyAuth"
        ],
        "requests/sessions.py": [
            "Session.rebuild_proxies",
            "Session.request",
            "Session.send"
        ],
        "requests/adapters.py": [
            "HTTPAdapter.proxy_headers",
            "HTTPAdapter.send"
        ]
    },
    "pydata__xarray-2905": {
        "xarray/core/variable.py": [
            "Variable.__setitem__",
            "Variable.values.setter"
        ],
        "xarray/core/dataarray.py": [
            "_LocIndexer.__setitem__"
        ],
        "xarray/core/indexing.py": []
    },
    "pydata__xarray-3095": {
        "xarray/core/dataset.py": [
            "Dataset.copy",
            "Dataset.__deepcopy__"
        ],
        "xarray/core/dataarray.py": [
            "DataArray.copy",
            "DataArray.__deepcopy__"
        ],
        "xarray/core/variable.py": [
            "Variable.copy",
            "Variable.__deepcopy__",
            "IndexVariable.copy"
        ]
    },
    "pydata__xarray-3151": {
        "xarray/core/combine.py": [
            "combine_by_coords",
            "_combine_nd",
            "_combine_all_along_first_dim",
            "_combine_1d",
            "_infer_concat_order_from_coords"
        ],
        "xarray/core/merge.py": [
            "merge",
            "merge_coords",
            "merge_core"
        ],
        "xarray/core/dataset.py": [
            "Dataset"
        ]
    },
    "pydata__xarray-3305": {
        "xarray/core/dataarray.py": [
            "DataArray.quantile",
            "DataArray._copy_attrs_from"
        ],
        "xarray/core/variable.py": [
            "Variable.quantile"
        ],
        "xarray/core/common.py": []
    },
    "pydata__xarray-3677": {
        "xarray/core/dataset.py": [
            "Dataset.merge"
        ],
        "xarray/core/merge.py": [
            "dataset_merge_method",
            "merge_core",
            "coerce_pandas_values"
        ],
        "xarray/core/common.py": [
            "AttrAccessMixin.__getattr__"
        ]
    },
    "pydata__xarray-3993": {
        "xarray/core/dataarray.py": [
            "DataArray.integrate"
        ],
        "xarray/core/dataset.py": [
            "Dataset.integrate",
            "Dataset._integrate_one"
        ],
        "xarray/core/computation.py": []
    },
    "pydata__xarray-4075": {
        "xarray/core/weighted.py": [
            "Weighted._sum_of_weights",
            "Weighted._weighted_mean",
            "Weighted.mean"
        ],
        "xarray/core/ops.py": [],
        "xarray/core/duck_array_ops.py": []
    },
    "pydata__xarray-4094": {
        "xarray/core/variable.py": [
            "Variable.stack",
            "Variable.unstack"
        ],
        "xarray/core/dataset.py": [
            "Dataset.to_stacked_array",
            "Dataset.unstack",
            "Dataset.to_unstacked_dataset"
        ],
        "xarray/core/merge.py": [
            "merge",
            "merge_core",
            "merge_data_and_coords"
        ]
    },
    "pydata__xarray-4356": {
        "xarray/core/nanops.py": [
            "_maybe_null_out",
            "nansum"
        ],
        "xarray/core/dataarray.py": [
            "DataArray.reduce"
        ],
        "xarray/core/variable.py": [
            "Variable.reduce"
        ]
    },
    "pydata__xarray-4629": {
        "xarray/core/merge.py": [
            "merge_attrs"
        ],
        "xarray/core/dataset.py": [
            "Dataset.merge"
        ],
        "xarray/core/dataarray.py": []
    },
    "pydata__xarray-4687": {
        "xarray/core/ops.py": [
            "where_method"
        ],
        "xarray/core/dataarray.py": [
            "DataArray"
        ],
        "xarray/core/variable.py": [
            "Variable.where"
        ]
    },
    "pydata__xarray-4695": {
        "xarray/core/dataarray.py": [
            "DataArray",
            "_LocIndexer"
        ],
        "xarray/core/dataset.py": [
            "Dataset",
            "_LocIndexer"
        ],
        "xarray/core/indexing.py": [
            "remap_label_indexers",
            "convert_label_indexer"
        ]
    },
    "pydata__xarray-4966": {
        "xarray/coding/variables.py": [
            "UnsignedIntegerCoder"
        ],
        "xarray/conventions.py": [
            "decode_cf_variable"
        ],
        "xarray/backends/pydap_.py": [
            "PydapArrayWrapper",
            "PydapDataStore",
            "PydapBackendEntrypoint"
        ]
    },
    "pydata__xarray-6461": {
        "xarray/core/computation.py": [
            "apply_ufunc",
            "where"
        ],
        "xarray/core/duck_array_ops.py": [
            "where"
        ],
        "xarray/core/ops.py": []
    },
    "pydata__xarray-6599": {
        "xarray/core/computation.py": [
            "polyval"
        ],
        "xarray/core/duck_array_ops.py": [
            "timedelta_to_numeric",
            "np_timedelta64_to_float",
            "pd_timedelta_to_float",
            "py_timedelta_to_float"
        ],
        "xarray/core/variable.py": [
            "Variable._to_numeric"
        ]
    },
    "pydata__xarray-6721": {
        "xarray/core/dataset.py": [
            "Dataset.chunks"
        ],
        "xarray/core/common.py": [
            "get_chunksizes"
        ],
        "xarray/core/variable.py": [
            "Variable.data",
            "Variable.values",
            "Variable.chunks",
            "Variable.chunksizes",
            "_as_array_or_item"
        ]
    },
    "pydata__xarray-6744": {
        "xarray/core/rolling.py": [
            "Rolling",
            "DataArrayRolling"
        ],
        "xarray/core/dataarray.py": [
            "DataArray.rolling"
        ],
        "xarray/core/variable.py": []
    },
    "pydata__xarray-6938": {
        "xarray/core/dataset.py": [
            "Dataset.swap_dims",
            "Dataset._replace_with_new_dims",
            "Dataset._replace_vars_and_dims",
            "Dataset.copy",
            "Dataset._replace"
        ],
        "xarray/core/variable.py": [
            "Variable"
        ],
        "xarray/core/indexes.py": []
    },
    "pydata__xarray-6992": {
        "xarray/core/dataset.py": [
            "DataVariables",
            "Dataset.__init__",
            "Dataset._replace",
            "Dataset._replace_with_new_dims",
            "Dataset._replace_vars_and_dims",
            "Dataset._overwrite_indexes",
            "Dataset.reset_coords",
            "Dataset.reset_index",
            "Dataset.__repr__",
            "Dataset.data_vars"
        ],
        "xarray/core/coordinates.py": [
            "DatasetCoordinates"
        ],
        "xarray/core/indexes.py": [
            "Indexes",
            "assert_no_index_corrupted"
        ]
    },
    "pydata__xarray-7229": {
        "xarray/core/merge.py": [
            "merge",
            "merge_core",
            "merge_coords",
            "merge_coordinates_without_align",
            "merge_collected",
            "merge_attrs"
        ],
        "xarray/core/variable.py": [
            "Variable.where",
            "Variable.copy",
            "Variable._replace"
        ],
        "xarray/core/dataarray.py": [
            "DataArray._copy_attrs_from",
            "DataArray.where",
            "DataArray.copy",
            "DataArray._replace"
        ]
    },
    "pydata__xarray-7233": {
        "xarray/core/dataset.py": [
            "Dataset",
            "Dataset._replace_vars_and_dims"
        ],
        "xarray/core/rolling.py": [
            "DatasetCoarsen",
            "DatasetCoarsen.construct"
        ],
        "xarray/core/coordinates.py": [
            "DatasetCoordinates"
        ]
    },
    "pydata__xarray-7393": {
        "xarray/core/variable.py": [
            "Variable.stack",
            "Variable._stack_once"
        ],
        "xarray/core/indexes.py": [
            "Index.stack",
            "PandasMultiIndex.stack"
        ],
        "xarray/core/dtypes.py": [
            "maybe_promote"
        ]
    },
    "pylint-dev__pylint-4551": {
        "pylint/pyreverse/utils.py": [
            "FilterMixIn",
            "LocalsVisitor"
        ],
        "pylint/pyreverse/inspector.py": [
            "Linker"
        ],
        "pylint/pyreverse/diagrams.py": [
            "ClassDiagram"
        ]
    },
    "pylint-dev__pylint-4604": {
        "pylint/checkers/imports.py": [
            "ImportsChecker",
            "ImportsChecker.visit_import",
            "ImportsChecker.visit_importfrom"
        ],
        "pylint/checkers/utils.py": [
            "is_node_in_type_annotation_context"
        ],
        "pylint/lint/pylinter.py": []
    },
    "pylint-dev__pylint-4661": {
        "pylint/constants.py": [],
        "pylint/lint/pylinter.py": [
            "PyLinter"
        ],
        "pylint/config/find_default_config_files.py": [
            "find_default_config_files"
        ]
    },
    "pylint-dev__pylint-4970": {
        "pylint/checkers/similar.py": [
            "Similar",
            "SimilarChecker"
        ],
        "pylint/lint/pylinter.py": [
            "PyLinter"
        ],
        "pylint/config/option_manager_mixin.py": [
            "OptionsManagerMixIn"
        ]
    },
    "pylint-dev__pylint-6386": {
        "pylint/config/option_manager_mixin.py": [
            "OptionsManagerMixIn"
        ],
        "pylint/config/option_parser.py": [
            "OptionParser"
        ],
        "pylint/config/argument.py": [
            "_StoreArgument",
            "_StoreTrueArgument"
        ]
    },
    "pylint-dev__pylint-6528": {
        "pylint/lint/pylinter.py": [
            "PyLinter.should_analyze_file",
            "PyLinter._discover_files",
            "PyLinter._iterate_file_descrs",
            "PyLinter._expand_files"
        ],
        "pylint/lint/expand_modules.py": [
            "expand_modules",
            "_is_in_ignore_list_re"
        ],
        "pylint/config/option_manager_mixin.py": [
            "OptionsManagerMixIn.load_command_line_configuration",
            "OptionsManagerMixIn.load_configuration",
            "OptionsManagerMixIn.load_configuration_from_config"
        ]
    },
    "pylint-dev__pylint-6903": {
        "pylint/lint/run.py": [
            "_query_cpu",
            "_cpu_count",
            "Run"
        ],
        "pylint/lint/parallel.py": [
            "check_parallel"
        ],
        "pylint/lint/pylinter.py": [
            "PyLinter.check"
        ]
    },
    "pylint-dev__pylint-7080": {
        "pylint/lint/pylinter.py": [
            "PyLinter._discover_files",
            "PyLinter.check",
            "PyLinter._iterate_file_descrs"
        ],
        "pylint/config/arguments_manager.py": [
            "_ArgumentsManager._parse_configuration_file",
            "_ArgumentsManager._parse_command_line_configuration",
            "_ArgumentsManager.load_configuration",
            "_ArgumentsManager.load_configuration_from_config",
            "_ArgumentsManager.load_command_line_configuration"
        ],
        "pylint/config/config_file_parser.py": [
            "_ConfigurationFileParser._parse_toml_file",
            "_ConfigurationFileParser.parse_config_file"
        ]
    },
    "pylint-dev__pylint-7277": {
        "pylint/__init__.py": [
            "modify_sys_path"
        ],
        "pylint/lint/run.py": [
            "Run",
            "_PylintConfigRun"
        ],
        "pylint/__main__.py": []
    },
    "pylint-dev__pylint-8898": {
        "pylint/config/argument.py": [
            "_regexp_csv_transfomer"
        ],
        "pylint/config/arguments_manager.py": [
            "_parse_configuration_file"
        ],
        "pylint/config/config_initialization.py": [
            "_config_initialization"
        ]
    },
    "pytest-dev__pytest-10051": {
        "src/_pytest/logging.py": [
            "LogCaptureFixture",
            "LogCaptureFixture.clear",
            "LogCaptureFixture.get_records"
        ],
        "src/_pytest/capture.py": [],
        "src/_pytest/pytester.py": []
    },
    "pytest-dev__pytest-10081": {
        "src/_pytest/unittest.py": [
            "UnitTestCase",
            "TestCaseFunction",
            "_is_skipped"
        ],
        "src/_pytest/debugging.py": [
            "pytestPDB",
            "PdbInvoke",
            "PdbTrace",
            "_enter_pdb",
            "_postmortem_traceback",
            "post_mortem"
        ],
        "src/_pytest/skipping.py": [
            "evaluate_skip_marks",
            "pytest_runtest_setup",
            "pytest_runtest_call",
            "pytest_runtest_makereport"
        ]
    },
    "pytest-dev__pytest-10356": {
        "src/_pytest/mark/structures.py": [
            "get_unpacked_marks",
            "normalize_mark_list",
            "store_mark",
            "Mark",
            "MarkDecorator"
        ],
        "src/_pytest/python.py": [
            "PyobjMixin",
            "Class",
            "Function",
            "FunctionDefinition"
        ],
        "src/_pytest/nodes.py": [
            "Node"
        ]
    },
    "pytest-dev__pytest-5262": {
        "src/_pytest/capture.py": [
            "EncodedFile",
            "EncodedFile.write"
        ],
        "src/_pytest/compat.py": [],
        "src/_pytest/logging.py": []
    },
    "pytest-dev__pytest-5631": {
        "src/_pytest/compat.py": [
            "num_mock_patch_args",
            "getfuncargnames"
        ],
        "src/_pytest/python.py": [],
        "src/_pytest/fixtures.py": []
    },
    "pytest-dev__pytest-5787": {
        "src/_pytest/runner.py": [
            "runtestprotocol",
            "call_and_report",
            "pytest_runtest_makereport"
        ],
        "src/_pytest/reports.py": [
            "TestReport",
            "pytest_report_to_serializable",
            "pytest_report_from_serializable"
        ],
        "src/_pytest/capture.py": []
    },
    "pytest-dev__pytest-5809": {
        "src/_pytest/pastebin.py": [
            "create_new_paste"
        ],
        "src/pytest.py": [],
        "src/_pytest/pytester.py": []
    },
    "pytest-dev__pytest-5840": {
        "src/_pytest/main.py": [
            "Session"
        ],
        "src/_pytest/pathlib.py": [
            "resolve_from_str",
            "unique_path"
        ],
        "src/_pytest/config/findpaths.py": [
            "get_dirs_from_args"
        ]
    },
    "pytest-dev__pytest-6197": {
        "src/_pytest/python.py": [
            "pytest_collect_file",
            "pytest_pycollect_makemodule",
            "Package"
        ],
        "src/_pytest/nodes.py": [
            "Node",
            "Collector",
            "FSCollector",
            "File",
            "Item"
        ],
        "src/_pytest/config/findpaths.py": [
            "determine_setup"
        ]
    },
    "pytest-dev__pytest-6202": {
        "src/_pytest/python.py": [
            "PyobjMixin.getmodpath"
        ],
        "src/_pytest/nodes.py": [
            "Node.reportinfo"
        ],
        "src/_pytest/reports.py": [
            "BaseReport.head_line"
        ]
    },
    "pytest-dev__pytest-7205": {
        "src/_pytest/setuponly.py": [
            "_show_fixture_action"
        ],
        "src/_pytest/_io/saferepr.py": [
            "saferepr"
        ],
        "src/_pytest/runner.py": []
    },
    "pytest-dev__pytest-7236": {
        "src/_pytest/debugging.py": [
            "pytestPDB",
            "PdbInvoke",
            "PdbTrace",
            "_enter_pdb",
            "_postmortem_traceback",
            "post_mortem"
        ],
        "src/_pytest/unittest.py": [
            "UnitTestCase",
            "TestCaseFunction",
            "pytest_runtest_makereport",
            "pytest_runtest_protocol"
        ],
        "src/_pytest/skipping.py": [
            "pytest_runtest_setup",
            "pytest_runtest_makereport"
        ]
    },
    "pytest-dev__pytest-7324": {
        "src/_pytest/debugging.py": [
            "pytestPDB",
            "_validate_usepdb_cls",
            "pytest_addoption",
            "pytest_configure",
            "PdbInvoke.pytest_exception_interact",
            "PdbInvoke.pytest_internalerror",
            "PdbTrace.pytest_pyfunc_call",
            "wrap_pytest_function_for_tracing",
            "maybe_wrap_pytest_function_for_tracing",
            "_enter_pdb",
            "_postmortem_traceback",
            "post_mortem"
        ],
        "src/_pytest/python.py": [
            "pytest_addoption",
            "pytest_cmdline_main",
            "pytest_generate_tests",
            "pytest_configure",
            "async_warn_and_skip",
            "pytest_pyfunc_call",
            "pytest_collect_file",
            "path_matches_patterns",
            "pytest_pycollect_makemodule",
            "pytest_pycollect_makeitem",
            "PyobjMixin",
            "PyCollector",
            "Module",
            "Package",
            "_call_with_optional_argument",
            "_get_first_non_fixture_func",
            "Class",
            "Instance",
            "hasinit",
            "hasnew",
            "CallSpec2",
            "Metafunc",
            "_find_parametrized_scope",
            "_ascii_escaped_by_config",
            "_idval",
            "_idvalset",
            "idmaker",
            "show_fixtures_per_test"
        ],
        "src/_pytest/compat.py": []
    },
    "pytest-dev__pytest-7432": {
        "src/_pytest/skipping.py": [
            "pytest_runtest_makereport"
        ],
        "src/_pytest/reports.py": [
            "TestReport"
        ],
        "src/_pytest/runner.py": [
            "pytest_runtest_makereport"
        ]
    },
    "pytest-dev__pytest-7490": {
        "src/_pytest/skipping.py": [
            "evaluate_xfail_marks",
            "pytest_runtest_call",
            "pytest_runtest_makereport"
        ],
        "src/_pytest/nodes.py": [
            "Node.add_marker"
        ],
        "src/_pytest/mark/structures.py": [
            "Mark",
            "MarkDecorator"
        ]
    },
    "pytest-dev__pytest-7521": {
        "src/_pytest/capture.py": [
            "CaptureFixture",
            "MultiCapture",
            "FDCapture",
            "FDCaptureBinary",
            "SysCapture",
            "SysCaptureBinary"
        ],
        "src/_pytest/compat.py": [
            "ascii_escaped"
        ],
        "src/_pytest/terminal.py": []
    },
    "pytest-dev__pytest-7571": {
        "src/_pytest/logging.py": [
            "LogCaptureFixture",
            "LogCaptureFixture.set_level",
            "LogCaptureFixture._finalize",
            "caplog"
        ],
        "src/_pytest/fixtures.py": [],
        "src/_pytest/capture.py": []
    },
    "pytest-dev__pytest-7982": {
        "src/_pytest/main.py": [
            "Session._recurse"
        ],
        "src/_pytest/pathlib.py": [],
        "src/_pytest/nodes.py": []
    },
    "pytest-dev__pytest-8399": {
        "src/_pytest/unittest.py": [
            "_make_xunit_fixture",
            "UnitTestCase._inject_setup_teardown_fixtures"
        ],
        "src/_pytest/fixtures.py": [
            "FixtureManager"
        ],
        "src/_pytest/main.py": []
    },
    "scikit-learn__scikit-learn-10297": {
        "sklearn/linear_model/ridge.py": [
            "RidgeClassifierCV",
            "RidgeClassifierCV.__init__",
            "RidgeClassifierCV.fit",
            "_BaseRidgeCV",
            "_BaseRidgeCV.__init__",
            "_BaseRidgeCV.fit",
            "_RidgeGCV",
            "_RidgeGCV.__init__",
            "_RidgeGCV.fit"
        ],
        "sklearn/linear_model/__init__.py": [],
        "sklearn/calibration.py": []
    },
    "scikit-learn__scikit-learn-10844": {
        "sklearn/metrics/cluster/supervised.py": [
            "fowlkes_mallows_score"
        ],
        "sklearn/metrics/__init__.py": [],
        "sklearn/metrics/base.py": []
    },
    "scikit-learn__scikit-learn-10908": {
        "sklearn/feature_extraction/text.py": [
            "CountVectorizer",
            "CountVectorizer.get_feature_names",
            "CountVectorizer.transform",
            "VectorizerMixin._validate_vocabulary"
        ],
        "sklearn/exceptions.py": [
            "NotFittedError"
        ],
        "sklearn/utils/validation.py": [
            "check_is_fitted"
        ]
    },
    "scikit-learn__scikit-learn-11310": {
        "sklearn/model_selection/_search.py": [
            "BaseSearchCV",
            "BaseSearchCV.fit"
        ],
        "sklearn/grid_search.py": [
            "BaseSearchCV",
            "BaseSearchCV._fit"
        ],
        "sklearn/model_selection/_validation.py": [
            "_fit_and_score"
        ]
    },
    "scikit-learn__scikit-learn-11578": {
        "sklearn/linear_model/logistic.py": [
            "_log_reg_scoring_path",
            "LogisticRegression",
            "LogisticRegressionCV"
        ],
        "sklearn/linear_model/__init__.py": [],
        "sklearn/linear_model/randomized_l1.py": []
    },
    "scikit-learn__scikit-learn-12585": {
        "sklearn/base.py": [
            "clone"
        ],
        "sklearn/preprocessing/data.py": [
            "StandardScaler"
        ],
        "sklearn/utils/estimator_checks.py": []
    },
    "scikit-learn__scikit-learn-12682": {
        "sklearn/decomposition/dict_learning.py": [
            "SparseCoder",
            "SparseCoder.__init__",
            "SparseCoder.fit",
            "_sparse_encode",
            "sparse_encode"
        ],
        "examples/decomposition/plot_sparse_coding.py": [],
        "sklearn/linear_model/coordinate_descent.py": []
    },
    "scikit-learn__scikit-learn-12973": {
        "sklearn/linear_model/least_angle.py": [
            "LassoLarsIC",
            "LassoLarsIC.fit"
        ],
        "sklearn/utils/estimator_checks.py": [],
        "sklearn/linear_model/omp.py": []
    },
    "scikit-learn__scikit-learn-13124": {
        "sklearn/model_selection/_split.py": [
            "StratifiedKFold",
            "StratifiedKFold._make_test_folds",
            "StratifiedKFold.split"
        ],
        "sklearn/model_selection/__init__.py": [],
        "sklearn/model_selection/_validation.py": [
            "cross_validate",
            "cross_val_score",
            "cross_val_predict",
            "learning_curve",
            "validation_curve"
        ]
    },
    "scikit-learn__scikit-learn-13135": {
        "sklearn/preprocessing/_discretization.py": [
            "KBinsDiscretizer",
            "KBinsDiscretizer.fit",
            "KBinsDiscretizer.transform"
        ],
        "sklearn/preprocessing/data.py": [],
        "sklearn/kernel_approximation.py": []
    },
    "scikit-learn__scikit-learn-13142": {
        "sklearn/mixture/gaussian_mixture.py": [
            "GaussianMixture",
            "GaussianMixture.fit_predict",
            "GaussianMixture.predict"
        ],
        "sklearn/mixture/base.py": [
            "BaseMixture.fit",
            "BaseMixture.fit_predict",
            "BaseMixture.predict"
        ],
        "sklearn/utils/estimator_checks.py": [
            "check_clustering"
        ]
    },
    "scikit-learn__scikit-learn-13328": {
        "sklearn/linear_model/huber.py": [
            "_huber_loss_and_gradient",
            "HuberRegressor"
        ],
        "sklearn/linear_model/stochastic_gradient.py": [
            "BaseSGD",
            "BaseSGDClassifier",
            "BaseSGDRegressor"
        ],
        "sklearn/linear_model/logistic.py": [
            "_logistic_loss_and_grad",
            "_logistic_loss",
            "_logistic_grad_hess",
            "_multinomial_loss",
            "_multinomial_loss_grad",
            "_multinomial_grad_hess",
            "LogisticRegression",
            "LogisticRegressionCV"
        ]
    },
    "scikit-learn__scikit-learn-13439": {
        "sklearn/pipeline.py": [
            "Pipeline"
        ],
        "sklearn/utils/estimator_checks.py": [
            "check_pipeline_consistency"
        ],
        "sklearn/utils/metaestimators.py": []
    },
    "scikit-learn__scikit-learn-13496": {
        "sklearn/ensemble/iforest.py": [
            "IsolationForest"
        ],
        "sklearn/ensemble/forest.py": [
            "BaseForest",
            "RandomForestClassifier",
            "RandomForestRegressor",
            "ExtraTreesClassifier",
            "ExtraTreesRegressor",
            "RandomTreesEmbedding"
        ],
        "sklearn/ensemble/base.py": [
            "BaseEnsemble"
        ]
    },
    "scikit-learn__scikit-learn-13779": {
        "sklearn/ensemble/voting.py": [
            "_parallel_fit_estimator",
            "_BaseVoting",
            "VotingClassifier.fit",
            "VotingRegressor.fit"
        ],
        "sklearn/ensemble/__init__.py": [],
        "sklearn/ensemble/base.py": [
            "BaseEnsemble"
        ]
    },
    "scikit-learn__scikit-learn-14053": {
        "sklearn/tree/export.py": [
            "export_text"
        ],
        "sklearn/tree/tree.py": [
            "DecisionTreeClassifier"
        ],
        "sklearn/tree/__init__.py": []
    },
    "scikit-learn__scikit-learn-14087": {
        "sklearn/linear_model/logistic.py": [
            "LogisticRegressionCV",
            "LogisticRegressionCV.fit"
        ],
        "sklearn/model_selection/_validation.py": [
            "cross_val_score",
            "cross_val_predict"
        ],
        "sklearn/linear_model/__init__.py": []
    },
    "scikit-learn__scikit-learn-14141": {
        "sklearn/utils/_show_versions.py": [
            "_get_deps_info",
            "show_versions"
        ],
        "sklearn/__init__.py": [],
        "sklearn/setup.py": []
    },
    "scikit-learn__scikit-learn-14496": {
        "sklearn/cluster/optics_.py": [
            "OPTICS.__init__",
            "OPTICS.fit",
            "compute_optics_graph"
        ]
    },
    "scikit-learn__scikit-learn-14629": {
        "sklearn/multioutput.py": [
            "MultiOutputClassifier"
        ],
        "sklearn/model_selection/_validation.py": [
            "cross_val_predict",
            "_fit_and_predict",
            "_enforce_prediction_order"
        ],
        "sklearn/discriminant_analysis.py": []
    },
    "scikit-learn__scikit-learn-14710": {
        "sklearn/base.py": [
            "ClassifierMixin.score"
        ],
        "sklearn/ensemble/gradient_boosting.py": [],
        "sklearn/ensemble/weight_boosting.py": []
    },
    "scikit-learn__scikit-learn-14894": {
        "sklearn/svm/base.py": [
            "BaseLibSVM._sparse_fit",
            "BaseLibSVM.fit",
            "BaseLibSVM._validate_targets",
            "BaseLibSVM._warn_from_fit_status",
            "BaseLibSVM._dense_fit",
            "BaseLibSVM._sparse_predict",
            "BaseLibSVM._compute_kernel",
            "BaseLibSVM._decision_function",
            "BaseLibSVM._dense_decision_function",
            "BaseLibSVM._sparse_decision_function",
            "BaseLibSVM._validate_for_predict",
            "BaseLibSVM.coef_",
            "BaseLibSVM._get_coef",
            "BaseLibSVM.n_support_"
        ],
        "sklearn/svm/classes.py": [
            "SVR",
            "SVR.fit"
        ],
        "sklearn/svm/__init__.py": []
    },
    "scikit-learn__scikit-learn-14983": {
        "sklearn/model_selection/_split.py": [
            "RepeatedKFold",
            "RepeatedStratifiedKFold"
        ],
        "sklearn/utils/_pprint.py": [
            "_EstimatorPrettyPrinter._pprint_estimator"
        ],
        "sklearn/model_selection/__init__.py": []
    },
    "scikit-learn__scikit-learn-15100": {
        "sklearn/feature_extraction/text.py": [
            "strip_accents_unicode",
            "CountVectorizer",
            "TfidfVectorizer"
        ],
        "sklearn/feature_extraction/dict_vectorizer.py": [],
        "sklearn/compose/_column_transformer.py": []
    },
    "scikit-learn__scikit-learn-25102": {
        "sklearn/utils/_set_output.py": [
            "_wrap_in_pandas_container",
            "_wrap_data_with_container",
            "_SetOutputMixin"
        ],
        "sklearn/utils/_mocking.py": [
            "MockDataFrame"
        ],
        "sklearn/base.py": [
            "TransformerMixin"
        ]
    },
    "scikit-learn__scikit-learn-25232": {
        "sklearn/impute/_iterative.py": [
            "IterativeImputer",
            "IterativeImputer.__init__",
            "IterativeImputer._initial_imputation"
        ],
        "sklearn/impute/__init__.py": [
            "__getattr__"
        ],
        "sklearn/experimental/enable_iterative_imputer.py": []
    },
    "scikit-learn__scikit-learn-25747": {
        "sklearn/compose/_column_transformer.py": [
            "ColumnTransformer.fit_transform",
            "ColumnTransformer.transform",
            "ColumnTransformer._hstack"
        ],
        "sklearn/utils/_set_output.py": [
            "_wrap_in_pandas_container",
            "_wrap_data_with_container"
        ],
        "sklearn/compose/__init__.py": []
    },
    "scikit-learn__scikit-learn-25931": {
        "sklearn/ensemble/_iforest.py": [
            "IsolationForest",
            "IsolationForest.fit",
            "IsolationForest.predict"
        ],
        "sklearn/utils/validation.py": [
            "_check_feature_names_in",
            "_get_feature_names"
        ],
        "sklearn/ensemble/_base.py": []
    },
    "scikit-learn__scikit-learn-25973": {
        "sklearn/model_selection/_split.py": [
            "LeaveOneGroupOut",
            "_CVIterableWrapper"
        ],
        "sklearn/model_selection/_validation.py": [
            "_aggregate_score_dicts",
            "cross_validate",
            "cross_val_score",
            "cross_val_predict",
            "permutation_test_score",
            "learning_curve",
            "validation_curve"
        ],
        "sklearn/model_selection/_search_successive_halving.py": [
            "BaseSuccessiveHalving"
        ]
    },
    "scikit-learn__scikit-learn-26194": {
        "sklearn/metrics/_ranking.py": [
            "roc_curve",
            "_binary_clf_curve"
        ],
        "sklearn/metrics/_plot/roc_curve.py": [],
        "sklearn/metrics/_scorer.py": []
    },
    "scikit-learn__scikit-learn-26323": {
        "sklearn/compose/_column_transformer.py": [
            "ColumnTransformer.set_output",
            "ColumnTransformer._iter",
            "ColumnTransformer._validate_remainder",
            "ColumnTransformer._fit_transform",
            "ColumnTransformer.fit_transform",
            "ColumnTransformer.transform",
            "ColumnTransformer._hstack"
        ],
        "sklearn/utils/_set_output.py": [
            "_safe_set_output",
            "_wrap_data_with_container",
            "_wrap_in_pandas_container"
        ],
        "sklearn/utils/estimator_checks.py": [
            "check_set_output_transform",
            "check_set_output_transform_pandas",
            "check_global_ouptut_transform_pandas"
        ]
    },
    "scikit-learn__scikit-learn-9288": {
        "sklearn/cluster/k_means_.py": [
            "k_means",
            "_kmeans_single_elkan",
            "_kmeans_single_lloyd",
            "KMeans",
            "MiniBatchKMeans"
        ],
        "sklearn/utils/_joblib.py": [
            "effective_n_jobs"
        ],
        "sklearn/cluster/__init__.py": []
    },
    "sphinx-doc__sphinx-10323": {
        "sphinx/util/rst.py": [
            "prepend_prolog",
            "append_epilog"
        ],
        "sphinx/directives/code.py": [
            "dedent_lines",
            "LiteralIncludeReader",
            "LiteralInclude"
        ],
        "sphinx/transforms/post_transforms/code.py": [
            "HighlightLanguageVisitor"
        ]
    },
    "sphinx-doc__sphinx-10435": {
        "sphinx/writers/latex.py": [
            "LaTeXTranslator",
            "LaTeXTranslator.visit_literal",
            "LaTeXTranslator.depart_literal"
        ],
        "sphinx/builders/latex/nodes.py": [],
        "sphinx/builders/latex/util.py": []
    },
    "sphinx-doc__sphinx-10449": {
        "sphinx/ext/autodoc/typehints.py": [
            "record_typehints",
            "merge_typehints",
            "insert_field_list",
            "modify_field_list",
            "augment_descriptions_with_types",
            "setup"
        ],
        "sphinx/ext/autodoc/__init__.py": [
            "identity",
            "_All",
            "_Empty",
            "members_option",
            "exclude_members_option",
            "inherited_members_option",
            "member_order_option",
            "class_doc_from_option",
            "annotation_option",
            "bool_option",
            "merge_members_option",
            "cut_lines",
            "between",
            "Options",
            "ObjectMember",
            "Documenter",
            "ModuleDocumenter",
            "ModuleLevelDocumenter",
            "ClassLevelDocumenter",
            "DocstringSignatureMixin",
            "DocstringStripSignatureMixin",
            "FunctionDocumenter",
            "DecoratorDocumenter",
            "ClassDocumenter",
            "ExceptionDocumenter",
            "DataDocumenterMixinBase",
            "GenericAliasMixin",
            "NewType"
        ],
        "sphinx/ext/autodoc/directive.py": []
    },
    "sphinx-doc__sphinx-10466": {
        "sphinx/builders/gettext.py": [
            "Message",
            "Message.__init__"
        ],
        "sphinx/util/i18n.py": [
            "CatalogRepository",
            "CatalogRepository.pofiles",
            "CatalogRepository.catalogs"
        ],
        "sphinx/util/nodes.py": [
            "extract_messages"
        ]
    },
    "sphinx-doc__sphinx-10614": {
        "sphinx/ext/inheritance_diagram.py": [
            "InheritanceGraph",
            "InheritanceGraph.generate_dot",
            "html_visit_inheritance_diagram"
        ],
        "sphinx/ext/graphviz.py": [
            "fix_svg_relative_paths",
            "render_dot_html",
            "html_visit_graphviz"
        ],
        "sphinx/builders/html/__init__.py": [
            "StandaloneHTMLBuilder"
        ]
    },
    "sphinx-doc__sphinx-10673": {
        "sphinx/environment/collectors/toctree.py": [
            "TocTreeCollector"
        ],
        "sphinx/environment/adapters/toctree.py": [
            "TocTree"
        ],
        "sphinx/builders/html/__init__.py": [
            "StandaloneHTMLBuilder"
        ]
    },
    "sphinx-doc__sphinx-11445": {
        "sphinx/environment/collectors/title.py": [
            "TitleCollector"
        ],
        "sphinx/util/rst.py": [
            "prepend_prolog"
        ],
        "sphinx/application.py": [
            "Sphinx"
        ]
    },
    "sphinx-doc__sphinx-11510": {
        "sphinx/environment/__init__.py": [
            "BuildEnvironment"
        ],
        "sphinx/events.py": [
            "EventManager"
        ],
        "sphinx/application.py": [
            "Sphinx"
        ]
    },
    "sphinx-doc__sphinx-7440": {
        "doc/conf.py": [
            "setup"
        ]
    },
    "sphinx-doc__sphinx-7454": {
        "sphinx/ext/autodoc/typehints.py": [
            "record_typehints",
            "merge_typehints",
            "insert_field_list",
            "modify_field_list",
            "setup"
        ],
        "sphinx/ext/autodoc/directive.py": [
            "DummyOptionSpec",
            "DocumenterBridge",
            "process_documenter_options",
            "parse_generated_content",
            "AutodocDirective"
        ],
        "sphinx/ext/intersphinx.py": [
            "InventoryAdapter",
            "_strip_basic_auth",
            "_read_from_url",
            "_get_safe_url",
            "fetch_inventory",
            "fetch_inventory_group",
            "load_mappings",
            "missing_reference",
            "normalize_intersphinx_mapping",
            "setup",
            "inspect_main"
        ]
    },
    "sphinx-doc__sphinx-7462": {
        "sphinx/domains/python.py": [
            "unparse",
            "PyObject",
            "PyFunction",
            "PyDecoratorFunction",
            "PyMethod",
            "PyDecoratorMethod"
        ],
        "sphinx/util/typing.py": [
            "stringify",
            "_stringify_py37",
            "_stringify_py36"
        ],
        "sphinx/util/docstrings.py": []
    },
    "sphinx-doc__sphinx-7590": {
        "sphinx/domains/cpp.py": [
            "ASTLiteral",
            "ASTNumberLiteral",
            "ASTStringLiteral",
            "ASTCharLiteral",
            "ASTExpression",
            "ASTPostfixExpr",
            "ASTUnaryOpExpr",
            "ASTBinOpExpr",
            "ASTFallbackExpr",
            "DefinitionParser",
            "DefinitionParser._parse_literal",
            "DefinitionParser._parse_primary_expression",
            "DefinitionParser._parse_postfix_expression",
            "DefinitionParser._parse_unary_expression",
            "DefinitionParser._parse_expression",
            "DefinitionParser._parse_expression_fallback"
        ],
        "sphinx/parsers.py": [],
        "sphinx/highlighting.py": []
    },
    "sphinx-doc__sphinx-7748": {
        "sphinx/ext/autodoc/__init__.py": [
            "DocstringSignatureMixin",
            "DocstringSignatureMixin._find_signature",
            "DocstringSignatureMixin.get_doc",
            "DocstringSignatureMixin.format_signature",
            "FunctionDocumenter",
            "FunctionDocumenter.format_signature",
            "MethodDocumenter",
            "MethodDocumenter.format_signature",
            "ClassDocumenter",
            "ClassDocumenter.format_signature"
        ],
        "sphinx/ext/autodoc/directive.py": [
            "AutodocDirective",
            "AutodocDirective.run"
        ],
        "sphinx/util/docstrings.py": [
            "prepare_docstring"
        ]
    },
    "sphinx-doc__sphinx-7757": {
        "sphinx/domains/python.py": [
            "_parse_arglist",
            "_pseudo_parse_arglist",
            "PyFunction",
            "PyMethod",
            "PyDecoratorFunction",
            "PyDecoratorMethod"
        ],
        "sphinx/util/inspect.py": [
            "signature",
            "stringify_signature"
        ],
        "sphinx/parsers.py": []
    },
    "sphinx-doc__sphinx-7889": {
        "sphinx/ext/autodoc/mock.py": [
            "_make_subclass"
        ],
        "sphinx/ext/autodoc/__init__.py": [
            "Documenter",
            "ModuleDocumenter",
            "ClassDocumenter",
            "DataDocumenter",
            "GenericAliasDocumenter",
            "TypeVarDocumenter",
            "MethodDocumenter",
            "AttributeDocumenter",
            "PropertyDocumenter",
            "InstanceAttributeDocumenter",
            "SlotsAttributeDocumenter"
        ],
        "sphinx/ext/autodoc/typehints.py": [
            "record_typehints",
            "merge_typehints"
        ]
    },
    "sphinx-doc__sphinx-7910": {
        "sphinx/util/inspect.py": [
            "unwrap",
            "unwrap_all",
            "safe_getattr",
            "getdoc"
        ],
        "sphinx/ext/napoleon/docstring.py": [
            "GoogleDocstring",
            "NumpyDocstring"
        ],
        "sphinx/ext/autodoc/__init__.py": [
            "Documenter",
            "MethodDocumenter",
            "ClassDocumenter",
            "FunctionDocumenter",
            "PropertyDocumenter"
        ]
    },
    "sphinx-doc__sphinx-7985": {
        "sphinx/builders/linkcheck.py": [
            "CheckExternalLinksBuilder",
            "setup"
        ],
        "sphinx/util/nodes.py": [
            "traverse_parent",
            "traverse_translatable_index",
            "nested_parse_with_titles",
            "clean_astext",
            "split_explicit_title",
            "make_refnode"
        ],
        "sphinx/environment/__init__.py": [
            "BuildEnvironment"
        ]
    },
    "sphinx-doc__sphinx-8035": {
        "sphinx/ext/autodoc/directive.py": [
            "AutodocDirective"
        ],
        "sphinx/ext/autodoc/__init__.py": [
            "members_option",
            "ModuleDocumenter",
            "ClassDocumenter"
        ],
        "sphinx/ext/autodoc/typehints.py": []
    },
    "sphinx-doc__sphinx-8056": {
        "sphinx/ext/napoleon/docstring.py": [
            "NumpyDocstring",
            "NumpyDocstring._consume_field",
            "NumpyDocstring._parse_parameters_section",
            "NumpyDocstring._format_fields",
            "NumpyDocstring._format_field"
        ],
        "sphinx/ext/napoleon/__init__.py": [
            "_process_docstring"
        ],
        "sphinx/ext/autodoc/directive.py": [
            "AutodocDirective"
        ]
    },
    "sphinx-doc__sphinx-8120": {
        "sphinx/util/i18n.py": [
            "CatalogInfo",
            "CatalogRepository",
            "find_catalog_files",
            "find_catalog_source_files"
        ],
        "sphinx/builders/gettext.py": [
            "I18nBuilder",
            "MessageCatalogBuilder"
        ],
        "sphinx/transforms/i18n.py": [
            "Locale"
        ]
    },
    "sphinx-doc__sphinx-8265": {
        "sphinx/ext/autodoc/__init__.py": [
            "Documenter.format_args",
            "Documenter.format_signature",
            "MethodDocumenter.format_args",
            "MethodDocumenter.format_signature",
            "FunctionDocumenter.format_args",
            "FunctionDocumenter.format_signature",
            "ClassDocumenter.format_args",
            "ClassDocumenter.format_signature"
        ],
        "sphinx/util/docstrings.py": [
            "prepare_docstring"
        ],
        "sphinx/ext/autodoc/typehints.py": []
    },
    "sphinx-doc__sphinx-8269": {
        "sphinx/builders/linkcheck.py": [
            "CheckExternalLinksBuilder",
            "check_anchor"
        ],
        "sphinx/util/requests.py": [
            "get",
            "head"
        ],
        "sphinx/util/nodes.py": []
    },
    "sphinx-doc__sphinx-8459": {
        "sphinx/ext/autodoc/typehints.py": [
            "record_typehints",
            "merge_typehints",
            "insert_field_list",
            "modify_field_list",
            "setup"
        ],
        "sphinx/ext/autodoc/__init__.py": [
            "identity",
            "_All",
            "_Empty",
            "members_option",
            "members_set_option",
            "exclude_members_option",
            "inherited_members_option",
            "member_order_option",
            "annotation_option",
            "bool_option",
            "merge_special_members_option",
            "merge_members_option",
            "cut_lines",
            "between",
            "Options",
            "ObjectMember",
            "Documenter",
            "ModuleDocumenter",
            "ModuleLevelDocumenter",
            "ClassLevelDocumenter",
            "DocstringSignatureMixin",
            "DocstringStripSignatureMixin",
            "FunctionDocumenter",
            "SingledispatchFunctionDocumenter",
            "DecoratorDocumenter",
            "ClassDocumenter",
            "ExceptionDocumenter",
            "DataDocumenter",
            "DataDeclaration"
        ],
        "sphinx/ext/autodoc/directive.py": []
    },
    "sphinx-doc__sphinx-8475": {
        "sphinx/builders/linkcheck.py": [
            "CheckExternalLinksBuilder"
        ],
        "sphinx/util/requests.py": [
            "get",
            "head"
        ],
        "sphinx/errors.py": []
    },
    "sphinx-doc__sphinx-8548": {
        "sphinx/ext/autodoc/__init__.py": [
            "Documenter",
            "ClassDocumenter",
            "AttributeDocumenter"
        ],
        "sphinx/ext/autodoc/importer.py": [
            "get_class_members"
        ],
        "sphinx/ext/autodoc/directive.py": [
            "AutodocDirective"
        ]
    },
    "sphinx-doc__sphinx-8551": {
        "sphinx/domains/python.py": [
            "type_to_xref",
            "_parse_annotation",
            "PyXrefMixin",
            "PyField",
            "PyTypedField",
            "PyObject",
            "PythonDomain"
        ],
        "sphinx/util/docfields.py": [
            "Field",
            "TypedField"
        ],
        "sphinx/environment/__init__.py": [
            "BuildEnvironment"
        ]
    },
    "sphinx-doc__sphinx-8593": {
        "sphinx/ext/autodoc/__init__.py": [
            "Documenter",
            "ModuleDocumenter",
            "DataDocumenter"
        ],
        "sphinx/ext/autodoc/directive.py": [
            "AutodocDirective"
        ],
        "sphinx/ext/autodoc/typehints.py": []
    },
    "sphinx-doc__sphinx-8595": {
        "sphinx/ext/autodoc/__init__.py": [
            "ModuleDocumenter",
            "ModuleDocumenter.get_object_members",
            "ModuleDocumenter.get_module_members"
        ],
        "sphinx/ext/autodoc/importer.py": [
            "get_module_members"
        ],
        "sphinx/ext/autodoc/directive.py": []
    },
    "sphinx-doc__sphinx-8621": {
        "sphinx/roles.py": [
            "XRefRole",
            "indexmarkup_role",
            "PEP",
            "RFC",
            "menusel_role",
            "GUILabel",
            "MenuSelection",
            "emph_literal_role",
            "EmphasizedLiteral",
            "abbr_role",
            "Abbreviation",
            "index_role",
            "Index",
            "setup"
        ],
        "sphinx/util/rst.py": [],
        "sphinx/util/docutils.py": []
    },
    "sphinx-doc__sphinx-8638": {
        "sphinx/ext/autodoc/__init__.py": [
            "Documenter",
            "ModuleDocumenter",
            "ClassDocumenter",
            "AttributeDocumenter"
        ],
        "sphinx/ext/autodoc/directive.py": [
            "DocumenterBridge",
            "AutodocDirective"
        ],
        "sphinx/ext/autodoc/importer.py": [
            "get_object_members",
            "get_class_members"
        ]
    },
    "sphinx-doc__sphinx-8721": {
        "sphinx/ext/viewcode.py": [
            "collect_pages",
            "setup"
        ],
        "sphinx/builders/epub3.py": [
            "setup"
        ],
        "sphinx/application.py": [
            "add_config_value"
        ]
    },
    "sphinx-doc__sphinx-9229": {
        "sphinx/ext/autodoc/typehints.py": [
            "record_typehints",
            "merge_typehints",
            "insert_field_list",
            "modify_field_list",
            "augment_descriptions_with_types",
            "setup"
        ],
        "sphinx/ext/autodoc/directive.py": [
            "DummyOptionSpec",
            "DocumenterBridge",
            "process_documenter_options",
            "parse_generated_content",
            "AutodocDirective"
        ],
        "sphinx/ext/autodoc/__init__.py": [
            "identity",
            "_All",
            "_Empty",
            "members_option",
            "members_set_option",
            "exclude_members_option",
            "inherited_members_option",
            "member_order_option",
            "class_doc_from_option",
            "annotation_option",
            "bool_option",
            "merge_special_members_option",
            "merge_members_option",
            "cut_lines",
            "between",
            "Options",
            "ObjectMember",
            "Documenter",
            "ModuleDocumenter",
            "ModuleLevelDocumenter",
            "ClassLevelDocumenter",
            "DocstringSignatureMixin",
            "DocstringStrip"
        ]
    },
    "sphinx-doc__sphinx-9230": {
        "sphinx/util/docstrings.py": [
            "prepare_docstring"
        ],
        "sphinx/ext/autodoc/typehints.py": [
            "record_typehints",
            "merge_typehints",
            "insert_field_list",
            "modify_field_list",
            "augment_descriptions_with_types"
        ],
        "sphinx/ext/autodoc/directive.py": [
            "AutodocDirective"
        ]
    },
    "sphinx-doc__sphinx-9258": {
        "sphinx/util/docstrings.py": [
            "separate_metadata",
            "extract_metadata",
            "prepare_docstring",
            "prepare_commentdoc"
        ],
        "sphinx/ext/autodoc/typehints.py": [
            "record_typehints",
            "merge_typehints",
            "insert_field_list",
            "modify_field_list",
            "augment_descriptions_with_types",
            "setup"
        ],
        "sphinx/parsers.py": [
            "Parser",
            "RSTParser",
            "setup"
        ]
    },
    "sphinx-doc__sphinx-9281": {
        "sphinx/ext/autodoc/typehints.py": [
            "record_typehints",
            "merge_typehints",
            "insert_field_list",
            "modify_field_list",
            "augment_descriptions_with_types",
            "setup"
        ],
        "sphinx/ext/autodoc/__init__.py": [
            "identity",
            "_All",
            "_Empty",
            "members_option",
            "members_set_option",
            "exclude_members_option",
            "inherited_members_option",
            "member_order_option",
            "class_doc_from_option",
            "annotation_option",
            "bool_option",
            "merge_special_members_option",
            "merge_members_option",
            "cut_lines",
            "between",
            "Options",
            "ObjectMember",
            "Documenter",
            "ModuleDocumenter",
            "ModuleLevelDocumenter",
            "ClassLevelDocumenter",
            "DocstringSignatureMixin",
            "DocstringStripSignatureMixin",
            "FunctionDocumenter",
            "DecoratorDocumenter",
            "ClassDocumenter",
            "ExceptionDocumenter",
            "DataDocumenter"
        ],
        "sphinx/ext/autodoc/directive.py": []
    },
    "sphinx-doc__sphinx-9320": {
        "sphinx/cmd/quickstart.py": [
            "do_prompt",
            "main",
            "is_path",
            "allow_empty",
            "ask_user"
        ],
        "sphinx/util/console.py": [],
        "sphinx/util/fileutil.py": []
    },
    "sphinx-doc__sphinx-9367": {
        "sphinx/pycode/ast.py": [
            "unparse",
            "_UnparseVisitor",
            "_UnparseVisitor.visit_Tuple"
        ],
        "sphinx/highlighting.py": [],
        "sphinx/pygments_styles.py": []
    },
    "sphinx-doc__sphinx-9461": {
        "sphinx/ext/autodoc/__init__.py": [
            "Documenter",
            "ClassDocumenter",
            "MethodDocumenter",
            "PropertyDocumenter"
        ],
        "sphinx/ext/autodoc/directive.py": [
            "DocumenterBridge"
        ],
        "sphinx/util/inspect.py": [
            "isclassmethod",
            "isproperty",
            "getdoc"
        ]
    },
    "sphinx-doc__sphinx-9591": {
        "sphinx/ext/autodoc/typehints.py": [
            "record_typehints",
            "merge_typehints",
            "insert_field_list",
            "modify_field_list",
            "augment_descriptions_with_types",
            "setup"
        ],
        "sphinx/ext/autodoc/__init__.py": [
            "Documenter",
            "PropertyDocumenter",
            "AttributeDocumenter"
        ],
        "sphinx/util/typing.py": [
            "get_type_hints",
            "restify",
            "stringify"
        ]
    },
    "sphinx-doc__sphinx-9602": {
        "sphinx/util/typing.py": [
            "restify",
            "_restify_py37",
            "_restify_py36",
            "stringify",
            "_stringify_py37",
            "_stringify_py36"
        ],
        "sphinx/ext/autodoc/__init__.py": [
            "Documenter",
            "FunctionDocumenter",
            "DataDocumenter",
            "AttributeDocumenter"
        ],
        "sphinx/ext/autodoc/typehints.py": [
            "record_typehints",
            "merge_typehints",
            "modify_field_list",
            "augment_descriptions_with_types"
        ]
    },
    "sphinx-doc__sphinx-9658": {
        "sphinx/ext/autodoc/mock.py": [
            "_MockObject",
            "_MockModule"
        ],
        "sphinx/ext/autodoc/__init__.py": [
            "Documenter",
            "ClassDocumenter",
            "ModuleDocumenter",
            "FunctionDocumenter",
            "AttributeDocumenter",
            "PropertyDocumenter"
        ],
        "sphinx/ext/autodoc/importer.py": [
            "import_object",
            "get_class_members"
        ]
    },
    "sphinx-doc__sphinx-9673": {
        "sphinx/ext/autodoc/typehints.py": [
            "record_typehints",
            "merge_typehints",
            "insert_field_list",
            "modify_field_list",
            "augment_descriptions_with_types",
            "setup"
        ],
        "sphinx/ext/napoleon/docstring.py": [
            "GoogleDocstring",
            "NumpyDocstring",
            "_convert_type_spec",
            "_recombine_set_tokens",
            "_tokenize_type_spec",
            "_token_type",
            "_convert_numpy_type_spec"
        ],
        "sphinx/ext/napoleon/__init__.py": [
            "Config",
            "setup",
            "_patch_python_domain",
            "_process_docstring",
            "_skip_member"
        ]
    },
    "sphinx-doc__sphinx-9698": {
        "sphinx/domains/python.py": [
            "PyMethod",
            "PyProperty"
        ],
        "sphinx/environment/adapters/indexentries.py": [
            "IndexEntries.create_index"
        ],
        "sphinx/directives/patches.py": []
    },
    "sphinx-doc__sphinx-9711": {
        "sphinx/extension.py": [
            "verify_needs_extensions"
        ],
        "sphinx/application.py": [
            "Sphinx"
        ],
        "sphinx/config.py": [
            "Config"
        ]
    },
    "sympy__sympy-11618": {
        "sympy/geometry/point.py": [
            "Point.distance",
            "Point3D"
        ],
        "sympy/geometry/entity.py": [
            "GeometryEntity"
        ],
        "sympy/geometry/util.py": [
            "_ordered_points"
        ]
    },
    "sympy__sympy-12096": {
        "sympy/core/function.py": [
            "Function._eval_evalf"
        ],
        "sympy/core/evalf.py": [
            "evalf",
            "EvalfMixin._eval_evalf"
        ],
        "sympy/utilities/lambdify.py": [
            "implemented_function"
        ]
    },
    "sympy__sympy-12419": {
        "sympy/matrices/expressions/matexpr.py": [
            "MatrixExpr",
            "Identity"
        ],
        "sympy/matrices/expressions/matmul.py": [
            "MatMul",
            "refine_MatMul"
        ],
        "sympy/matrices/expressions/diagonal.py": []
    },
    "sympy__sympy-12481": {
        "sympy/combinatorics/permutations.py": [
            "Permutation",
            "Permutation.__new__",
            "Permutation._af_new"
        ],
        "sympy/combinatorics/__init__.py": [],
        "sympy/combinatorics/perm_groups.py": []
    },
    "sympy__sympy-12489": {
        "sympy/combinatorics/permutations.py": [
            "Permutation"
        ],
        "sympy/core/basic.py": [
            "Basic"
        ],
        "sympy/core/function.py": []
    },
    "sympy__sympy-13031": {
        "sympy/matrices/matrices.py": [
            "MatrixBase.hstack",
            "MatrixBase.vstack",
            "MatrixBase._handle_creation_inputs",
            "MatrixBase.__init__",
            "MatrixBase.shape",
            "MatrixBase._new",
            "_MinimalMatrix.__init__",
            "_MinimalMatrix.shape",
            "_MatrixWrapper.__init__",
            "_MatrixWrapper.shape"
        ],
        "sympy/matrices/expressions/blockmatrix.py": [
            "BlockMatrix.shape",
            "BlockDiagMatrix.shape"
        ],
        "sympy/matrices/densetools.py": [
            "augment"
        ]
    },
    "sympy__sympy-13091": {
        "sympy/core/basic.py": [
            "Basic.__eq__",
            "Basic.__ne__"
        ],
        "sympy/core/expr.py": [
            "Expr.__ge__",
            "Expr.__le__",
            "Expr.__gt__",
            "Expr.__lt__"
        ],
        "sympy/core/relational.py": [
            "Equality._eval_relation",
            "Unequality._eval_relation",
            "GreaterThan._eval_relation",
            "LessThan._eval_relation",
            "StrictGreaterThan._eval_relation",
            "StrictLessThan._eval_relation"
        ]
    },
    "sympy__sympy-13372": {
        "sympy/core/evalf.py": [
            "evalf",
            "evalf_mul"
        ],
        "sympy/core/mul.py": [
            "Mul"
        ],
        "sympy/core/basic.py": []
    },
    "sympy__sympy-13480": {
        "sympy/functions/elementary/hyperbolic.py": [
            "coth",
            "coth.eval"
        ],
        "sympy/functions/elementary/trigonometric.py": [
            "cot",
            "cot.eval"
        ],
        "sympy/core/function.py": []
    },
    "sympy__sympy-13551": {
        "sympy/concrete/products.py": [
            "Product",
            "Product.doit",
            "Product._eval_product"
        ],
        "sympy/concrete/expr_with_limits.py": [
            "ExprWithLimits"
        ],
        "sympy/concrete/guess.py": []
    },
    "sympy__sympy-13615": {
        "sympy/sets/sets.py": [
            "Set.complement",
            "Set._complement",
            "Interval._complement",
            "FiniteSet._complement",
            "Complement.__new__",
            "Complement.reduce"
        ],
        "sympy/sets/fancysets.py": [
            "Naturals",
            "Naturals0",
            "Integers",
            "Reals",
            "ImageSet",
            "Range",
            "ComplexRegion",
            "Complexes"
        ],
        "sympy/core/expr.py": [
            "Expr"
        ]
    },
    "sympy__sympy-13647": {
        "sympy/matrices/matrices.py": [
            "MatrixBase"
        ],
        "sympy/matrices/dense.py": [
            "MutableDenseMatrix",
            "MutableDenseMatrix.col_insert"
        ],
        "sympy/matrices/densetools.py": []
    },
    "sympy__sympy-13757": {
        "sympy/polys/polytools.py": [
            "Poly.__mul__",
            "Poly.__rmul__"
        ],
        "sympy/core/mul.py": [
            "Mul.flatten"
        ],
        "sympy/core/expr.py": [
            "Expr.__mul__",
            "Expr.__rmul__"
        ]
    },
    "sympy__sympy-13798": {
        "sympy/printing/latex.py": [
            "LatexPrinter",
            "latex"
        ],
        "sympy/printing/pretty/pretty.py": [
            "PrettyPrinter"
        ],
        "sympy/printing/defaults.py": [
            "DefaultPrinting"
        ]
    },
    "sympy__sympy-13852": {
        "sympy/functions/special/zeta_functions.py": [
            "polylog",
            "polylog.eval",
            "polylog._eval_expand_func"
        ],
        "sympy/functions/special/hyper.py": [
            "hyper._eval_expand_func"
        ],
        "sympy/functions/special/__init__.py": []
    },
    "sympy__sympy-13877": {
        "sympy/matrices/matrices.py": [
            "MatrixDeterminant._eval_det_bareiss",
            "MatrixDeterminant.det",
            "MatrixDeterminant._eval_determinant",
            "MatrixDeterminant._eval_det_lu",
            "MatrixDeterminant._eval_berkowitz_vector",
            "MatrixDeterminant._eval_berkowitz_toeplitz_matrix",
            "MatrixDeterminant._eval_det_berkowitz",
            "MatrixDeterminant.adjugate",
            "MatrixDeterminant.charpoly",
            "MatrixDeterminant.cofactor",
            "MatrixDeterminant.cofactor_matrix",
            "MatrixDeterminant.minor",
            "MatrixDeterminant.minor_submatrix",
            "MatrixReductions._eval_col_op_swap",
            "MatrixReductions._eval_col_op_multiply_col_by_const",
            "MatrixReductions._eval_col_op_add_multiple_to_other_col",
            "MatrixReductions._eval_row_op_swap",
            "MatrixReductions._eval_row_op_multiply_row_by_const",
            "MatrixReductions._eval_row_op_add_multiple_to_other_row",
            "MatrixReductions._eval_echelon_form",
            "MatrixReductions._eval_is_echelon",
            "MatrixReductions._eval_rref",
            "MatrixReductions._normalize_op_args",
            "MatrixReductions._permute_complexity_right"
        ],
        "sympy/matrices/expressions/determinant.py": [],
        "sympy/core/expr.py": []
    },
    "sympy__sympy-13878": {
        "sympy/stats/crv_types.py": [
            "ArcsinDistribution",
            "DagumDistribution",
            "ErlangDistribution",
            "FrechetDistribution",
            "GammaDistribution",
            "GammaInverseDistribution",
            "KumaraswamyDistribution",
            "LaplaceDistribution",
            "LogisticDistribution",
            "NakagamiDistribution",
            "StudentTDistribution",
            "UniformSumDistribution"
        ],
        "sympy/stats/crv.py": [
            "SingleContinuousDistribution._cdf",
            "SingleContinuousDistribution.cdf"
        ],
        "sympy/stats/symbolic_probability.py": []
    },
    "sympy__sympy-13974": {
        "sympy/physics/quantum/tensorproduct.py": [
            "TensorProduct",
            "tensor_product_simp",
            "tensor_product_simp_Mul"
        ],
        "sympy/physics/quantum/operator.py": [
            "HermitianOperator._eval_power",
            "IdentityOperator._eval_power"
        ],
        "sympy/physics/quantum/qapply.py": []
    },
    "sympy__sympy-14248": {
        "sympy/printing/str.py": [
            "StrPrinter._print_Add",
            "StrPrinter._print_MatAdd",
            "StrPrinter._print_Mul",
            "StrPrinter._print_MatMul",
            "StrPrinter._print_MatrixSymbol"
        ],
        "sympy/printing/pretty/pretty.py": [
            "PrettyPrinter._print_Add",
            "PrettyPrinter._print_MatAdd",
            "PrettyPrinter._print_Mul",
            "PrettyPrinter._print_MatMul",
            "PrettyPrinter._print_MatrixSymbol"
        ],
        "sympy/printing/latex.py": [
            "LatexPrinter._print_Add",
            "LatexPrinter._print_MatAdd",
            "LatexPrinter._print_Mul",
            "LatexPrinter._print_MatMul",
            "LatexPrinter._print_MatrixSymbol"
        ]
    },
    "sympy__sympy-14531": {
        "sympy/printing/str.py": [
            "StrPrinter",
            "sstr"
        ],
        "sympy/printing/python.py": [
            "PythonPrinter",
            "python",
            "print_python"
        ],
        "sympy/printing/pycode.py": [
            "PythonCodePrinter",
            "pycode"
        ]
    },
    "sympy__sympy-14711": {
        "sympy/physics/vector/vector.py": [
            "Vector.__add__",
            "_check_vector"
        ],
        "sympy/physics/vector/functions.py": [
            "cross",
            "dot",
            "express",
            "time_derivative",
            "outer",
            "kinematic_equations",
            "get_motion_params",
            "partial_velocity",
            "dynamicsymbols"
        ],
        "sympy/physics/vector/__init__.py": []
    },
    "sympy__sympy-14976": {
        "sympy/utilities/lambdify.py": [
            "lambdify",
            "_get_namespace"
        ],
        "sympy/printing/pycode.py": [
            "MpmathPrinter",
            "MpmathPrinter._print_Float"
        ],
        "sympy/printing/python.py": []
    },
    "sympy__sympy-15017": {
        "sympy/tensor/array/ndim_array.py": [
            "NDimArray.__len__",
            "NDimArray.shape",
            "NDimArray.rank"
        ],
        "sympy/tensor/array/__init__.py": [],
        "sympy/tensor/array/arrayop.py": []
    },
    "sympy__sympy-15345": {
        "sympy/printing/mathematica.py": [
            "MCodePrinter._print_Function"
        ],
        "sympy/printing/codeprinter.py": [
            "CodePrinter._print_Function"
        ],
        "sympy/printing/printer.py": []
    },
    "sympy__sympy-15349": {
        "sympy/algebras/quaternion.py": [
            "Quaternion.to_rotation_matrix"
        ],
        "sympy/algebras/__init__.py": [],
        "sympy/matrices/matrices.py": []
    },
    "sympy__sympy-15599": {
        "sympy/core/mod.py": [
            "Mod.eval"
        ],
        "sympy/core/expr.py": [],
        "sympy/core/numbers.py": []
    },
    "sympy__sympy-15809": {
        "sympy/core/function.py": [
            "Function.__new__",
            "Function.eval"
        ],
        "sympy/sets/sets.py": [
            "Set.inf",
            "Set.sup"
        ],
        "sympy/core/__init__.py": []
    },
    "sympy__sympy-15875": {
        "sympy/core/add.py": [
            "Add._eval_is_zero"
        ],
        "sympy/core/expr.py": [
            "Expr.is_zero"
        ],
        "sympy/core/basic.py": []
    },
    "sympy__sympy-15976": {
        "sympy/printing/mathml.py": [
            "MathMLPresentationPrinter._print_Symbol",
            "MathMLContentPrinter._print_Symbol",
            "mathml",
            "print_mathml"
        ],
        "sympy/printing/printer.py": [
            "Printer"
        ],
        "sympy/printing/preview.py": []
    },
    "sympy__sympy-16450": {
        "sympy/core/assumptions.py": [
            "StdFactKB",
            "as_property",
            "make_property",
            "_ask"
        ],
        "sympy/core/symbol.py": [
            "_symbol",
            "_uniquely_named_symbol",
            "Symbol",
            "Dummy",
            "Wild",
            "symbols",
            "var",
            "disambiguate"
        ],
        "sympy/core/basic.py": [
            "as_Basic",
            "Basic",
            "Atom",
            "_aresame",
            "_atomic",
            "preorder_traversal",
            "_make_find_query"
        ]
    },
    "sympy__sympy-16597": {
        "sympy/core/symbol.py": [
            "Symbol"
        ],
        "sympy/core/assumptions.py": [],
        "sympy/core/logic.py": []
    },
    "sympy__sympy-16766": {
        "sympy/printing/pycode.py": [
            "PythonCodePrinter"
        ],
        "sympy/tensor/indexed.py": [
            "Indexed"
        ],
        "sympy/printing/python.py": []
    },
    "sympy__sympy-16792": {
        "sympy/utilities/autowrap.py": [
            "autowrap",
            "CythonCodeWrapper"
        ],
        "sympy/codegen/cnodes.py": [
            "struct"
        ],
        "sympy/codegen/cutils.py": [
            "render_as_source_file"
        ]
    },
    "sympy__sympy-16886": {
        "sympy/crypto/crypto.py": [],
        "sympy/conftest.py": [],
        "sympy/setup.py": []
    },
    "sympy__sympy-17139": {
        "sympy/simplify/fu.py": [
            "TR6",
            "_TR56",
            "_f"
        ],
        "sympy/simplify/simplify.py": [
            "bottom_up"
        ],
        "sympy/core/expr.py": [
            "Expr.__lt__"
        ]
    },
    "sympy__sympy-17318": {
        "sympy/simplify/sqrtdenest.py": [
            "sqrtdenest",
            "_sqrtdenest0",
            "_sqrtdenest1",
            "_sqrt_match"
        ],
        "sympy/simplify/radsimp.py": [
            "split_surds",
            "_split_gcd"
        ],
        "sympy/simplify/simplify.py": []
    },
    "sympy__sympy-17630": {
        "sympy/matrices/expressions/blockmatrix.py": [
            "BlockMatrix._blockmul",
            "BlockMatrix.colblocksizes",
            "bc_matmul",
            "block_collapse"
        ],
        "sympy/matrices/expressions/matexpr.py": [
            "ZeroMatrix"
        ],
        "sympy/matrices/expressions/matmul.py": []
    },
    "sympy__sympy-17655": {
        "sympy/geometry/point.py": [
            "Point",
            "Point.__add__",
            "Point.__mul__",
            "Point._normalize_dimension"
        ],
        "sympy/core/mul.py": [
            "Mul"
        ],
        "sympy/core/expr.py": [
            "Expr",
            "Expr.__mul__",
            "Expr.__rmul__"
        ]
    },
    "sympy__sympy-18189": {
        "sympy/solvers/diophantine.py": [
            "diophantine",
            "merge_solution",
            "diop_solve",
            "classify_diop",
            "diop_quadratic",
            "_diop_quadratic",
            "is_solution_quad",
            "diop_general_sum_of_even_powers",
            "_diop_general_sum_of_even_powers"
        ],
        "sympy/solvers/polysys.py": [],
        "sympy/core/expr.py": []
    },
    "sympy__sympy-18199": {
        "sympy/ntheory/residue_ntheory.py": [
            "nthroot_mod"
        ],
        "sympy/ntheory/modular.py": [],
        "sympy/polys/numberfields.py": []
    },
    "sympy__sympy-18211": {
        "sympy/solvers/solveset.py": [
            "solveset",
            "_solveset",
            "_solve_trig",
            "_solve_trig1",
            "_solve_trig2"
        ],
        "sympy/sets/conditionset.py": [
            "ConditionSet"
        ],
        "sympy/sets/sets.py": [
            "Set"
        ]
    },
    "sympy__sympy-18698": {
        "sympy/polys/sqfreetools.py": [
            "dup_sqf_list",
            "dmp_sqf_list"
        ],
        "sympy/polys/polytools.py": [
            "Poly.sqf_list",
            "Poly.sqf_list_include"
        ],
        "sympy/polys/factortools.py": [
            "dup_factor_list",
            "dmp_factor_list"
        ]
    },
    "sympy__sympy-18763": {
        "sympy/printing/latex.py": [
            "LatexPrinter._print_Subs",
            "LatexPrinter._print_Mul",
            "LatexPrinter._print_Add",
            "LatexPrinter.parenthesize",
            "LatexPrinter._needs_brackets",
            "LatexPrinter._needs_mul_brackets",
            "LatexPrinter._needs_add_brackets"
        ],
        "sympy/printing/precedence.py": [
            "precedence"
        ],
        "sympy/printing/printer.py": []
    },
    "sympy__sympy-19040": {
        "sympy/polys/polytools.py": [
            "factor",
            "factor_list",
            "factor_list_include",
            "_generic_factor",
            "_generic_factor_list",
            "_symbolic_factor",
            "_symbolic_factor_list",
            "_torational_factor_list",
            "to_rational_coeffs",
            "poly_from_expr",
            "_poly_from_expr",
            "parallel_poly_from_expr",
            "_parallel_poly_from_expr"
        ],
        "sympy/polys/factortools.py": [
            "dup_ext_factor",
            "dmp_ext_factor",
            "dup_factor_list",
            "dmp_factor_list",
            "dup_factor_list_include",
            "dmp_factor_list_include"
        ],
        "sympy/polys/polyerrors.py": []
    },
    "sympy__sympy-19346": {
        "sympy/printing/repr.py": [
            "ReprPrinter._print_dict",
            "ReprPrinter._print_set",
            "srepr"
        ],
        "sympy/printing/pycode.py": [],
        "sympy/printing/python.py": []
    },
    "sympy__sympy-19495": {
        "sympy/sets/conditionset.py": [
            "ConditionSet",
            "ConditionSet._eval_subs"
        ],
        "sympy/sets/fancysets.py": [
            "ImageSet"
        ],
        "sympy/sets/contains.py": [
            "Contains"
        ]
    },
    "sympy__sympy-19637": {
        "sympy/core/sympify.py": [
            "kernS"
        ],
        "sympy/core/__init__.py": [],
        "sympy/core/core.py": [
            "Registry",
            "BasicMeta"
        ]
    },
    "sympy__sympy-19783": {
        "sympy/physics/quantum/dagger.py": [
            "Dagger"
        ],
        "sympy/physics/quantum/operator.py": [
            "Operator",
            "IdentityOperator"
        ],
        "sympy/physics/quantum/identitysearch.py": []
    },
    "sympy__sympy-19954": {
        "sympy/combinatorics/perm_groups.py": [
            "PermutationGroup.sylow_subgroup",
            "PermutationGroup.minimal_blocks"
        ],
        "sympy/combinatorics/named_groups.py": [],
        "sympy/combinatorics/group_constructs.py": []
    },
    "sympy__sympy-20154": {
        "sympy/utilities/iterables.py": [
            "partitions"
        ],
        "sympy/combinatorics/partitions.py": [],
        "sympy/combinatorics/util.py": []
    },
    "sympy__sympy-20428": {
        "sympy/polys/polytools.py": [
            "Poly.clear_denoms",
            "Poly.terms_gcd",
            "Poly.primitive",
            "Poly.is_zero"
        ],
        "sympy/polys/polyclasses.py": [
            "DMP"
        ],
        "sympy/polys/densebasic.py": [
            "dmp_terms_gcd",
            "dmp_strip"
        ]
    },
    "sympy__sympy-20438": {
        "sympy/sets/sets.py": [
            "Set.is_subset",
            "Set._eval_is_subset",
            "ProductSet._contains",
            "FiniteSet._eval_is_subset"
        ],
        "sympy/sets/handlers/issubset.py": [
            "is_subset_sets"
        ],
        "sympy/core/relational.py": [
            "Equality._eval_simplify"
        ]
    },
    "sympy__sympy-20590": {
        "sympy/core/symbol.py": [
            "Symbol",
            "Dummy",
            "Wild"
        ],
        "sympy/core/basic.py": [
            "Basic",
            "Atom"
        ],
        "sympy/core/__init__.py": []
    },
    "sympy__sympy-20801": {
        "sympy/core/relational.py": [
            "Relational",
            "Equality",
            "Unequality",
            "_Inequality",
            "_Greater",
            "_Less",
            "GreaterThan",
            "LessThan",
            "StrictGreaterThan",
            "StrictLessThan",
            "_eval_is_eq",
            "is_eq"
        ],
        "sympy/core/numbers.py": [
            "Number",
            "Float",
            "Rational",
            "Integer",
            "Zero",
            "One",
            "NegativeOne",
            "Infinity",
            "NegativeInfinity",
            "NaN",
            "ComplexInfinity",
            "NumberSymbol",
            "Exp1",
            "Pi",
            "GoldenRatio",
            "TribonacciConstant",
            "EulerGamma",
            "Catalan",
            "ImaginaryUnit",
            "sympify_fractions",
            "sympify_mpmath_mpq",
            "sympify_mpmath",
            "sympify_complex"
        ],
        "sympy/core/singleton.py": [
            "SingletonRegistry",
            "Singleton"
        ]
    },
    "sympy__sympy-20916": {
        "sympy/printing/pretty/pretty_symbology.py": [
            "U",
            "GSUB"
        ],
        "sympy/printing/pretty/pretty.py": [
            "PrettyPrinter"
        ],
        "sympy/printing/str.py": [
            "StrPrinter"
        ]
    },
    "sympy__sympy-21379": {
        "sympy/core/assumptions.py": [
            "assumptions",
            "common_assumptions",
            "failing_assumptions",
            "check_assumptions",
            "StdFactKB",
            "as_property",
            "make_property",
            "_ask",
            "ManagedProperties"
        ],
        "sympy/core/symbol.py": [
            "Symbol",
            "_filter_assumptions",
            "_symbol",
            "uniquely_named_symbol",
            "symbols",
            "var",
            "disambiguate"
        ],
        "sympy/functions/elementary/piecewise.py": [
            "Piecewise",
            "ExprCondPair",
            "piecewise_fold",
            "_clip",
            "piecewise_simplify_arguments",
            "piecewise_simplify"
        ]
    },
    "sympy__sympy-21596": {
        "sympy/sets/handlers/issubset.py": [
            "is_subset_sets"
        ],
        "sympy/sets/sets.py": [
            "Set.intersect",
            "Set.intersection",
            "Set.is_subset",
            "Set._eval_is_subset",
            "Set._contains",
            "Set.__contains__",
            "Interval._contains",
            "Union._contains",
            "Intersection._contains",
            "Complement._contains",
            "EmptySet._contains",
            "UniversalSet._contains",
            "FiniteSet._contains"
        ],
        "sympy/sets/contains.py": [
            "Contains"
        ]
    },
    "sympy__sympy-21612": {
        "sympy/parsing/latex/_parse_latex_antlr.py": [
            "parse_latex",
            "convert_frac"
        ],
        "sympy/parsing/latex/__init__.py": [
            "parse_latex"
        ],
        "sympy/printing/latex.py": [
            "LatexPrinter"
        ]
    },
    "sympy__sympy-21847": {
        "sympy/polys/monomials.py": [
            "itermonomials"
        ],
        "sympy/polys/polytools.py": [
            "total_degree"
        ],
        "sympy/polys/polyutils.py": []
    },
    "sympy__sympy-21930": {
        "sympy/printing/latex.py": [
            "LatexPrinter._print_Pow",
            "LatexPrinter._do_exponent"
        ],
        "sympy/physics/secondquant.py": [
            "CreateBoson._latex",
            "Commutator._latex"
        ],
        "sympy/printing/pretty/pretty.py": []
    },
    "sympy__sympy-22080": {
        "sympy/utilities/lambdify.py": [
            "lambdify",
            "_EvaluatorPrinter"
        ],
        "sympy/printing/pycode.py": [
            "_print_Mod"
        ],
        "sympy/core/mod.py": [
            "Mod"
        ]
    },
    "sympy__sympy-22456": {
        "sympy/codegen/ast.py": [
            "String",
            "Token",
            "CodegenAST",
            "CodeBlock",
            "FunctionCall"
        ],
        "sympy/codegen/pynodes.py": [
            "List"
        ],
        "sympy/codegen/cxxnodes.py": []
    },
    "sympy__sympy-22714": {
        "sympy/geometry/point.py": [
            "Point",
            "Point2D"
        ],
        "sympy/core/sympify.py": [
            "sympify"
        ],
        "sympy/parsing/sympy_parser.py": [
            "parse_expr",
            "eval_expr"
        ]
    },
    "sympy__sympy-22914": {
        "sympy/printing/pycode.py": [
            "PythonCodePrinter._print_Min",
            "PythonCodePrinter._print_Max"
        ],
        "sympy/printing/codeprinter.py": [],
        "sympy/printing/python.py": []
    },
    "sympy__sympy-23262": {
        "sympy/printing/codeprinter.py": [
            "CodePrinter"
        ],
        "sympy/printing/python.py": [
            "PythonPrinter"
        ],
        "sympy/printing/pycode.py": [
            "PythonCodePrinter"
        ]
    },
    "sympy__sympy-23413": {
        "sympy/matrices/normalforms.py": [
            "hermite_normal_form"
        ],
        "sympy/matrices/matrices.py": [
            "MatrixReductions.rank",
            "MatrixReductions.rref"
        ],
        "sympy/matrices/reductions.py": [
            "_rank",
            "_rref"
        ]
    },
    "sympy__sympy-23534": {
        "sympy/core/symbol.py": [
            "symbols"
        ],
        "sympy/core/function.py": [
            "UndefinedFunction"
        ],
        "sympy/core/__init__.py": []
    },
    "sympy__sympy-23824": {
        "sympy/physics/hep/gamma_matrices.py": [
            "kahane_simplify"
        ],
        "sympy/physics/hep/__init__.py": [],
        "sympy/physics/__init__.py": []
    },
    "sympy__sympy-23950": {
        "sympy/sets/contains.py": [
            "Contains.as_set"
        ],
        "sympy/sets/sets.py": [
            "Set.contains",
            "Set._contains"
        ],
        "sympy/functions/elementary/piecewise.py": [
            "Piecewise.eval"
        ]
    },
    "sympy__sympy-24066": {
        "sympy/physics/units/systems/si.py": [],
        "sympy/physics/units/unitsystem.py": [
            "UnitSystem._collect_factor_and_dimension",
            "UnitSystem.get_dimension_system"
        ],
        "sympy/physics/units/dimensions.py": [
            "DimensionSystem.is_dimensionless"
        ]
    },
    "sympy__sympy-24213": {
        "sympy/physics/units/unitsystem.py": [
            "UnitSystem._collect_factor_and_dimension"
        ],
        "sympy/physics/units/quantities.py": [
            "Quantity._collect_factor_and_dimension"
        ],
        "sympy/physics/units/dimensions.py": [
            "DimensionSystem.equivalent_dims"
        ]
    },
    "sympy__sympy-24443": {
        "sympy/combinatorics/homomorphisms.py": [
            "_check_homomorphism",
            "GroupHomomorphism._apply",
            "GroupHomomorphism.__call__"
        ],
        "sympy/combinatorics/perm_groups.py": [
            "PermutationGroup"
        ],
        "sympy/combinatorics/permutations.py": [
            "Permutation"
        ]
    },
    "sympy__sympy-24539": {
        "sympy/polys/rings.py": [
            "PolyElement.as_expr",
            "PolyElement._rebuild_expr",
            "PolyRing.clone"
        ],
        "sympy/polys/polytools.py": [
            "Poly.as_expr"
        ],
        "sympy/polys/polyerrors.py": []
    },
    "sympy__sympy-24562": {
        "sympy/core/numbers.py": [
            "Rational",
            "Rational.__new__"
        ],
        "sympy/core/sympify.py": [
            "sympify",
            "_sympify"
        ],
        "sympy/external/pythonmpq.py": [
            "PythonMPQ"
        ]
    },
    "sympy__sympy-24661": {
        "sympy/parsing/sympy_parser.py": [
            "parse_expr"
        ],
        "sympy/core/relational.py": [
            "Relational",
            "StrictLessThan",
            "StrictGreaterThan",
            "LessThan",
            "GreaterThan",
            "Unequality",
            "Equality"
        ],
        "sympy/core/expr.py": [
            "Expr"
        ]
    }
}